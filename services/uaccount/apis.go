// Code is generated by ucloud-model, DO NOT EDIT IT.




package uaccount

import (
	"github.com/ucloud/ucloud-sdk-go/ucloud/request"
	"github.com/ucloud/ucloud-sdk-go/ucloud/response"
)

// UAccount API Schema
















// CreateProjectRequest is request schema for CreateProject action
type CreateProjectRequest struct {
	request.CommonBase




    //  
    ParentId *string `required:"false"`

    //  
    ProjectName *string `required:"true"`

}


// CreateProjectResponse is response schema for CreateProject action
type CreateProjectResponse struct {
	response.CommonBase


    //  
    ProjectId string 

}


// NewCreateProjectRequest will create request of CreateProject action.
func (c *UAccountClient) NewCreateProjectRequest() *CreateProjectRequest {
    req := &CreateProjectRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: CreateProject


*/
func (c *UAccountClient) CreateProject(req *CreateProjectRequest) (*CreateProjectResponse, error) {
	var err error
	var res CreateProjectResponse

	reqCopier := *req
    
    
    
    
    
	err = c.Client.InvokeAction("CreateProject", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// GetProjectListRequest is request schema for GetProjectList action
type GetProjectListRequest struct {
	request.CommonBase




    //  
    IsFinance *string `required:"false"`

}


// GetProjectListResponse is response schema for GetProjectList action
type GetProjectListResponse struct {
	response.CommonBase


    //  
    ProjectCount int 

    //  
    ProjectSet []ProjectListInfo 

}


// NewGetProjectListRequest will create request of GetProjectList action.
func (c *UAccountClient) NewGetProjectListRequest() *GetProjectListRequest {
    req := &GetProjectListRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: GetProjectList


*/
func (c *UAccountClient) GetProjectList(req *GetProjectListRequest) (*GetProjectListResponse, error) {
	var err error
	var res GetProjectListResponse

	reqCopier := *req
    
    
    
	err = c.Client.InvokeAction("GetProjectList", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// GetRegionRequest is request schema for GetRegion action
type GetRegionRequest struct {
	request.CommonBase




}


// GetRegionResponse is response schema for GetRegion action
type GetRegionResponse struct {
	response.CommonBase


    //  
    Regions []RegionInfo 

}


// NewGetRegionRequest will create request of GetRegion action.
func (c *UAccountClient) NewGetRegionRequest() *GetRegionRequest {
    req := &GetRegionRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: GetRegion


*/
func (c *UAccountClient) GetRegion(req *GetRegionRequest) (*GetRegionResponse, error) {
	var err error
	var res GetRegionResponse

	reqCopier := *req
    
	err = c.Client.InvokeAction("GetRegion", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// GetUserInfoRequest is request schema for GetUserInfo action
type GetUserInfoRequest struct {
	request.CommonBase




}


// GetUserInfoResponse is response schema for GetUserInfo action
type GetUserInfoResponse struct {
	response.CommonBase


    //  
    DataSet []UserInfo 

}


// NewGetUserInfoRequest will create request of GetUserInfo action.
func (c *UAccountClient) NewGetUserInfoRequest() *GetUserInfoRequest {
    req := &GetUserInfoRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: GetUserInfo


*/
func (c *UAccountClient) GetUserInfo(req *GetUserInfoRequest) (*GetUserInfoResponse, error) {
	var err error
	var res GetUserInfoResponse

	reqCopier := *req
    
	err = c.Client.InvokeAction("GetUserInfo", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// ModifyProjectRequest is request schema for ModifyProject action
type ModifyProjectRequest struct {
	request.CommonBase




    //  
    ProjectName *string `required:"true"`

}


// ModifyProjectResponse is response schema for ModifyProject action
type ModifyProjectResponse struct {
	response.CommonBase


}


// NewModifyProjectRequest will create request of ModifyProject action.
func (c *UAccountClient) NewModifyProjectRequest() *ModifyProjectRequest {
    req := &ModifyProjectRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: ModifyProject


*/
func (c *UAccountClient) ModifyProject(req *ModifyProjectRequest) (*ModifyProjectResponse, error) {
	var err error
	var res ModifyProjectResponse

	reqCopier := *req
    
    
    
	err = c.Client.InvokeAction("ModifyProject", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// TerminateProjectRequest is request schema for TerminateProject action
type TerminateProjectRequest struct {
	request.CommonBase




}


// TerminateProjectResponse is response schema for TerminateProject action
type TerminateProjectResponse struct {
	response.CommonBase


}


// NewTerminateProjectRequest will create request of TerminateProject action.
func (c *UAccountClient) NewTerminateProjectRequest() *TerminateProjectRequest {
    req := &TerminateProjectRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: TerminateProject


*/
func (c *UAccountClient) TerminateProject(req *TerminateProjectRequest) (*TerminateProjectResponse, error) {
	var err error
	var res TerminateProjectResponse

	reqCopier := *req
    
	err = c.Client.InvokeAction("TerminateProject", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}


