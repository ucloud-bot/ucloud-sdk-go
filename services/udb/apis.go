// Code is generated by ucloud-model, DO NOT EDIT IT.




package udb

import (
	"github.com/ucloud/ucloud-sdk-go/ucloud/request"
	"github.com/ucloud/ucloud-sdk-go/ucloud/response"
)

// UDB API Schema
















// BackupUDBInstanceRequest is request schema for BackupUDBInstance action
type BackupUDBInstanceRequest struct {
	request.CommonBase




    //  
    BackupName *string `required:"true"`

    //  
    DBId *string `required:"true"`

    //  
    UseBlacklist *bool `required:"false"`

}


// BackupUDBInstanceResponse is response schema for BackupUDBInstance action
type BackupUDBInstanceResponse struct {
	response.CommonBase


}


// NewBackupUDBInstanceRequest will create request of BackupUDBInstance action.
func (c *UDBClient) NewBackupUDBInstanceRequest() *BackupUDBInstanceRequest {
    req := &BackupUDBInstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: BackupUDBInstance


*/
func (c *UDBClient) BackupUDBInstance(req *BackupUDBInstanceRequest) (*BackupUDBInstanceResponse, error) {
	var err error
	var res BackupUDBInstanceResponse

	reqCopier := *req
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("BackupUDBInstance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// BackupUDBInstanceBinlogRequest is request schema for BackupUDBInstanceBinlog action
type BackupUDBInstanceBinlogRequest struct {
	request.CommonBase




    //  
    BackupFile *string `required:"true"`

    //  
    BackupName *string `required:"false"`

    //  
    DBId *string `required:"true"`

}


// BackupUDBInstanceBinlogResponse is response schema for BackupUDBInstanceBinlog action
type BackupUDBInstanceBinlogResponse struct {
	response.CommonBase


}


// NewBackupUDBInstanceBinlogRequest will create request of BackupUDBInstanceBinlog action.
func (c *UDBClient) NewBackupUDBInstanceBinlogRequest() *BackupUDBInstanceBinlogRequest {
    req := &BackupUDBInstanceBinlogRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: BackupUDBInstanceBinlog


*/
func (c *UDBClient) BackupUDBInstanceBinlog(req *BackupUDBInstanceBinlogRequest) (*BackupUDBInstanceBinlogResponse, error) {
	var err error
	var res BackupUDBInstanceBinlogResponse

	reqCopier := *req
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("BackupUDBInstanceBinlog", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// BackupUDBInstanceErrorLogRequest is request schema for BackupUDBInstanceErrorLog action
type BackupUDBInstanceErrorLogRequest struct {
	request.CommonBase




    //  
    BackupName *string `required:"true"`

    //  
    DBId *string `required:"true"`

}


// BackupUDBInstanceErrorLogResponse is response schema for BackupUDBInstanceErrorLog action
type BackupUDBInstanceErrorLogResponse struct {
	response.CommonBase


}


// NewBackupUDBInstanceErrorLogRequest will create request of BackupUDBInstanceErrorLog action.
func (c *UDBClient) NewBackupUDBInstanceErrorLogRequest() *BackupUDBInstanceErrorLogRequest {
    req := &BackupUDBInstanceErrorLogRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: BackupUDBInstanceErrorLog


*/
func (c *UDBClient) BackupUDBInstanceErrorLog(req *BackupUDBInstanceErrorLogRequest) (*BackupUDBInstanceErrorLogResponse, error) {
	var err error
	var res BackupUDBInstanceErrorLogResponse

	reqCopier := *req
    
    
    
    
    
	err = c.Client.InvokeAction("BackupUDBInstanceErrorLog", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// BackupUDBInstanceSlowLogRequest is request schema for BackupUDBInstanceSlowLog action
type BackupUDBInstanceSlowLogRequest struct {
	request.CommonBase




    //  
    BackupName *string `required:"true"`

    //  
    BeginTime *int `required:"true"`

    //  
    DBId *string `required:"true"`

    //  
    EndTime *int `required:"true"`

}


// BackupUDBInstanceSlowLogResponse is response schema for BackupUDBInstanceSlowLog action
type BackupUDBInstanceSlowLogResponse struct {
	response.CommonBase


}


// NewBackupUDBInstanceSlowLogRequest will create request of BackupUDBInstanceSlowLog action.
func (c *UDBClient) NewBackupUDBInstanceSlowLogRequest() *BackupUDBInstanceSlowLogRequest {
    req := &BackupUDBInstanceSlowLogRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: BackupUDBInstanceSlowLog


*/
func (c *UDBClient) BackupUDBInstanceSlowLog(req *BackupUDBInstanceSlowLogRequest) (*BackupUDBInstanceSlowLogResponse, error) {
	var err error
	var res BackupUDBInstanceSlowLogResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("BackupUDBInstanceSlowLog", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// CheckRecoverUDBInstanceRequest is request schema for CheckRecoverUDBInstance action
type CheckRecoverUDBInstanceRequest struct {
	request.CommonBase




    //  
    SrcDBId *string `required:"true"`

}


// CheckRecoverUDBInstanceResponse is response schema for CheckRecoverUDBInstance action
type CheckRecoverUDBInstanceResponse struct {
	response.CommonBase


    //  
    LastestTime int 

}


// NewCheckRecoverUDBInstanceRequest will create request of CheckRecoverUDBInstance action.
func (c *UDBClient) NewCheckRecoverUDBInstanceRequest() *CheckRecoverUDBInstanceRequest {
    req := &CheckRecoverUDBInstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: CheckRecoverUDBInstance


*/
func (c *UDBClient) CheckRecoverUDBInstance(req *CheckRecoverUDBInstanceRequest) (*CheckRecoverUDBInstanceResponse, error) {
	var err error
	var res CheckRecoverUDBInstanceResponse

	reqCopier := *req
    
    
    
	err = c.Client.InvokeAction("CheckRecoverUDBInstance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// CheckUDBInstanceToHAAllowanceRequest is request schema for CheckUDBInstanceToHAAllowance action
type CheckUDBInstanceToHAAllowanceRequest struct {
	request.CommonBase




    //  
    DBId *string `required:"true"`

}


// CheckUDBInstanceToHAAllowanceResponse is response schema for CheckUDBInstanceToHAAllowance action
type CheckUDBInstanceToHAAllowanceResponse struct {
	response.CommonBase


    //  
    Allowance string 

}


// NewCheckUDBInstanceToHAAllowanceRequest will create request of CheckUDBInstanceToHAAllowance action.
func (c *UDBClient) NewCheckUDBInstanceToHAAllowanceRequest() *CheckUDBInstanceToHAAllowanceRequest {
    req := &CheckUDBInstanceToHAAllowanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: CheckUDBInstanceToHAAllowance


*/
func (c *UDBClient) CheckUDBInstanceToHAAllowance(req *CheckUDBInstanceToHAAllowanceRequest) (*CheckUDBInstanceToHAAllowanceResponse, error) {
	var err error
	var res CheckUDBInstanceToHAAllowanceResponse

	reqCopier := *req
    
    
    
	err = c.Client.InvokeAction("CheckUDBInstanceToHAAllowance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// ClearUDBLogRequest is request schema for ClearUDBLog action
type ClearUDBLogRequest struct {
	request.CommonBase




    //  
    BeforeTime *int `required:"false"`

    //  
    DBId *string `required:"true"`

    //  
    LogType *int `required:"true"`

}


// ClearUDBLogResponse is response schema for ClearUDBLog action
type ClearUDBLogResponse struct {
	response.CommonBase


}


// NewClearUDBLogRequest will create request of ClearUDBLog action.
func (c *UDBClient) NewClearUDBLogRequest() *ClearUDBLogRequest {
    req := &ClearUDBLogRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: ClearUDBLog


*/
func (c *UDBClient) ClearUDBLog(req *ClearUDBLogRequest) (*ClearUDBLogResponse, error) {
	var err error
	var res ClearUDBLogResponse

	reqCopier := *req
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("ClearUDBLog", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// CreateUDBInstanceRequest is request schema for CreateUDBInstance action
type CreateUDBInstanceRequest struct {
	request.CommonBase




    //  
    AdminPassword *string `required:"true"`

    //  
    AdminUser *string `required:"false"`

    //  
    BackupCount *int `required:"false"`

    //  
    BackupDuration *int `required:"false"`

    //  
    BackupId *int `required:"false"`

    //  
    BackupTime *int `required:"false"`

    //  
    BackupZone *string `required:"false"`

    //  
    CPU *int `required:"false"`

    //  
    ChargeType *string `required:"false"`

    //  
    ClusterRole *string `required:"false"`

    //  
    CouponId *string `required:"false"`

    //  
    DBTypeId *string `required:"true"`

    //  
    DisableSemisync *bool `required:"false"`

    //  
    DiskSpace *int `required:"true"`

    //  
    InstanceMode *string `required:"false"`

    //  
    InstanceType *string `required:"false"`

    //  
    MemoryLimit *int `required:"true"`

    //  
    Name *string `required:"true"`

    //  
    ParamGroupId *int `required:"true"`

    //  
    Port *int `required:"true"`

    //  
    Quantity *int `required:"false"`

    //  
    SSDType *string `required:"false"`

    //  
    SubnetId *string `required:"false"`

    //  
    Tag *string `required:"false"`

    //  
    UDBCId *string `required:"false"`

    //  
    UseSSD *bool `required:"false"`

    //  
    VPCId *string `required:"false"`

}


// CreateUDBInstanceResponse is response schema for CreateUDBInstance action
type CreateUDBInstanceResponse struct {
	response.CommonBase


    //  
    DBId string 

}


// NewCreateUDBInstanceRequest will create request of CreateUDBInstance action.
func (c *UDBClient) NewCreateUDBInstanceRequest() *CreateUDBInstanceRequest {
    req := &CreateUDBInstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: CreateUDBInstance


*/
func (c *UDBClient) CreateUDBInstance(req *CreateUDBInstanceRequest) (*CreateUDBInstanceResponse, error) {
	var err error
	var res CreateUDBInstanceResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("CreateUDBInstance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// CreateUDBInstanceByRecoveryRequest is request schema for CreateUDBInstanceByRecovery action
type CreateUDBInstanceByRecoveryRequest struct {
	request.CommonBase




    //  
    ChargeType *string `required:"false"`

    //  
    CouponId *string `required:"false"`

    //  
    Name *string `required:"true"`

    //  
    Quantity *int `required:"false"`

    //  
    RecoveryTime *int `required:"true"`

    //  
    SrcDBId *string `required:"true"`

    //  
    UDBCId *string `required:"false"`

    //  
    UseSSD *bool `required:"false"`

}


// CreateUDBInstanceByRecoveryResponse is response schema for CreateUDBInstanceByRecovery action
type CreateUDBInstanceByRecoveryResponse struct {
	response.CommonBase


    //  
    DBId string 

}


// NewCreateUDBInstanceByRecoveryRequest will create request of CreateUDBInstanceByRecovery action.
func (c *UDBClient) NewCreateUDBInstanceByRecoveryRequest() *CreateUDBInstanceByRecoveryRequest {
    req := &CreateUDBInstanceByRecoveryRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: CreateUDBInstanceByRecovery


*/
func (c *UDBClient) CreateUDBInstanceByRecovery(req *CreateUDBInstanceByRecoveryRequest) (*CreateUDBInstanceByRecoveryResponse, error) {
	var err error
	var res CreateUDBInstanceByRecoveryResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("CreateUDBInstanceByRecovery", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// CreateUDBParamGroupRequest is request schema for CreateUDBParamGroup action
type CreateUDBParamGroupRequest struct {
	request.CommonBase




    //  
    DBTypeId *string `required:"true"`

    //  
    Description *string `required:"true"`

    //  
    GroupName *string `required:"true"`

    //  
    RegionFlag *bool `required:"false"`

    //  
    SrcGroupId *int `required:"true"`

}


// CreateUDBParamGroupResponse is response schema for CreateUDBParamGroup action
type CreateUDBParamGroupResponse struct {
	response.CommonBase


    //  
    GroupId int 

}


// NewCreateUDBParamGroupRequest will create request of CreateUDBParamGroup action.
func (c *UDBClient) NewCreateUDBParamGroupRequest() *CreateUDBParamGroupRequest {
    req := &CreateUDBParamGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: CreateUDBParamGroup


*/
func (c *UDBClient) CreateUDBParamGroup(req *CreateUDBParamGroupRequest) (*CreateUDBParamGroupResponse, error) {
	var err error
	var res CreateUDBParamGroupResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("CreateUDBParamGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// CreateUDBReplicationInstanceRequest is request schema for CreateUDBReplicationInstance action
type CreateUDBReplicationInstanceRequest struct {
	request.CommonBase




    //  
    CouponId *string `required:"false"`

    //  
    IsArbiter *bool `required:"false"`

    //  
    Name *string `required:"true"`

    //  
    Port *int `required:"false"`

    //  
    SrcId *string `required:"true"`

    //  
    UseSSD *bool `required:"false"`

}


// CreateUDBReplicationInstanceResponse is response schema for CreateUDBReplicationInstance action
type CreateUDBReplicationInstanceResponse struct {
	response.CommonBase


    //  
    DBId string 

}


// NewCreateUDBReplicationInstanceRequest will create request of CreateUDBReplicationInstance action.
func (c *UDBClient) NewCreateUDBReplicationInstanceRequest() *CreateUDBReplicationInstanceRequest {
    req := &CreateUDBReplicationInstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: CreateUDBReplicationInstance


*/
func (c *UDBClient) CreateUDBReplicationInstance(req *CreateUDBReplicationInstanceRequest) (*CreateUDBReplicationInstanceResponse, error) {
	var err error
	var res CreateUDBReplicationInstanceResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("CreateUDBReplicationInstance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// CreateUDBRouteInstanceRequest is request schema for CreateUDBRouteInstance action
type CreateUDBRouteInstanceRequest struct {
	request.CommonBase




    //  
    ChargeType *string `required:"false"`

    //  
    ConfigsvrId []string `required:"true"`

    //  
    CouponId *string `required:"false"`

    //  
    DBTypeId *string `required:"true"`

    //  
    DiskSpace *int `required:"true"`

    //  
    MemoryLimit *int `required:"true"`

    //  
    Name *string `required:"true"`

    //  
    ParamGroupId *int `required:"true"`

    //  
    Port *int `required:"true"`

    //  
    Quantity *int `required:"false"`

    //  
    UseSSD *bool `required:"false"`

}


// CreateUDBRouteInstanceResponse is response schema for CreateUDBRouteInstance action
type CreateUDBRouteInstanceResponse struct {
	response.CommonBase


    //  
    DBId string 

}


// NewCreateUDBRouteInstanceRequest will create request of CreateUDBRouteInstance action.
func (c *UDBClient) NewCreateUDBRouteInstanceRequest() *CreateUDBRouteInstanceRequest {
    req := &CreateUDBRouteInstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: CreateUDBRouteInstance


*/
func (c *UDBClient) CreateUDBRouteInstance(req *CreateUDBRouteInstanceRequest) (*CreateUDBRouteInstanceResponse, error) {
	var err error
	var res CreateUDBRouteInstanceResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("CreateUDBRouteInstance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// CreateUDBSlaveRequest is request schema for CreateUDBSlave action
type CreateUDBSlaveRequest struct {
	request.CommonBase




    //  
    CouponId *string `required:"false"`

    //  
    DiskSpace *int `required:"false"`

    //  
    InstanceMode *string `required:"false"`

    //  
    InstanceType *string `required:"false"`

    //  
    IsLock *bool `required:"false"`

    //  
    MemoryLimit *int `required:"false"`

    //  
    Name *string `required:"true"`

    //  
    ParamGroupId *string `required:"false"`

    //  
    Port *int `required:"false"`

    //  
    SSDType *string `required:"false"`

    //  
    SrcId *string `required:"true"`

    //  
    UseSSD *bool `required:"false"`

}


// CreateUDBSlaveResponse is response schema for CreateUDBSlave action
type CreateUDBSlaveResponse struct {
	response.CommonBase


    //  
    DBId string 

}


// NewCreateUDBSlaveRequest will create request of CreateUDBSlave action.
func (c *UDBClient) NewCreateUDBSlaveRequest() *CreateUDBSlaveRequest {
    req := &CreateUDBSlaveRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: CreateUDBSlave


*/
func (c *UDBClient) CreateUDBSlave(req *CreateUDBSlaveRequest) (*CreateUDBSlaveResponse, error) {
	var err error
	var res CreateUDBSlaveResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("CreateUDBSlave", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DeleteUDBBackupRequest is request schema for DeleteUDBBackup action
type DeleteUDBBackupRequest struct {
	request.CommonBase




    //  
    BackupId *int `required:"true"`

    //  
    BackupZone *string `required:"false"`

}


// DeleteUDBBackupResponse is response schema for DeleteUDBBackup action
type DeleteUDBBackupResponse struct {
	response.CommonBase


}


// NewDeleteUDBBackupRequest will create request of DeleteUDBBackup action.
func (c *UDBClient) NewDeleteUDBBackupRequest() *DeleteUDBBackupRequest {
    req := &DeleteUDBBackupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DeleteUDBBackup


*/
func (c *UDBClient) DeleteUDBBackup(req *DeleteUDBBackupRequest) (*DeleteUDBBackupResponse, error) {
	var err error
	var res DeleteUDBBackupResponse

	reqCopier := *req
    
    
    
    
    
	err = c.Client.InvokeAction("DeleteUDBBackup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DeleteUDBInstanceRequest is request schema for DeleteUDBInstance action
type DeleteUDBInstanceRequest struct {
	request.CommonBase




    //  
    DBId *string `required:"true"`

    //  
    UDBCId *string `required:"false"`

}


// DeleteUDBInstanceResponse is response schema for DeleteUDBInstance action
type DeleteUDBInstanceResponse struct {
	response.CommonBase


}


// NewDeleteUDBInstanceRequest will create request of DeleteUDBInstance action.
func (c *UDBClient) NewDeleteUDBInstanceRequest() *DeleteUDBInstanceRequest {
    req := &DeleteUDBInstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DeleteUDBInstance


*/
func (c *UDBClient) DeleteUDBInstance(req *DeleteUDBInstanceRequest) (*DeleteUDBInstanceResponse, error) {
	var err error
	var res DeleteUDBInstanceResponse

	reqCopier := *req
    
    
    
    
    
	err = c.Client.InvokeAction("DeleteUDBInstance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DeleteUDBLogPackageRequest is request schema for DeleteUDBLogPackage action
type DeleteUDBLogPackageRequest struct {
	request.CommonBase




    //  
    BackupId *int `required:"true"`

    //  
    BackupZone *string `required:"false"`

}


// DeleteUDBLogPackageResponse is response schema for DeleteUDBLogPackage action
type DeleteUDBLogPackageResponse struct {
	response.CommonBase


}


// NewDeleteUDBLogPackageRequest will create request of DeleteUDBLogPackage action.
func (c *UDBClient) NewDeleteUDBLogPackageRequest() *DeleteUDBLogPackageRequest {
    req := &DeleteUDBLogPackageRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DeleteUDBLogPackage


*/
func (c *UDBClient) DeleteUDBLogPackage(req *DeleteUDBLogPackageRequest) (*DeleteUDBLogPackageResponse, error) {
	var err error
	var res DeleteUDBLogPackageResponse

	reqCopier := *req
    
    
    
    
    
	err = c.Client.InvokeAction("DeleteUDBLogPackage", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DeleteUDBParamGroupRequest is request schema for DeleteUDBParamGroup action
type DeleteUDBParamGroupRequest struct {
	request.CommonBase




    //  
    GroupId *int `required:"true"`

    //  
    RegionFlag *bool `required:"false"`

}


// DeleteUDBParamGroupResponse is response schema for DeleteUDBParamGroup action
type DeleteUDBParamGroupResponse struct {
	response.CommonBase


}


// NewDeleteUDBParamGroupRequest will create request of DeleteUDBParamGroup action.
func (c *UDBClient) NewDeleteUDBParamGroupRequest() *DeleteUDBParamGroupRequest {
    req := &DeleteUDBParamGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DeleteUDBParamGroup


*/
func (c *UDBClient) DeleteUDBParamGroup(req *DeleteUDBParamGroupRequest) (*DeleteUDBParamGroupResponse, error) {
	var err error
	var res DeleteUDBParamGroupResponse

	reqCopier := *req
    
    
    
    
    
	err = c.Client.InvokeAction("DeleteUDBParamGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DescribeUDBBackupRequest is request schema for DescribeUDBBackup action
type DescribeUDBBackupRequest struct {
	request.CommonBase




    //  
    BackupId *int `required:"false"`

    //  
    BackupType *int `required:"false"`

    //  
    BeginTime *int `required:"false"`

    //  
    ClassType *string `required:"false"`

    //  
    DBId *string `required:"false"`

    //  
    EndTime *int `required:"false"`

    //  
    Limit *int `required:"true"`

    //  
    Offset *int `required:"true"`

}


// DescribeUDBBackupResponse is response schema for DescribeUDBBackup action
type DescribeUDBBackupResponse struct {
	response.CommonBase


    //  
    DataSet []UDBBackupSet 

    //  
    TotalCount int 

}


// NewDescribeUDBBackupRequest will create request of DescribeUDBBackup action.
func (c *UDBClient) NewDescribeUDBBackupRequest() *DescribeUDBBackupRequest {
    req := &DescribeUDBBackupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DescribeUDBBackup


*/
func (c *UDBClient) DescribeUDBBackup(req *DescribeUDBBackupRequest) (*DescribeUDBBackupResponse, error) {
	var err error
	var res DescribeUDBBackupResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("DescribeUDBBackup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DescribeUDBBackupBlacklistRequest is request schema for DescribeUDBBackupBlacklist action
type DescribeUDBBackupBlacklistRequest struct {
	request.CommonBase




    //  
    DBId *string `required:"true"`

}


// DescribeUDBBackupBlacklistResponse is response schema for DescribeUDBBackupBlacklist action
type DescribeUDBBackupBlacklistResponse struct {
	response.CommonBase


    //  
    Blacklist string 

}


// NewDescribeUDBBackupBlacklistRequest will create request of DescribeUDBBackupBlacklist action.
func (c *UDBClient) NewDescribeUDBBackupBlacklistRequest() *DescribeUDBBackupBlacklistRequest {
    req := &DescribeUDBBackupBlacklistRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DescribeUDBBackupBlacklist


*/
func (c *UDBClient) DescribeUDBBackupBlacklist(req *DescribeUDBBackupBlacklistRequest) (*DescribeUDBBackupBlacklistResponse, error) {
	var err error
	var res DescribeUDBBackupBlacklistResponse

	reqCopier := *req
    
    
    
	err = c.Client.InvokeAction("DescribeUDBBackupBlacklist", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DescribeUDBBinlogBackupURLRequest is request schema for DescribeUDBBinlogBackupURL action
type DescribeUDBBinlogBackupURLRequest struct {
	request.CommonBase




    //  
    BackupId *int `required:"true"`

    //  
    DBId *string `required:"true"`

}


// DescribeUDBBinlogBackupURLResponse is response schema for DescribeUDBBinlogBackupURL action
type DescribeUDBBinlogBackupURLResponse struct {
	response.CommonBase


    //  
    BackupPath string 

}


// NewDescribeUDBBinlogBackupURLRequest will create request of DescribeUDBBinlogBackupURL action.
func (c *UDBClient) NewDescribeUDBBinlogBackupURLRequest() *DescribeUDBBinlogBackupURLRequest {
    req := &DescribeUDBBinlogBackupURLRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DescribeUDBBinlogBackupURL


*/
func (c *UDBClient) DescribeUDBBinlogBackupURL(req *DescribeUDBBinlogBackupURLRequest) (*DescribeUDBBinlogBackupURLResponse, error) {
	var err error
	var res DescribeUDBBinlogBackupURLResponse

	reqCopier := *req
    
    
    
    
    
	err = c.Client.InvokeAction("DescribeUDBBinlogBackupURL", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DescribeUDBInstanceRequest is request schema for DescribeUDBInstance action
type DescribeUDBInstanceRequest struct {
	request.CommonBase




    //  
    ClassType *string `required:"true"`

    //  
    DBId *string `required:"false"`

    //  
    IncludeSlaves *bool `required:"false"`

    //  
    IsInUDBC *bool `required:"false"`

    //  
    Limit *int `required:"true"`

    //  
    Offset *int `required:"true"`

    //  
    UDBCId *string `required:"false"`

}


// DescribeUDBInstanceResponse is response schema for DescribeUDBInstance action
type DescribeUDBInstanceResponse struct {
	response.CommonBase


    //  
    DataSet []UDBInstanceSet 

    //  
    TotalCount int 

}


// NewDescribeUDBInstanceRequest will create request of DescribeUDBInstance action.
func (c *UDBClient) NewDescribeUDBInstanceRequest() *DescribeUDBInstanceRequest {
    req := &DescribeUDBInstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DescribeUDBInstance


*/
func (c *UDBClient) DescribeUDBInstance(req *DescribeUDBInstanceRequest) (*DescribeUDBInstanceResponse, error) {
	var err error
	var res DescribeUDBInstanceResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("DescribeUDBInstance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DescribeUDBInstanceBackupStateRequest is request schema for DescribeUDBInstanceBackupState action
type DescribeUDBInstanceBackupStateRequest struct {
	request.CommonBase




    //  
    BackupId *int `required:"true"`

    //  
    BackupZone *string `required:"false"`

}


// DescribeUDBInstanceBackupStateResponse is response schema for DescribeUDBInstanceBackupState action
type DescribeUDBInstanceBackupStateResponse struct {
	response.CommonBase


    //  
    BackupEndTime int 

    //  
    BackupSize int 

    //  
    State string 

}


// NewDescribeUDBInstanceBackupStateRequest will create request of DescribeUDBInstanceBackupState action.
func (c *UDBClient) NewDescribeUDBInstanceBackupStateRequest() *DescribeUDBInstanceBackupStateRequest {
    req := &DescribeUDBInstanceBackupStateRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DescribeUDBInstanceBackupState


*/
func (c *UDBClient) DescribeUDBInstanceBackupState(req *DescribeUDBInstanceBackupStateRequest) (*DescribeUDBInstanceBackupStateResponse, error) {
	var err error
	var res DescribeUDBInstanceBackupStateResponse

	reqCopier := *req
    
    
    
    
    
	err = c.Client.InvokeAction("DescribeUDBInstanceBackupState", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DescribeUDBInstanceBackupURLRequest is request schema for DescribeUDBInstanceBackupURL action
type DescribeUDBInstanceBackupURLRequest struct {
	request.CommonBase




    //  
    BackupId *int `required:"true"`

    //  
    DBId *string `required:"true"`

}


// DescribeUDBInstanceBackupURLResponse is response schema for DescribeUDBInstanceBackupURL action
type DescribeUDBInstanceBackupURLResponse struct {
	response.CommonBase


    //  
    BackupPath string 

}


// NewDescribeUDBInstanceBackupURLRequest will create request of DescribeUDBInstanceBackupURL action.
func (c *UDBClient) NewDescribeUDBInstanceBackupURLRequest() *DescribeUDBInstanceBackupURLRequest {
    req := &DescribeUDBInstanceBackupURLRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DescribeUDBInstanceBackupURL


*/
func (c *UDBClient) DescribeUDBInstanceBackupURL(req *DescribeUDBInstanceBackupURLRequest) (*DescribeUDBInstanceBackupURLResponse, error) {
	var err error
	var res DescribeUDBInstanceBackupURLResponse

	reqCopier := *req
    
    
    
    
    
	err = c.Client.InvokeAction("DescribeUDBInstanceBackupURL", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DescribeUDBInstanceBinlogRequest is request schema for DescribeUDBInstanceBinlog action
type DescribeUDBInstanceBinlogRequest struct {
	request.CommonBase




    //  
    BeginTime *int `required:"true"`

    //  
    DBId *string `required:"true"`

    //  
    EndTime *int `required:"true"`

}


// DescribeUDBInstanceBinlogResponse is response schema for DescribeUDBInstanceBinlog action
type DescribeUDBInstanceBinlogResponse struct {
	response.CommonBase


    //  
    DataSet []UDBInstanceBinlogSet 

}


// NewDescribeUDBInstanceBinlogRequest will create request of DescribeUDBInstanceBinlog action.
func (c *UDBClient) NewDescribeUDBInstanceBinlogRequest() *DescribeUDBInstanceBinlogRequest {
    req := &DescribeUDBInstanceBinlogRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DescribeUDBInstanceBinlog


*/
func (c *UDBClient) DescribeUDBInstanceBinlog(req *DescribeUDBInstanceBinlogRequest) (*DescribeUDBInstanceBinlogResponse, error) {
	var err error
	var res DescribeUDBInstanceBinlogResponse

	reqCopier := *req
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("DescribeUDBInstanceBinlog", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DescribeUDBInstanceBinlogBackupStateRequest is request schema for DescribeUDBInstanceBinlogBackupState action
type DescribeUDBInstanceBinlogBackupStateRequest struct {
	request.CommonBase




    //  
    BackupId *int `required:"true"`

    //  
    BackupZone *string `required:"false"`

}


// DescribeUDBInstanceBinlogBackupStateResponse is response schema for DescribeUDBInstanceBinlogBackupState action
type DescribeUDBInstanceBinlogBackupStateResponse struct {
	response.CommonBase


    //  
    State string 

}


// NewDescribeUDBInstanceBinlogBackupStateRequest will create request of DescribeUDBInstanceBinlogBackupState action.
func (c *UDBClient) NewDescribeUDBInstanceBinlogBackupStateRequest() *DescribeUDBInstanceBinlogBackupStateRequest {
    req := &DescribeUDBInstanceBinlogBackupStateRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DescribeUDBInstanceBinlogBackupState


*/
func (c *UDBClient) DescribeUDBInstanceBinlogBackupState(req *DescribeUDBInstanceBinlogBackupStateRequest) (*DescribeUDBInstanceBinlogBackupStateResponse, error) {
	var err error
	var res DescribeUDBInstanceBinlogBackupStateResponse

	reqCopier := *req
    
    
    
    
    
	err = c.Client.InvokeAction("DescribeUDBInstanceBinlogBackupState", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DescribeUDBInstancePriceRequest is request schema for DescribeUDBInstancePrice action
type DescribeUDBInstancePriceRequest struct {
	request.CommonBase




    //  
    ChargeType *string `required:"false"`

    //  
    Count *int `required:"false"`

    //  
    DBTypeId *string `required:"false"`

    //  
    DiskSpace *int `required:"true"`

    //  
    InstanceMode *string `required:"false"`

    //  
    MemoryLimit *int `required:"true"`

    //  
    Quantity *int `required:"false"`

    //  
    SSDType *string `required:"false"`

    //  
    UseSSD *bool `required:"false"`

}


// DescribeUDBInstancePriceResponse is response schema for DescribeUDBInstancePrice action
type DescribeUDBInstancePriceResponse struct {
	response.CommonBase


    //  
    DataSet []UDBInstancePriceSet 

}


// NewDescribeUDBInstancePriceRequest will create request of DescribeUDBInstancePrice action.
func (c *UDBClient) NewDescribeUDBInstancePriceRequest() *DescribeUDBInstancePriceRequest {
    req := &DescribeUDBInstancePriceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DescribeUDBInstancePrice


*/
func (c *UDBClient) DescribeUDBInstancePrice(req *DescribeUDBInstancePriceRequest) (*DescribeUDBInstancePriceResponse, error) {
	var err error
	var res DescribeUDBInstancePriceResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("DescribeUDBInstancePrice", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DescribeUDBInstanceStateRequest is request schema for DescribeUDBInstanceState action
type DescribeUDBInstanceStateRequest struct {
	request.CommonBase




    //  
    DBId *string `required:"true"`

}


// DescribeUDBInstanceStateResponse is response schema for DescribeUDBInstanceState action
type DescribeUDBInstanceStateResponse struct {
	response.CommonBase


    //  
    State string 

}


// NewDescribeUDBInstanceStateRequest will create request of DescribeUDBInstanceState action.
func (c *UDBClient) NewDescribeUDBInstanceStateRequest() *DescribeUDBInstanceStateRequest {
    req := &DescribeUDBInstanceStateRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DescribeUDBInstanceState


*/
func (c *UDBClient) DescribeUDBInstanceState(req *DescribeUDBInstanceStateRequest) (*DescribeUDBInstanceStateResponse, error) {
	var err error
	var res DescribeUDBInstanceStateResponse

	reqCopier := *req
    
    
    
	err = c.Client.InvokeAction("DescribeUDBInstanceState", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DescribeUDBInstanceUpgradePriceRequest is request schema for DescribeUDBInstanceUpgradePrice action
type DescribeUDBInstanceUpgradePriceRequest struct {
	request.CommonBase




    //  
    DBId *string `required:"true"`

    //  
    DiskSpace *int `required:"true"`

    //  
    MemoryLimit *int `required:"true"`

    //  
    SSDType *string `required:"false"`

    //  
    UseSSD *bool `required:"false"`

}


// DescribeUDBInstanceUpgradePriceResponse is response schema for DescribeUDBInstanceUpgradePrice action
type DescribeUDBInstanceUpgradePriceResponse struct {
	response.CommonBase


    //  
    Price float64 

}


// NewDescribeUDBInstanceUpgradePriceRequest will create request of DescribeUDBInstanceUpgradePrice action.
func (c *UDBClient) NewDescribeUDBInstanceUpgradePriceRequest() *DescribeUDBInstanceUpgradePriceRequest {
    req := &DescribeUDBInstanceUpgradePriceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DescribeUDBInstanceUpgradePrice


*/
func (c *UDBClient) DescribeUDBInstanceUpgradePrice(req *DescribeUDBInstanceUpgradePriceRequest) (*DescribeUDBInstanceUpgradePriceResponse, error) {
	var err error
	var res DescribeUDBInstanceUpgradePriceResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("DescribeUDBInstanceUpgradePrice", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DescribeUDBLogBackupURLRequest is request schema for DescribeUDBLogBackupURL action
type DescribeUDBLogBackupURLRequest struct {
	request.CommonBase




    //  
    BackupId *int `required:"true"`

    //  
    DBId *string `required:"true"`

}


// DescribeUDBLogBackupURLResponse is response schema for DescribeUDBLogBackupURL action
type DescribeUDBLogBackupURLResponse struct {
	response.CommonBase


    //  
    BackupPath string 

}


// NewDescribeUDBLogBackupURLRequest will create request of DescribeUDBLogBackupURL action.
func (c *UDBClient) NewDescribeUDBLogBackupURLRequest() *DescribeUDBLogBackupURLRequest {
    req := &DescribeUDBLogBackupURLRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DescribeUDBLogBackupURL


*/
func (c *UDBClient) DescribeUDBLogBackupURL(req *DescribeUDBLogBackupURLRequest) (*DescribeUDBLogBackupURLResponse, error) {
	var err error
	var res DescribeUDBLogBackupURLResponse

	reqCopier := *req
    
    
    
    
    
	err = c.Client.InvokeAction("DescribeUDBLogBackupURL", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DescribeUDBLogPackageRequest is request schema for DescribeUDBLogPackage action
type DescribeUDBLogPackageRequest struct {
	request.CommonBase




    //  
    BeginTime *int `required:"false"`

    //  
    DBId *string `required:"false"`

    //  
    EndTime *int `required:"false"`

    //  
    Limit *int `required:"true"`

    //  
    Offset *int `required:"true"`

    //  
    Type *int `required:"false"`

    //  
    Types []int `required:"false"`

}


// DescribeUDBLogPackageResponse is response schema for DescribeUDBLogPackage action
type DescribeUDBLogPackageResponse struct {
	response.CommonBase


    //  
    DataSet []LogPackageDataSet 

    //  
    TotalCount int 

}


// NewDescribeUDBLogPackageRequest will create request of DescribeUDBLogPackage action.
func (c *UDBClient) NewDescribeUDBLogPackageRequest() *DescribeUDBLogPackageRequest {
    req := &DescribeUDBLogPackageRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DescribeUDBLogPackage


*/
func (c *UDBClient) DescribeUDBLogPackage(req *DescribeUDBLogPackageRequest) (*DescribeUDBLogPackageResponse, error) {
	var err error
	var res DescribeUDBLogPackageResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("DescribeUDBLogPackage", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DescribeUDBParamGroupRequest is request schema for DescribeUDBParamGroup action
type DescribeUDBParamGroupRequest struct {
	request.CommonBase




    //  
    ClassType *string `required:"false"`

    //  
    GroupId *int `required:"false"`

    //  
    IsInUDBC *bool `required:"false"`

    //  
    Limit *int `required:"true"`

    //  
    Offset *int `required:"true"`

    //  
    RegionFlag *bool `required:"false"`

}


// DescribeUDBParamGroupResponse is response schema for DescribeUDBParamGroup action
type DescribeUDBParamGroupResponse struct {
	response.CommonBase


    //  
    DataSet []UDBParamGroupSet 

    //  
    TotalCount int 

}


// NewDescribeUDBParamGroupRequest will create request of DescribeUDBParamGroup action.
func (c *UDBClient) NewDescribeUDBParamGroupRequest() *DescribeUDBParamGroupRequest {
    req := &DescribeUDBParamGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DescribeUDBParamGroup


*/
func (c *UDBClient) DescribeUDBParamGroup(req *DescribeUDBParamGroupRequest) (*DescribeUDBParamGroupResponse, error) {
	var err error
	var res DescribeUDBParamGroupResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("DescribeUDBParamGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DescribeUDBTypeRequest is request schema for DescribeUDBType action
type DescribeUDBTypeRequest struct {
	request.CommonBase




}


// DescribeUDBTypeResponse is response schema for DescribeUDBType action
type DescribeUDBTypeResponse struct {
	response.CommonBase


    //  
    DataSet []UDBTypeSet 

}


// NewDescribeUDBTypeRequest will create request of DescribeUDBType action.
func (c *UDBClient) NewDescribeUDBTypeRequest() *DescribeUDBTypeRequest {
    req := &DescribeUDBTypeRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DescribeUDBType


*/
func (c *UDBClient) DescribeUDBType(req *DescribeUDBTypeRequest) (*DescribeUDBTypeResponse, error) {
	var err error
	var res DescribeUDBTypeResponse

	reqCopier := *req
    
	err = c.Client.InvokeAction("DescribeUDBType", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// EditUDBBackupBlacklistRequest is request schema for EditUDBBackupBlacklist action
type EditUDBBackupBlacklistRequest struct {
	request.CommonBase




    //  
    Blacklist *string `required:"true"`

    //  
    DBId *string `required:"true"`

}


// EditUDBBackupBlacklistResponse is response schema for EditUDBBackupBlacklist action
type EditUDBBackupBlacklistResponse struct {
	response.CommonBase


}


// NewEditUDBBackupBlacklistRequest will create request of EditUDBBackupBlacklist action.
func (c *UDBClient) NewEditUDBBackupBlacklistRequest() *EditUDBBackupBlacklistRequest {
    req := &EditUDBBackupBlacklistRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: EditUDBBackupBlacklist


*/
func (c *UDBClient) EditUDBBackupBlacklist(req *EditUDBBackupBlacklistRequest) (*EditUDBBackupBlacklistResponse, error) {
	var err error
	var res EditUDBBackupBlacklistResponse

	reqCopier := *req
    
    
    
    
    
	err = c.Client.InvokeAction("EditUDBBackupBlacklist", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// FetchUDBInstanceEarliestRecoverTimeRequest is request schema for FetchUDBInstanceEarliestRecoverTime action
type FetchUDBInstanceEarliestRecoverTimeRequest struct {
	request.CommonBase




    //  
    DBId *string `required:"true"`

}


// FetchUDBInstanceEarliestRecoverTimeResponse is response schema for FetchUDBInstanceEarliestRecoverTime action
type FetchUDBInstanceEarliestRecoverTimeResponse struct {
	response.CommonBase


    //  
    EarliestTime int 

}


// NewFetchUDBInstanceEarliestRecoverTimeRequest will create request of FetchUDBInstanceEarliestRecoverTime action.
func (c *UDBClient) NewFetchUDBInstanceEarliestRecoverTimeRequest() *FetchUDBInstanceEarliestRecoverTimeRequest {
    req := &FetchUDBInstanceEarliestRecoverTimeRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: FetchUDBInstanceEarliestRecoverTime


*/
func (c *UDBClient) FetchUDBInstanceEarliestRecoverTime(req *FetchUDBInstanceEarliestRecoverTimeRequest) (*FetchUDBInstanceEarliestRecoverTimeResponse, error) {
	var err error
	var res FetchUDBInstanceEarliestRecoverTimeResponse

	reqCopier := *req
    
    
    
	err = c.Client.InvokeAction("FetchUDBInstanceEarliestRecoverTime", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// ModifyUDBInstanceNameRequest is request schema for ModifyUDBInstanceName action
type ModifyUDBInstanceNameRequest struct {
	request.CommonBase




    //  
    DBId *string `required:"true"`

    //  
    Name *string `required:"true"`

}


// ModifyUDBInstanceNameResponse is response schema for ModifyUDBInstanceName action
type ModifyUDBInstanceNameResponse struct {
	response.CommonBase


}


// NewModifyUDBInstanceNameRequest will create request of ModifyUDBInstanceName action.
func (c *UDBClient) NewModifyUDBInstanceNameRequest() *ModifyUDBInstanceNameRequest {
    req := &ModifyUDBInstanceNameRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: ModifyUDBInstanceName


*/
func (c *UDBClient) ModifyUDBInstanceName(req *ModifyUDBInstanceNameRequest) (*ModifyUDBInstanceNameResponse, error) {
	var err error
	var res ModifyUDBInstanceNameResponse

	reqCopier := *req
    
    
    
    
    
	err = c.Client.InvokeAction("ModifyUDBInstanceName", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// ModifyUDBInstancePasswordRequest is request schema for ModifyUDBInstancePassword action
type ModifyUDBInstancePasswordRequest struct {
	request.CommonBase




    //  
    AccountName *string `required:"false"`

    //  
    DBId *string `required:"true"`

    //  
    Password *string `required:"true"`

}


// ModifyUDBInstancePasswordResponse is response schema for ModifyUDBInstancePassword action
type ModifyUDBInstancePasswordResponse struct {
	response.CommonBase


}


// NewModifyUDBInstancePasswordRequest will create request of ModifyUDBInstancePassword action.
func (c *UDBClient) NewModifyUDBInstancePasswordRequest() *ModifyUDBInstancePasswordRequest {
    req := &ModifyUDBInstancePasswordRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: ModifyUDBInstancePassword


*/
func (c *UDBClient) ModifyUDBInstancePassword(req *ModifyUDBInstancePasswordRequest) (*ModifyUDBInstancePasswordResponse, error) {
	var err error
	var res ModifyUDBInstancePasswordResponse

	reqCopier := *req
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("ModifyUDBInstancePassword", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// PromoteUDBInstanceToHARequest is request schema for PromoteUDBInstanceToHA action
type PromoteUDBInstanceToHARequest struct {
	request.CommonBase




    //  
    DBId *string `required:"true"`

    //  
    IsLock *bool `required:"false"`

}


// PromoteUDBInstanceToHAResponse is response schema for PromoteUDBInstanceToHA action
type PromoteUDBInstanceToHAResponse struct {
	response.CommonBase


}


// NewPromoteUDBInstanceToHARequest will create request of PromoteUDBInstanceToHA action.
func (c *UDBClient) NewPromoteUDBInstanceToHARequest() *PromoteUDBInstanceToHARequest {
    req := &PromoteUDBInstanceToHARequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: PromoteUDBInstanceToHA


*/
func (c *UDBClient) PromoteUDBInstanceToHA(req *PromoteUDBInstanceToHARequest) (*PromoteUDBInstanceToHAResponse, error) {
	var err error
	var res PromoteUDBInstanceToHAResponse

	reqCopier := *req
    
    
    
    
    
	err = c.Client.InvokeAction("PromoteUDBInstanceToHA", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// PromoteUDBSlaveRequest is request schema for PromoteUDBSlave action
type PromoteUDBSlaveRequest struct {
	request.CommonBase




    //  
    DBId *string `required:"true"`

    //  
    IsForce *bool `required:"false"`

}


// PromoteUDBSlaveResponse is response schema for PromoteUDBSlave action
type PromoteUDBSlaveResponse struct {
	response.CommonBase


}


// NewPromoteUDBSlaveRequest will create request of PromoteUDBSlave action.
func (c *UDBClient) NewPromoteUDBSlaveRequest() *PromoteUDBSlaveRequest {
    req := &PromoteUDBSlaveRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: PromoteUDBSlave


*/
func (c *UDBClient) PromoteUDBSlave(req *PromoteUDBSlaveRequest) (*PromoteUDBSlaveResponse, error) {
	var err error
	var res PromoteUDBSlaveResponse

	reqCopier := *req
    
    
    
    
    
	err = c.Client.InvokeAction("PromoteUDBSlave", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// ResizeUDBInstanceRequest is request schema for ResizeUDBInstance action
type ResizeUDBInstanceRequest struct {
	request.CommonBase




    //  
    CouponId *string `required:"false"`

    //  
    DBId *string `required:"true"`

    //  
    DiskSpace *int `required:"true"`

    //  
    InstanceMode *string `required:"false"`

    //  
    InstanceType *string `required:"false"`

    //  
    MemoryLimit *int `required:"true"`

    //  
    SSDType *string `required:"false"`

    //  
    StartAfterUpgrade *bool `required:"false"`

    //  
    UDBCId *string `required:"false"`

    //  
    UseSSD *bool `required:"false"`

}


// ResizeUDBInstanceResponse is response schema for ResizeUDBInstance action
type ResizeUDBInstanceResponse struct {
	response.CommonBase


}


// NewResizeUDBInstanceRequest will create request of ResizeUDBInstance action.
func (c *UDBClient) NewResizeUDBInstanceRequest() *ResizeUDBInstanceRequest {
    req := &ResizeUDBInstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: ResizeUDBInstance


*/
func (c *UDBClient) ResizeUDBInstance(req *ResizeUDBInstanceRequest) (*ResizeUDBInstanceResponse, error) {
	var err error
	var res ResizeUDBInstanceResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("ResizeUDBInstance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// RestartUDBInstanceRequest is request schema for RestartUDBInstance action
type RestartUDBInstanceRequest struct {
	request.CommonBase




    //  
    DBId *string `required:"true"`

}


// RestartUDBInstanceResponse is response schema for RestartUDBInstance action
type RestartUDBInstanceResponse struct {
	response.CommonBase


}


// NewRestartUDBInstanceRequest will create request of RestartUDBInstance action.
func (c *UDBClient) NewRestartUDBInstanceRequest() *RestartUDBInstanceRequest {
    req := &RestartUDBInstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: RestartUDBInstance


*/
func (c *UDBClient) RestartUDBInstance(req *RestartUDBInstanceRequest) (*RestartUDBInstanceResponse, error) {
	var err error
	var res RestartUDBInstanceResponse

	reqCopier := *req
    
    
    
	err = c.Client.InvokeAction("RestartUDBInstance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// StartUDBInstanceRequest is request schema for StartUDBInstance action
type StartUDBInstanceRequest struct {
	request.CommonBase




    //  
    DBId *string `required:"true"`

}


// StartUDBInstanceResponse is response schema for StartUDBInstance action
type StartUDBInstanceResponse struct {
	response.CommonBase


}


// NewStartUDBInstanceRequest will create request of StartUDBInstance action.
func (c *UDBClient) NewStartUDBInstanceRequest() *StartUDBInstanceRequest {
    req := &StartUDBInstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: StartUDBInstance


*/
func (c *UDBClient) StartUDBInstance(req *StartUDBInstanceRequest) (*StartUDBInstanceResponse, error) {
	var err error
	var res StartUDBInstanceResponse

	reqCopier := *req
    
    
    
	err = c.Client.InvokeAction("StartUDBInstance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// StopUDBInstanceRequest is request schema for StopUDBInstance action
type StopUDBInstanceRequest struct {
	request.CommonBase




    //  
    DBId *string `required:"true"`

    //  
    ForceToKill *bool `required:"false"`

}


// StopUDBInstanceResponse is response schema for StopUDBInstance action
type StopUDBInstanceResponse struct {
	response.CommonBase


}


// NewStopUDBInstanceRequest will create request of StopUDBInstance action.
func (c *UDBClient) NewStopUDBInstanceRequest() *StopUDBInstanceRequest {
    req := &StopUDBInstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: StopUDBInstance


*/
func (c *UDBClient) StopUDBInstance(req *StopUDBInstanceRequest) (*StopUDBInstanceResponse, error) {
	var err error
	var res StopUDBInstanceResponse

	reqCopier := *req
    
    
    
    
    
	err = c.Client.InvokeAction("StopUDBInstance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// SwitchUDBInstanceToHARequest is request schema for SwitchUDBInstanceToHA action
type SwitchUDBInstanceToHARequest struct {
	request.CommonBase




    //  
    ChargeType *string `required:"false"`

    //  
    DBId *string `required:"true"`

    //  
    Quantity *string `required:"false"`

    //  
    Tag *string `required:"false"`

}


// SwitchUDBInstanceToHAResponse is response schema for SwitchUDBInstanceToHA action
type SwitchUDBInstanceToHAResponse struct {
	response.CommonBase


    //  
    DBId string 

}


// NewSwitchUDBInstanceToHARequest will create request of SwitchUDBInstanceToHA action.
func (c *UDBClient) NewSwitchUDBInstanceToHARequest() *SwitchUDBInstanceToHARequest {
    req := &SwitchUDBInstanceToHARequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: SwitchUDBInstanceToHA


*/
func (c *UDBClient) SwitchUDBInstanceToHA(req *SwitchUDBInstanceToHARequest) (*SwitchUDBInstanceToHAResponse, error) {
	var err error
	var res SwitchUDBInstanceToHAResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("SwitchUDBInstanceToHA", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// UpdateUDBInstanceBackupStrategyRequest is request schema for UpdateUDBInstanceBackupStrategy action
type UpdateUDBInstanceBackupStrategyRequest struct {
	request.CommonBase




    //  
    BackupDate *string `required:"false"`

    //  
    BackupTime *int `required:"false"`

    //  
    DBId *string `required:"true"`

    //  
    ForceDump *bool `required:"false"`

}


// UpdateUDBInstanceBackupStrategyResponse is response schema for UpdateUDBInstanceBackupStrategy action
type UpdateUDBInstanceBackupStrategyResponse struct {
	response.CommonBase


}


// NewUpdateUDBInstanceBackupStrategyRequest will create request of UpdateUDBInstanceBackupStrategy action.
func (c *UDBClient) NewUpdateUDBInstanceBackupStrategyRequest() *UpdateUDBInstanceBackupStrategyRequest {
    req := &UpdateUDBInstanceBackupStrategyRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: UpdateUDBInstanceBackupStrategy


*/
func (c *UDBClient) UpdateUDBInstanceBackupStrategy(req *UpdateUDBInstanceBackupStrategyRequest) (*UpdateUDBInstanceBackupStrategyResponse, error) {
	var err error
	var res UpdateUDBInstanceBackupStrategyResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("UpdateUDBInstanceBackupStrategy", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// UpdateUDBInstanceSlaveBackupSwitchRequest is request schema for UpdateUDBInstanceSlaveBackupSwitch action
type UpdateUDBInstanceSlaveBackupSwitchRequest struct {
	request.CommonBase




    //  
    BackupSwitch *int `required:"true"`

    //  
    MasterDBId *string `required:"true"`

    //  
    SlaveDBId *string `required:"false"`

}


// UpdateUDBInstanceSlaveBackupSwitchResponse is response schema for UpdateUDBInstanceSlaveBackupSwitch action
type UpdateUDBInstanceSlaveBackupSwitchResponse struct {
	response.CommonBase


}


// NewUpdateUDBInstanceSlaveBackupSwitchRequest will create request of UpdateUDBInstanceSlaveBackupSwitch action.
func (c *UDBClient) NewUpdateUDBInstanceSlaveBackupSwitchRequest() *UpdateUDBInstanceSlaveBackupSwitchRequest {
    req := &UpdateUDBInstanceSlaveBackupSwitchRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: UpdateUDBInstanceSlaveBackupSwitch


*/
func (c *UDBClient) UpdateUDBInstanceSlaveBackupSwitch(req *UpdateUDBInstanceSlaveBackupSwitchRequest) (*UpdateUDBInstanceSlaveBackupSwitchResponse, error) {
	var err error
	var res UpdateUDBInstanceSlaveBackupSwitchResponse

	reqCopier := *req
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("UpdateUDBInstanceSlaveBackupSwitch", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// UpdateUDBParamGroupRequest is request schema for UpdateUDBParamGroup action
type UpdateUDBParamGroupRequest struct {
	request.CommonBase




    //  
    GroupId *int `required:"true"`

    //  
    Key *string `required:"true"`

    //  
    RegionFlag *bool `required:"false"`

    //  
    Value *string `required:"true"`

}


// UpdateUDBParamGroupResponse is response schema for UpdateUDBParamGroup action
type UpdateUDBParamGroupResponse struct {
	response.CommonBase


}


// NewUpdateUDBParamGroupRequest will create request of UpdateUDBParamGroup action.
func (c *UDBClient) NewUpdateUDBParamGroupRequest() *UpdateUDBParamGroupRequest {
    req := &UpdateUDBParamGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: UpdateUDBParamGroup


*/
func (c *UDBClient) UpdateUDBParamGroup(req *UpdateUDBParamGroupRequest) (*UpdateUDBParamGroupResponse, error) {
	var err error
	var res UpdateUDBParamGroupResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("UpdateUDBParamGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// UploadUDBParamGroupRequest is request schema for UploadUDBParamGroup action
type UploadUDBParamGroupRequest struct {
	request.CommonBase




    //  
    Content *string `required:"true"`

    //  
    DBTypeId *string `required:"true"`

    //  
    Description *string `required:"true"`

    //  
    GroupName *string `required:"true"`

    //  
    ParamGroupTypeId *int `required:"false"`

    //  
    RegionFlag *bool `required:"false"`

}


// UploadUDBParamGroupResponse is response schema for UploadUDBParamGroup action
type UploadUDBParamGroupResponse struct {
	response.CommonBase


    //  
    GroupId int 

}


// NewUploadUDBParamGroupRequest will create request of UploadUDBParamGroup action.
func (c *UDBClient) NewUploadUDBParamGroupRequest() *UploadUDBParamGroupRequest {
    req := &UploadUDBParamGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: UploadUDBParamGroup


*/
func (c *UDBClient) UploadUDBParamGroup(req *UploadUDBParamGroupRequest) (*UploadUDBParamGroupResponse, error) {
	var err error
	var res UploadUDBParamGroupResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("UploadUDBParamGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}


