// Code is generated by ucloud-model, DO NOT EDIT IT.




package umem

import (
	"github.com/ucloud/ucloud-sdk-go/ucloud/request"
	"github.com/ucloud/ucloud-sdk-go/ucloud/response"
)

// UMem API Schema
















// CreateUMemSpaceRequest is request schema for CreateUMemSpace action
type CreateUMemSpaceRequest struct {
	request.CommonBase




    //  
    ChargeType *string `required:"false"`

    //  
    CouponId *string `required:"false"`

    //  
    Name *string `required:"true"`

    //  
    Password *string `required:"false"`

    //  
    Protocol *string `required:"false"`

    //  
    Quantity *int `required:"false"`

    //  
    Size *int `required:"true"`

    //  
    SubnetId *string `required:"false"`

    //  
    Tag *string `required:"false"`

    //  
    Type *string `required:"false"`

    //  
    VPCId *string `required:"false"`

}


// CreateUMemSpaceResponse is response schema for CreateUMemSpace action
type CreateUMemSpaceResponse struct {
	response.CommonBase


    //  
    SpaceId string 

}


// NewCreateUMemSpaceRequest will create request of CreateUMemSpace action.
func (c *UMemClient) NewCreateUMemSpaceRequest() *CreateUMemSpaceRequest {
    req := &CreateUMemSpaceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: CreateUMemSpace


*/
func (c *UMemClient) CreateUMemSpace(req *CreateUMemSpaceRequest) (*CreateUMemSpaceResponse, error) {
	var err error
	var res CreateUMemSpaceResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("CreateUMemSpace", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// CreateUMemcacheGroupRequest is request schema for CreateUMemcacheGroup action
type CreateUMemcacheGroupRequest struct {
	request.CommonBase




    //  
    ChargeType *string `required:"false"`

    //  
    ConfigId *string `required:"false"`

    //  
    CouponId *string `required:"false"`

    //  
    Name *string `required:"true"`

    //  
    Protocol *string `required:"false"`

    //  
    Quantity *int `required:"false"`

    //  
    Size *int `required:"false"`

    //  
    SubnetId *string `required:"false"`

    //  
    Tag *string `required:"false"`

    //  
    VPCId *string `required:"false"`

    //  
    Version *string `required:"false"`

}


// CreateUMemcacheGroupResponse is response schema for CreateUMemcacheGroup action
type CreateUMemcacheGroupResponse struct {
	response.CommonBase


    //  
    GroupId string 

}


// NewCreateUMemcacheGroupRequest will create request of CreateUMemcacheGroup action.
func (c *UMemClient) NewCreateUMemcacheGroupRequest() *CreateUMemcacheGroupRequest {
    req := &CreateUMemcacheGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: CreateUMemcacheGroup


*/
func (c *UMemClient) CreateUMemcacheGroup(req *CreateUMemcacheGroupRequest) (*CreateUMemcacheGroupResponse, error) {
	var err error
	var res CreateUMemcacheGroupResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("CreateUMemcacheGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// CreateURedisGroupRequest is request schema for CreateURedisGroup action
type CreateURedisGroupRequest struct {
	request.CommonBase




    //  
    AutoBackup *string `required:"false"`

    //  
    BackupId *string `required:"false"`

    //  
    BackupTime *int `required:"false"`

    //  
    ChargeType *string `required:"false"`

    //  
    ConfigId *string `required:"false"`

    //  
    CouponId *string `required:"false"`

    //  
    HighAvailability *string `required:"true"`

    //  
    MasterGroupId *string `required:"false"`

    //  
    Name *string `required:"true"`

    //  
    Password *string `required:"false"`

    //  
    Quantity *int `required:"false"`

    //  
    Size *int `required:"false"`

    //  
    SlaveZone *string `required:"false"`

    //  
    SubnetId *string `required:"false"`

    //  
    Tag *string `required:"false"`

    //  
    VPCId *string `required:"false"`

    //  
    Version *string `required:"false"`

}


// CreateURedisGroupResponse is response schema for CreateURedisGroup action
type CreateURedisGroupResponse struct {
	response.CommonBase


    //  
    GroupId string 

}


// NewCreateURedisGroupRequest will create request of CreateURedisGroup action.
func (c *UMemClient) NewCreateURedisGroupRequest() *CreateURedisGroupRequest {
    req := &CreateURedisGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: CreateURedisGroup


*/
func (c *UMemClient) CreateURedisGroup(req *CreateURedisGroupRequest) (*CreateURedisGroupResponse, error) {
	var err error
	var res CreateURedisGroupResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("CreateURedisGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DeleteUMemSpaceRequest is request schema for DeleteUMemSpace action
type DeleteUMemSpaceRequest struct {
	request.CommonBase




    //  
    SpaceId *string `required:"true"`

}


// DeleteUMemSpaceResponse is response schema for DeleteUMemSpace action
type DeleteUMemSpaceResponse struct {
	response.CommonBase


}


// NewDeleteUMemSpaceRequest will create request of DeleteUMemSpace action.
func (c *UMemClient) NewDeleteUMemSpaceRequest() *DeleteUMemSpaceRequest {
    req := &DeleteUMemSpaceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DeleteUMemSpace


*/
func (c *UMemClient) DeleteUMemSpace(req *DeleteUMemSpaceRequest) (*DeleteUMemSpaceResponse, error) {
	var err error
	var res DeleteUMemSpaceResponse

	reqCopier := *req
    
    
    
	err = c.Client.InvokeAction("DeleteUMemSpace", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DeleteUMemcacheGroupRequest is request schema for DeleteUMemcacheGroup action
type DeleteUMemcacheGroupRequest struct {
	request.CommonBase




    //  
    GroupId *string `required:"true"`

}


// DeleteUMemcacheGroupResponse is response schema for DeleteUMemcacheGroup action
type DeleteUMemcacheGroupResponse struct {
	response.CommonBase


}


// NewDeleteUMemcacheGroupRequest will create request of DeleteUMemcacheGroup action.
func (c *UMemClient) NewDeleteUMemcacheGroupRequest() *DeleteUMemcacheGroupRequest {
    req := &DeleteUMemcacheGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DeleteUMemcacheGroup


*/
func (c *UMemClient) DeleteUMemcacheGroup(req *DeleteUMemcacheGroupRequest) (*DeleteUMemcacheGroupResponse, error) {
	var err error
	var res DeleteUMemcacheGroupResponse

	reqCopier := *req
    
    
    
	err = c.Client.InvokeAction("DeleteUMemcacheGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DeleteURedisGroupRequest is request schema for DeleteURedisGroup action
type DeleteURedisGroupRequest struct {
	request.CommonBase




    //  
    GroupId *string `required:"true"`

}


// DeleteURedisGroupResponse is response schema for DeleteURedisGroup action
type DeleteURedisGroupResponse struct {
	response.CommonBase


}


// NewDeleteURedisGroupRequest will create request of DeleteURedisGroup action.
func (c *UMemClient) NewDeleteURedisGroupRequest() *DeleteURedisGroupRequest {
    req := &DeleteURedisGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DeleteURedisGroup


*/
func (c *UMemClient) DeleteURedisGroup(req *DeleteURedisGroupRequest) (*DeleteURedisGroupResponse, error) {
	var err error
	var res DeleteURedisGroupResponse

	reqCopier := *req
    
    
    
	err = c.Client.InvokeAction("DeleteURedisGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DescribeUMemPriceRequest is request schema for DescribeUMemPrice action
type DescribeUMemPriceRequest struct {
	request.CommonBase




    //  
    ChargeType *string `required:"false"`

    //  
    Quantity *int `required:"false"`

    //  
    RegionFlag *bool `required:"false"`

    //  
    Size *int `required:"true"`

    //  
    Type *string `required:"false"`

}


// DescribeUMemPriceResponse is response schema for DescribeUMemPrice action
type DescribeUMemPriceResponse struct {
	response.CommonBase


    //  
    DataSet []UMemPriceSet 

}


// NewDescribeUMemPriceRequest will create request of DescribeUMemPrice action.
func (c *UMemClient) NewDescribeUMemPriceRequest() *DescribeUMemPriceRequest {
    req := &DescribeUMemPriceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DescribeUMemPrice


*/
func (c *UMemClient) DescribeUMemPrice(req *DescribeUMemPriceRequest) (*DescribeUMemPriceResponse, error) {
	var err error
	var res DescribeUMemPriceResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("DescribeUMemPrice", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DescribeUMemSpaceRequest is request schema for DescribeUMemSpace action
type DescribeUMemSpaceRequest struct {
	request.CommonBase




    //  
    Limit *int `required:"false"`

    //  
    Offset *int `required:"false"`

    //  
    SpaceId *string `required:"false"`

}


// DescribeUMemSpaceResponse is response schema for DescribeUMemSpace action
type DescribeUMemSpaceResponse struct {
	response.CommonBase


    //  
    DataSet []UMemSpaceSet 

    //  
    TotalCount int 

}


// NewDescribeUMemSpaceRequest will create request of DescribeUMemSpace action.
func (c *UMemClient) NewDescribeUMemSpaceRequest() *DescribeUMemSpaceRequest {
    req := &DescribeUMemSpaceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DescribeUMemSpace


*/
func (c *UMemClient) DescribeUMemSpace(req *DescribeUMemSpaceRequest) (*DescribeUMemSpaceResponse, error) {
	var err error
	var res DescribeUMemSpaceResponse

	reqCopier := *req
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("DescribeUMemSpace", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DescribeUMemUpgradePriceRequest is request schema for DescribeUMemUpgradePrice action
type DescribeUMemUpgradePriceRequest struct {
	request.CommonBase




    //  
    Size *int `required:"true"`

    //  
    SpaceId *string `required:"true"`

    //  
    Type *string `required:"true"`

}


// DescribeUMemUpgradePriceResponse is response schema for DescribeUMemUpgradePrice action
type DescribeUMemUpgradePriceResponse struct {
	response.CommonBase


    //  
    Price float64 

}


// NewDescribeUMemUpgradePriceRequest will create request of DescribeUMemUpgradePrice action.
func (c *UMemClient) NewDescribeUMemUpgradePriceRequest() *DescribeUMemUpgradePriceRequest {
    req := &DescribeUMemUpgradePriceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DescribeUMemUpgradePrice


*/
func (c *UMemClient) DescribeUMemUpgradePrice(req *DescribeUMemUpgradePriceRequest) (*DescribeUMemUpgradePriceResponse, error) {
	var err error
	var res DescribeUMemUpgradePriceResponse

	reqCopier := *req
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("DescribeUMemUpgradePrice", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DescribeUMemcacheGroupRequest is request schema for DescribeUMemcacheGroup action
type DescribeUMemcacheGroupRequest struct {
	request.CommonBase




    //  
    GroupId *string `required:"false"`

    //  
    Limit *int `required:"false"`

    //  
    Offset *int `required:"false"`

}


// DescribeUMemcacheGroupResponse is response schema for DescribeUMemcacheGroup action
type DescribeUMemcacheGroupResponse struct {
	response.CommonBase


    //  
    DataSet []UMemcacheGroupSet 

    //  
    TotalCount int 

}


// NewDescribeUMemcacheGroupRequest will create request of DescribeUMemcacheGroup action.
func (c *UMemClient) NewDescribeUMemcacheGroupRequest() *DescribeUMemcacheGroupRequest {
    req := &DescribeUMemcacheGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DescribeUMemcacheGroup


*/
func (c *UMemClient) DescribeUMemcacheGroup(req *DescribeUMemcacheGroupRequest) (*DescribeUMemcacheGroupResponse, error) {
	var err error
	var res DescribeUMemcacheGroupResponse

	reqCopier := *req
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("DescribeUMemcacheGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DescribeUMemcachePriceRequest is request schema for DescribeUMemcachePrice action
type DescribeUMemcachePriceRequest struct {
	request.CommonBase




    //  
    ChargeType *string `required:"false"`

    //  
    Quantity *int `required:"false"`

    //  
    Size *int `required:"true"`

    //  
    Type *string `required:"false"`

}


// DescribeUMemcachePriceResponse is response schema for DescribeUMemcachePrice action
type DescribeUMemcachePriceResponse struct {
	response.CommonBase


    //  
    DataSet []UMemcachePriceSet 

}


// NewDescribeUMemcachePriceRequest will create request of DescribeUMemcachePrice action.
func (c *UMemClient) NewDescribeUMemcachePriceRequest() *DescribeUMemcachePriceRequest {
    req := &DescribeUMemcachePriceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DescribeUMemcachePrice


*/
func (c *UMemClient) DescribeUMemcachePrice(req *DescribeUMemcachePriceRequest) (*DescribeUMemcachePriceResponse, error) {
	var err error
	var res DescribeUMemcachePriceResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("DescribeUMemcachePrice", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DescribeUMemcacheUpgradePriceRequest is request schema for DescribeUMemcacheUpgradePrice action
type DescribeUMemcacheUpgradePriceRequest struct {
	request.CommonBase




    //  
    GroupId *string `required:"true"`

    //  
    Size *int `required:"true"`

}


// DescribeUMemcacheUpgradePriceResponse is response schema for DescribeUMemcacheUpgradePrice action
type DescribeUMemcacheUpgradePriceResponse struct {
	response.CommonBase


    //  
    Price float64 

}


// NewDescribeUMemcacheUpgradePriceRequest will create request of DescribeUMemcacheUpgradePrice action.
func (c *UMemClient) NewDescribeUMemcacheUpgradePriceRequest() *DescribeUMemcacheUpgradePriceRequest {
    req := &DescribeUMemcacheUpgradePriceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DescribeUMemcacheUpgradePrice


*/
func (c *UMemClient) DescribeUMemcacheUpgradePrice(req *DescribeUMemcacheUpgradePriceRequest) (*DescribeUMemcacheUpgradePriceResponse, error) {
	var err error
	var res DescribeUMemcacheUpgradePriceResponse

	reqCopier := *req
    
    
    
    
    
	err = c.Client.InvokeAction("DescribeUMemcacheUpgradePrice", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DescribeURedisBackupRequest is request schema for DescribeURedisBackup action
type DescribeURedisBackupRequest struct {
	request.CommonBase




    //  
    GroupId *string `required:"false"`

    //  
    Limit *int `required:"false"`

    //  
    Offset *int `required:"false"`

}


// DescribeURedisBackupResponse is response schema for DescribeURedisBackup action
type DescribeURedisBackupResponse struct {
	response.CommonBase


    //  
    DataSet []URedisBackupSet 

    //  
    TotalCount int 

}


// NewDescribeURedisBackupRequest will create request of DescribeURedisBackup action.
func (c *UMemClient) NewDescribeURedisBackupRequest() *DescribeURedisBackupRequest {
    req := &DescribeURedisBackupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DescribeURedisBackup


*/
func (c *UMemClient) DescribeURedisBackup(req *DescribeURedisBackupRequest) (*DescribeURedisBackupResponse, error) {
	var err error
	var res DescribeURedisBackupResponse

	reqCopier := *req
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("DescribeURedisBackup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DescribeURedisBackupURLRequest is request schema for DescribeURedisBackupURL action
type DescribeURedisBackupURLRequest struct {
	request.CommonBase




    //  
    BackupId *string `required:"true"`

    //  
    GroupId *string `required:"true"`

    //  
    RegionFlag *bool `required:"false"`

}


// DescribeURedisBackupURLResponse is response schema for DescribeURedisBackupURL action
type DescribeURedisBackupURLResponse struct {
	response.CommonBase


    //  
    BackupURL string 

}


// NewDescribeURedisBackupURLRequest will create request of DescribeURedisBackupURL action.
func (c *UMemClient) NewDescribeURedisBackupURLRequest() *DescribeURedisBackupURLRequest {
    req := &DescribeURedisBackupURLRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DescribeURedisBackupURL


*/
func (c *UMemClient) DescribeURedisBackupURL(req *DescribeURedisBackupURLRequest) (*DescribeURedisBackupURLResponse, error) {
	var err error
	var res DescribeURedisBackupURLResponse

	reqCopier := *req
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("DescribeURedisBackupURL", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DescribeURedisGroupRequest is request schema for DescribeURedisGroup action
type DescribeURedisGroupRequest struct {
	request.CommonBase




    //  
    GroupId *string `required:"false"`

    //  
    Limit *int `required:"false"`

    //  
    Offset *int `required:"false"`

}


// DescribeURedisGroupResponse is response schema for DescribeURedisGroup action
type DescribeURedisGroupResponse struct {
	response.CommonBase


    //  
    DataSet []URedisGroupSet 

    //  
    TotalCount int 

}


// NewDescribeURedisGroupRequest will create request of DescribeURedisGroup action.
func (c *UMemClient) NewDescribeURedisGroupRequest() *DescribeURedisGroupRequest {
    req := &DescribeURedisGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DescribeURedisGroup


*/
func (c *UMemClient) DescribeURedisGroup(req *DescribeURedisGroupRequest) (*DescribeURedisGroupResponse, error) {
	var err error
	var res DescribeURedisGroupResponse

	reqCopier := *req
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("DescribeURedisGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DescribeURedisPriceRequest is request schema for DescribeURedisPrice action
type DescribeURedisPriceRequest struct {
	request.CommonBase




    //  
    ChargeType *string `required:"false"`

    //  
    ProductType *string `required:"false"`

    //  
    Quantity *int `required:"false"`

    //  
    RegionFlag *bool `required:"false"`

    //  
    Size *int `required:"true"`

    //  
    Type *string `required:"false"`

}


// DescribeURedisPriceResponse is response schema for DescribeURedisPrice action
type DescribeURedisPriceResponse struct {
	response.CommonBase


    //  
    DataSet []URedisPriceSet 

}


// NewDescribeURedisPriceRequest will create request of DescribeURedisPrice action.
func (c *UMemClient) NewDescribeURedisPriceRequest() *DescribeURedisPriceRequest {
    req := &DescribeURedisPriceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DescribeURedisPrice


*/
func (c *UMemClient) DescribeURedisPrice(req *DescribeURedisPriceRequest) (*DescribeURedisPriceResponse, error) {
	var err error
	var res DescribeURedisPriceResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("DescribeURedisPrice", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DescribeURedisUpgradePriceRequest is request schema for DescribeURedisUpgradePrice action
type DescribeURedisUpgradePriceRequest struct {
	request.CommonBase




    //  
    GroupId *string `required:"true"`

    //  
    Size *int `required:"true"`

    //  
    Type *string `required:"false"`

}


// DescribeURedisUpgradePriceResponse is response schema for DescribeURedisUpgradePrice action
type DescribeURedisUpgradePriceResponse struct {
	response.CommonBase


    //  
    Price float64 

}


// NewDescribeURedisUpgradePriceRequest will create request of DescribeURedisUpgradePrice action.
func (c *UMemClient) NewDescribeURedisUpgradePriceRequest() *DescribeURedisUpgradePriceRequest {
    req := &DescribeURedisUpgradePriceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DescribeURedisUpgradePrice


*/
func (c *UMemClient) DescribeURedisUpgradePrice(req *DescribeURedisUpgradePriceRequest) (*DescribeURedisUpgradePriceResponse, error) {
	var err error
	var res DescribeURedisUpgradePriceResponse

	reqCopier := *req
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("DescribeURedisUpgradePrice", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// GetUMemSpaceStateRequest is request schema for GetUMemSpaceState action
type GetUMemSpaceStateRequest struct {
	request.CommonBase




    //  
    SpaceId *string `required:"true"`

}


// GetUMemSpaceStateResponse is response schema for GetUMemSpaceState action
type GetUMemSpaceStateResponse struct {
	response.CommonBase


    //  
    State string 

}


// NewGetUMemSpaceStateRequest will create request of GetUMemSpaceState action.
func (c *UMemClient) NewGetUMemSpaceStateRequest() *GetUMemSpaceStateRequest {
    req := &GetUMemSpaceStateRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: GetUMemSpaceState


*/
func (c *UMemClient) GetUMemSpaceState(req *GetUMemSpaceStateRequest) (*GetUMemSpaceStateResponse, error) {
	var err error
	var res GetUMemSpaceStateResponse

	reqCopier := *req
    
    
    
	err = c.Client.InvokeAction("GetUMemSpaceState", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// ModifyUMemSpaceNameRequest is request schema for ModifyUMemSpaceName action
type ModifyUMemSpaceNameRequest struct {
	request.CommonBase




    //  
    Name *string `required:"true"`

    //  
    SpaceId *string `required:"true"`

}


// ModifyUMemSpaceNameResponse is response schema for ModifyUMemSpaceName action
type ModifyUMemSpaceNameResponse struct {
	response.CommonBase


}


// NewModifyUMemSpaceNameRequest will create request of ModifyUMemSpaceName action.
func (c *UMemClient) NewModifyUMemSpaceNameRequest() *ModifyUMemSpaceNameRequest {
    req := &ModifyUMemSpaceNameRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: ModifyUMemSpaceName


*/
func (c *UMemClient) ModifyUMemSpaceName(req *ModifyUMemSpaceNameRequest) (*ModifyUMemSpaceNameResponse, error) {
	var err error
	var res ModifyUMemSpaceNameResponse

	reqCopier := *req
    
    
    
    
    
	err = c.Client.InvokeAction("ModifyUMemSpaceName", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// ModifyURedisGroupNameRequest is request schema for ModifyURedisGroupName action
type ModifyURedisGroupNameRequest struct {
	request.CommonBase




    //  
    GroupId *string `required:"true"`

    //  
    Name *string `required:"true"`

}


// ModifyURedisGroupNameResponse is response schema for ModifyURedisGroupName action
type ModifyURedisGroupNameResponse struct {
	response.CommonBase


}


// NewModifyURedisGroupNameRequest will create request of ModifyURedisGroupName action.
func (c *UMemClient) NewModifyURedisGroupNameRequest() *ModifyURedisGroupNameRequest {
    req := &ModifyURedisGroupNameRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: ModifyURedisGroupName


*/
func (c *UMemClient) ModifyURedisGroupName(req *ModifyURedisGroupNameRequest) (*ModifyURedisGroupNameResponse, error) {
	var err error
	var res ModifyURedisGroupNameResponse

	reqCopier := *req
    
    
    
    
    
	err = c.Client.InvokeAction("ModifyURedisGroupName", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// ResizeUDredisSpaceRequest is request schema for ResizeUDredisSpace action
type ResizeUDredisSpaceRequest struct {
	request.CommonBase




    //  
    CouponId *string `required:"false"`

    //  
    Size *int `required:"true"`

    //  
    SpaceId *string `required:"true"`

}


// ResizeUDredisSpaceResponse is response schema for ResizeUDredisSpace action
type ResizeUDredisSpaceResponse struct {
	response.CommonBase


}


// NewResizeUDredisSpaceRequest will create request of ResizeUDredisSpace action.
func (c *UMemClient) NewResizeUDredisSpaceRequest() *ResizeUDredisSpaceRequest {
    req := &ResizeUDredisSpaceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: ResizeUDredisSpace


*/
func (c *UMemClient) ResizeUDredisSpace(req *ResizeUDredisSpaceRequest) (*ResizeUDredisSpaceResponse, error) {
	var err error
	var res ResizeUDredisSpaceResponse

	reqCopier := *req
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("ResizeUDredisSpace", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// ResizeUMemSpaceRequest is request schema for ResizeUMemSpace action
type ResizeUMemSpaceRequest struct {
	request.CommonBase




    //  
    ChargeType *string `required:"false"`

    //  
    CouponId *string `required:"false"`

    //  
    Size *int `required:"true"`

    //  
    SpaceId *string `required:"true"`

    //  
    Type *string `required:"false"`

}


// ResizeUMemSpaceResponse is response schema for ResizeUMemSpace action
type ResizeUMemSpaceResponse struct {
	response.CommonBase


}


// NewResizeUMemSpaceRequest will create request of ResizeUMemSpace action.
func (c *UMemClient) NewResizeUMemSpaceRequest() *ResizeUMemSpaceRequest {
    req := &ResizeUMemSpaceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: ResizeUMemSpace


*/
func (c *UMemClient) ResizeUMemSpace(req *ResizeUMemSpaceRequest) (*ResizeUMemSpaceResponse, error) {
	var err error
	var res ResizeUMemSpaceResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("ResizeUMemSpace", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// ResizeURedisGroupRequest is request schema for ResizeURedisGroup action
type ResizeURedisGroupRequest struct {
	request.CommonBase




    //  
    ChargeType *string `required:"false"`

    //  
    CouponId *int `required:"false"`

    //  
    GroupId *string `required:"true"`

    //  
    Size *int `required:"true"`

    //  
    Type *string `required:"false"`

}


// ResizeURedisGroupResponse is response schema for ResizeURedisGroup action
type ResizeURedisGroupResponse struct {
	response.CommonBase


}


// NewResizeURedisGroupRequest will create request of ResizeURedisGroup action.
func (c *UMemClient) NewResizeURedisGroupRequest() *ResizeURedisGroupRequest {
    req := &ResizeURedisGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: ResizeURedisGroup


*/
func (c *UMemClient) ResizeURedisGroup(req *ResizeURedisGroupRequest) (*ResizeURedisGroupResponse, error) {
	var err error
	var res ResizeURedisGroupResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("ResizeURedisGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// RestartUMemcacheGroupRequest is request schema for RestartUMemcacheGroup action
type RestartUMemcacheGroupRequest struct {
	request.CommonBase




    //  
    GroupId *string `required:"true"`

}


// RestartUMemcacheGroupResponse is response schema for RestartUMemcacheGroup action
type RestartUMemcacheGroupResponse struct {
	response.CommonBase


}


// NewRestartUMemcacheGroupRequest will create request of RestartUMemcacheGroup action.
func (c *UMemClient) NewRestartUMemcacheGroupRequest() *RestartUMemcacheGroupRequest {
    req := &RestartUMemcacheGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: RestartUMemcacheGroup


*/
func (c *UMemClient) RestartUMemcacheGroup(req *RestartUMemcacheGroupRequest) (*RestartUMemcacheGroupResponse, error) {
	var err error
	var res RestartUMemcacheGroupResponse

	reqCopier := *req
    
    
    
	err = c.Client.InvokeAction("RestartUMemcacheGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}


