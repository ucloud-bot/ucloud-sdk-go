// Code is generated by ucloud-model, DO NOT EDIT IT.




package unet

import (
	"github.com/ucloud/ucloud-sdk-go/ucloud/request"
	"github.com/ucloud/ucloud-sdk-go/ucloud/response"
)

// UNet API Schema
















// AllocateEIPRequest is request schema for AllocateEIP action
type AllocateEIPRequest struct {
	request.CommonBase




    //  
    Bandwidth *int `required:"true"`

    //  
    ChargeType *string `required:"false"`

    //  
    CouponId *string `required:"false"`

    //  
    Name *string `required:"false"`

    //  
    OperatorName *string `required:"true"`

    //  
    PayMode *string `required:"false"`

    //  
    Quantity *int `required:"false"`

    //  
    Remark *string `required:"false"`

    //  
    ShareBandwidthId *string `required:"false"`

    //  
    Tag *string `required:"false"`

}


// AllocateEIPResponse is response schema for AllocateEIP action
type AllocateEIPResponse struct {
	response.CommonBase


    //  
    EIPSet []UnetAllocateEIPSet 

}


// NewAllocateEIPRequest will create request of AllocateEIP action.
func (c *UNetClient) NewAllocateEIPRequest() *AllocateEIPRequest {
    req := &AllocateEIPRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: AllocateEIP


*/
func (c *UNetClient) AllocateEIP(req *AllocateEIPRequest) (*AllocateEIPResponse, error) {
	var err error
	var res AllocateEIPResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("AllocateEIP", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// AllocateShareBandwidthRequest is request schema for AllocateShareBandwidth action
type AllocateShareBandwidthRequest struct {
	request.CommonBase




    //  
    ChargeType *string `required:"true"`

    //  
    Name *string `required:"true"`

    //  
    Quantity *int `required:"false"`

    //  
    ShareBandwidth *int `required:"true"`

    //  
    ShareBandwidthGuarantee *int `required:"false"`

}


// AllocateShareBandwidthResponse is response schema for AllocateShareBandwidth action
type AllocateShareBandwidthResponse struct {
	response.CommonBase


    //  
    ShareBandwidthId string 

}


// NewAllocateShareBandwidthRequest will create request of AllocateShareBandwidth action.
func (c *UNetClient) NewAllocateShareBandwidthRequest() *AllocateShareBandwidthRequest {
    req := &AllocateShareBandwidthRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: AllocateShareBandwidth


*/
func (c *UNetClient) AllocateShareBandwidth(req *AllocateShareBandwidthRequest) (*AllocateShareBandwidthResponse, error) {
	var err error
	var res AllocateShareBandwidthResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("AllocateShareBandwidth", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// AssociateEIPWithShareBandwidthRequest is request schema for AssociateEIPWithShareBandwidth action
type AssociateEIPWithShareBandwidthRequest struct {
	request.CommonBase




    //  
    EIPIds []string `required:"true"`

    //  
    ShareBandwidthId *string `required:"true"`

}


// AssociateEIPWithShareBandwidthResponse is response schema for AssociateEIPWithShareBandwidth action
type AssociateEIPWithShareBandwidthResponse struct {
	response.CommonBase


}


// NewAssociateEIPWithShareBandwidthRequest will create request of AssociateEIPWithShareBandwidth action.
func (c *UNetClient) NewAssociateEIPWithShareBandwidthRequest() *AssociateEIPWithShareBandwidthRequest {
    req := &AssociateEIPWithShareBandwidthRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: AssociateEIPWithShareBandwidth


*/
func (c *UNetClient) AssociateEIPWithShareBandwidth(req *AssociateEIPWithShareBandwidthRequest) (*AssociateEIPWithShareBandwidthResponse, error) {
	var err error
	var res AssociateEIPWithShareBandwidthResponse

	reqCopier := *req
    
    
    
    
    
	err = c.Client.InvokeAction("AssociateEIPWithShareBandwidth", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// BindEIPRequest is request schema for BindEIP action
type BindEIPRequest struct {
	request.CommonBase




    //  
    EIPId *string `required:"true"`

    //  
    ResourceId *string `required:"true"`

    //  
    ResourceType *string `required:"true"`

}


// BindEIPResponse is response schema for BindEIP action
type BindEIPResponse struct {
	response.CommonBase


}


// NewBindEIPRequest will create request of BindEIP action.
func (c *UNetClient) NewBindEIPRequest() *BindEIPRequest {
    req := &BindEIPRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: BindEIP


*/
func (c *UNetClient) BindEIP(req *BindEIPRequest) (*BindEIPResponse, error) {
	var err error
	var res BindEIPResponse

	reqCopier := *req
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("BindEIP", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// CreateBandwidthPackageRequest is request schema for CreateBandwidthPackage action
type CreateBandwidthPackageRequest struct {
	request.CommonBase




    //  
    Bandwidth *int `required:"true"`

    //  
    CouponId *string `required:"false"`

    //  
    EIPId *string `required:"true"`

    //  
    EnableTime *int `required:"false"`

    //  
    TimeRange *int `required:"true"`

}


// CreateBandwidthPackageResponse is response schema for CreateBandwidthPackage action
type CreateBandwidthPackageResponse struct {
	response.CommonBase


    //  
    BandwidthPackageId string 

}


// NewCreateBandwidthPackageRequest will create request of CreateBandwidthPackage action.
func (c *UNetClient) NewCreateBandwidthPackageRequest() *CreateBandwidthPackageRequest {
    req := &CreateBandwidthPackageRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: CreateBandwidthPackage


*/
func (c *UNetClient) CreateBandwidthPackage(req *CreateBandwidthPackageRequest) (*CreateBandwidthPackageResponse, error) {
	var err error
	var res CreateBandwidthPackageResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("CreateBandwidthPackage", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// CreateFirewallRequest is request schema for CreateFirewall action
type CreateFirewallRequest struct {
	request.CommonBase




    //  
    Name *string `required:"true"`

    //  
    Remark *string `required:"false"`

    //  
    Rule []string `required:"true"`

    //  
    Tag *string `required:"false"`

}


// CreateFirewallResponse is response schema for CreateFirewall action
type CreateFirewallResponse struct {
	response.CommonBase


    //  
    FWId string 

}


// NewCreateFirewallRequest will create request of CreateFirewall action.
func (c *UNetClient) NewCreateFirewallRequest() *CreateFirewallRequest {
    req := &CreateFirewallRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: CreateFirewall


*/
func (c *UNetClient) CreateFirewall(req *CreateFirewallRequest) (*CreateFirewallResponse, error) {
	var err error
	var res CreateFirewallResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("CreateFirewall", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DeleteBandwidthPackageRequest is request schema for DeleteBandwidthPackage action
type DeleteBandwidthPackageRequest struct {
	request.CommonBase




    //  
    BandwidthPackageId *string `required:"true"`

}


// DeleteBandwidthPackageResponse is response schema for DeleteBandwidthPackage action
type DeleteBandwidthPackageResponse struct {
	response.CommonBase


}


// NewDeleteBandwidthPackageRequest will create request of DeleteBandwidthPackage action.
func (c *UNetClient) NewDeleteBandwidthPackageRequest() *DeleteBandwidthPackageRequest {
    req := &DeleteBandwidthPackageRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DeleteBandwidthPackage


*/
func (c *UNetClient) DeleteBandwidthPackage(req *DeleteBandwidthPackageRequest) (*DeleteBandwidthPackageResponse, error) {
	var err error
	var res DeleteBandwidthPackageResponse

	reqCopier := *req
    
    
    
	err = c.Client.InvokeAction("DeleteBandwidthPackage", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DeleteFirewallRequest is request schema for DeleteFirewall action
type DeleteFirewallRequest struct {
	request.CommonBase




    //  
    FWId *string `required:"true"`

}


// DeleteFirewallResponse is response schema for DeleteFirewall action
type DeleteFirewallResponse struct {
	response.CommonBase


}


// NewDeleteFirewallRequest will create request of DeleteFirewall action.
func (c *UNetClient) NewDeleteFirewallRequest() *DeleteFirewallRequest {
    req := &DeleteFirewallRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DeleteFirewall


*/
func (c *UNetClient) DeleteFirewall(req *DeleteFirewallRequest) (*DeleteFirewallResponse, error) {
	var err error
	var res DeleteFirewallResponse

	reqCopier := *req
    
    
    
	err = c.Client.InvokeAction("DeleteFirewall", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DescribeBandwidthPackageRequest is request schema for DescribeBandwidthPackage action
type DescribeBandwidthPackageRequest struct {
	request.CommonBase




    //  
    Limit *int `required:"false"`

    //  
    Offset *int `required:"false"`

}


// DescribeBandwidthPackageResponse is response schema for DescribeBandwidthPackage action
type DescribeBandwidthPackageResponse struct {
	response.CommonBase


    //  
    DataSets []UnetBandwidthPackageSet 

    //  
    TotalCount int 

}


// NewDescribeBandwidthPackageRequest will create request of DescribeBandwidthPackage action.
func (c *UNetClient) NewDescribeBandwidthPackageRequest() *DescribeBandwidthPackageRequest {
    req := &DescribeBandwidthPackageRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DescribeBandwidthPackage


*/
func (c *UNetClient) DescribeBandwidthPackage(req *DescribeBandwidthPackageRequest) (*DescribeBandwidthPackageResponse, error) {
	var err error
	var res DescribeBandwidthPackageResponse

	reqCopier := *req
    
    
    
    
    
	err = c.Client.InvokeAction("DescribeBandwidthPackage", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DescribeBandwidthUsageRequest is request schema for DescribeBandwidthUsage action
type DescribeBandwidthUsageRequest struct {
	request.CommonBase




    //  
    EIPIds []string `required:"false"`

    //  
    Limit *int `required:"false"`

    //  
    OffSet *int `required:"false"`

}


// DescribeBandwidthUsageResponse is response schema for DescribeBandwidthUsage action
type DescribeBandwidthUsageResponse struct {
	response.CommonBase


    //  
    EIPSet []UnetBandwidthUsageEIPSet 

    //  
    TotalCount int 

}


// NewDescribeBandwidthUsageRequest will create request of DescribeBandwidthUsage action.
func (c *UNetClient) NewDescribeBandwidthUsageRequest() *DescribeBandwidthUsageRequest {
    req := &DescribeBandwidthUsageRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DescribeBandwidthUsage


*/
func (c *UNetClient) DescribeBandwidthUsage(req *DescribeBandwidthUsageRequest) (*DescribeBandwidthUsageResponse, error) {
	var err error
	var res DescribeBandwidthUsageResponse

	reqCopier := *req
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("DescribeBandwidthUsage", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DescribeEIPRequest is request schema for DescribeEIP action
type DescribeEIPRequest struct {
	request.CommonBase




    //  
    EIPIds []string `required:"false"`

    //  
    Limit *int `required:"false"`

    //  
    Offset *int `required:"false"`

}


// DescribeEIPResponse is response schema for DescribeEIP action
type DescribeEIPResponse struct {
	response.CommonBase


    //  
    EIPSet []UnetEIPSet 

    //  
    TotalBandwidth int 

    //  
    TotalCount int 

}


// NewDescribeEIPRequest will create request of DescribeEIP action.
func (c *UNetClient) NewDescribeEIPRequest() *DescribeEIPRequest {
    req := &DescribeEIPRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DescribeEIP


*/
func (c *UNetClient) DescribeEIP(req *DescribeEIPRequest) (*DescribeEIPResponse, error) {
	var err error
	var res DescribeEIPResponse

	reqCopier := *req
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("DescribeEIP", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DescribeFirewallRequest is request schema for DescribeFirewall action
type DescribeFirewallRequest struct {
	request.CommonBase




    //  
    FWId *string `required:"false"`

    //  
    Limit *int `required:"false"`

    //  
    Offset *int `required:"false"`

    //  
    ResourceId *string `required:"false"`

    //  
    ResourceType *string `required:"false"`

}


// DescribeFirewallResponse is response schema for DescribeFirewall action
type DescribeFirewallResponse struct {
	response.CommonBase


    //  
    DataSet []FirewallDataSet 

    //  
    TotalCount int 

}


// NewDescribeFirewallRequest will create request of DescribeFirewall action.
func (c *UNetClient) NewDescribeFirewallRequest() *DescribeFirewallRequest {
    req := &DescribeFirewallRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DescribeFirewall


*/
func (c *UNetClient) DescribeFirewall(req *DescribeFirewallRequest) (*DescribeFirewallResponse, error) {
	var err error
	var res DescribeFirewallResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("DescribeFirewall", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DescribeFirewallResourceRequest is request schema for DescribeFirewallResource action
type DescribeFirewallResourceRequest struct {
	request.CommonBase




    //  
    FWId *string `required:"true"`

    //  
    Limit *string `required:"false"`

    //  
    Offset *string `required:"false"`

}


// DescribeFirewallResourceResponse is response schema for DescribeFirewallResource action
type DescribeFirewallResourceResponse struct {
	response.CommonBase


    //  
    ResourceSet []ResourceSet 

    //  
    TotalCount int 

}


// NewDescribeFirewallResourceRequest will create request of DescribeFirewallResource action.
func (c *UNetClient) NewDescribeFirewallResourceRequest() *DescribeFirewallResourceRequest {
    req := &DescribeFirewallResourceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DescribeFirewallResource


*/
func (c *UNetClient) DescribeFirewallResource(req *DescribeFirewallResourceRequest) (*DescribeFirewallResourceResponse, error) {
	var err error
	var res DescribeFirewallResourceResponse

	reqCopier := *req
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("DescribeFirewallResource", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DescribeShareBandwidthRequest is request schema for DescribeShareBandwidth action
type DescribeShareBandwidthRequest struct {
	request.CommonBase




    //  
    ShareBandwidthIds []string `required:"false"`

}


// DescribeShareBandwidthResponse is response schema for DescribeShareBandwidth action
type DescribeShareBandwidthResponse struct {
	response.CommonBase


    //  
    DataSet []UnetShareBandwidthSet 

    //  
    TotalCount int 

}


// NewDescribeShareBandwidthRequest will create request of DescribeShareBandwidth action.
func (c *UNetClient) NewDescribeShareBandwidthRequest() *DescribeShareBandwidthRequest {
    req := &DescribeShareBandwidthRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DescribeShareBandwidth


*/
func (c *UNetClient) DescribeShareBandwidth(req *DescribeShareBandwidthRequest) (*DescribeShareBandwidthResponse, error) {
	var err error
	var res DescribeShareBandwidthResponse

	reqCopier := *req
    
    
    
	err = c.Client.InvokeAction("DescribeShareBandwidth", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DisassociateEIPWithShareBandwidthRequest is request schema for DisassociateEIPWithShareBandwidth action
type DisassociateEIPWithShareBandwidthRequest struct {
	request.CommonBase




    //  
    Bandwidth *int `required:"true"`

    //  
    EIPIds []string `required:"false"`

    //  
    PayMode *string `required:"false"`

    //  
    ShareBandwidthId *string `required:"true"`

}


// DisassociateEIPWithShareBandwidthResponse is response schema for DisassociateEIPWithShareBandwidth action
type DisassociateEIPWithShareBandwidthResponse struct {
	response.CommonBase


}


// NewDisassociateEIPWithShareBandwidthRequest will create request of DisassociateEIPWithShareBandwidth action.
func (c *UNetClient) NewDisassociateEIPWithShareBandwidthRequest() *DisassociateEIPWithShareBandwidthRequest {
    req := &DisassociateEIPWithShareBandwidthRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DisassociateEIPWithShareBandwidth


*/
func (c *UNetClient) DisassociateEIPWithShareBandwidth(req *DisassociateEIPWithShareBandwidthRequest) (*DisassociateEIPWithShareBandwidthResponse, error) {
	var err error
	var res DisassociateEIPWithShareBandwidthResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("DisassociateEIPWithShareBandwidth", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// GetEIPPayModeRequest is request schema for GetEIPPayMode action
type GetEIPPayModeRequest struct {
	request.CommonBase




    //  
    EIPId []string `required:"true"`

}


// GetEIPPayModeResponse is response schema for GetEIPPayMode action
type GetEIPPayModeResponse struct {
	response.CommonBase


    //  
    EIPPayMode []EIPPayModeSet 

}


// NewGetEIPPayModeRequest will create request of GetEIPPayMode action.
func (c *UNetClient) NewGetEIPPayModeRequest() *GetEIPPayModeRequest {
    req := &GetEIPPayModeRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: GetEIPPayMode


*/
func (c *UNetClient) GetEIPPayMode(req *GetEIPPayModeRequest) (*GetEIPPayModeResponse, error) {
	var err error
	var res GetEIPPayModeResponse

	reqCopier := *req
    
    
    
	err = c.Client.InvokeAction("GetEIPPayMode", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// GetEIPPriceRequest is request schema for GetEIPPrice action
type GetEIPPriceRequest struct {
	request.CommonBase




    //  
    Bandwidth *int `required:"true"`

    //  
    ChargeType *string `required:"false"`

    //  
    OperatorName *string `required:"true"`

    //  
    PayMode *string `required:"false"`

}


// GetEIPPriceResponse is response schema for GetEIPPrice action
type GetEIPPriceResponse struct {
	response.CommonBase


    //  
    PriceSet []EIPPriceDetailSet 

}


// NewGetEIPPriceRequest will create request of GetEIPPrice action.
func (c *UNetClient) NewGetEIPPriceRequest() *GetEIPPriceRequest {
    req := &GetEIPPriceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: GetEIPPrice


*/
func (c *UNetClient) GetEIPPrice(req *GetEIPPriceRequest) (*GetEIPPriceResponse, error) {
	var err error
	var res GetEIPPriceResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("GetEIPPrice", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// GetEIPUpgradePriceRequest is request schema for GetEIPUpgradePrice action
type GetEIPUpgradePriceRequest struct {
	request.CommonBase




    //  
    Bandwidth *int `required:"true"`

    //  
    EIPId *string `required:"true"`

}


// GetEIPUpgradePriceResponse is response schema for GetEIPUpgradePrice action
type GetEIPUpgradePriceResponse struct {
	response.CommonBase


    //  
    Price float64 

}


// NewGetEIPUpgradePriceRequest will create request of GetEIPUpgradePrice action.
func (c *UNetClient) NewGetEIPUpgradePriceRequest() *GetEIPUpgradePriceRequest {
    req := &GetEIPUpgradePriceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: GetEIPUpgradePrice


*/
func (c *UNetClient) GetEIPUpgradePrice(req *GetEIPUpgradePriceRequest) (*GetEIPUpgradePriceResponse, error) {
	var err error
	var res GetEIPUpgradePriceResponse

	reqCopier := *req
    
    
    
    
    
	err = c.Client.InvokeAction("GetEIPUpgradePrice", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// GrantFirewallRequest is request schema for GrantFirewall action
type GrantFirewallRequest struct {
	request.CommonBase




    //  
    FWId *string `required:"true"`

    //  
    ResourceId *string `required:"true"`

    //  
    ResourceType *string `required:"true"`

}


// GrantFirewallResponse is response schema for GrantFirewall action
type GrantFirewallResponse struct {
	response.CommonBase


}


// NewGrantFirewallRequest will create request of GrantFirewall action.
func (c *UNetClient) NewGrantFirewallRequest() *GrantFirewallRequest {
    req := &GrantFirewallRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: GrantFirewall


*/
func (c *UNetClient) GrantFirewall(req *GrantFirewallRequest) (*GrantFirewallResponse, error) {
	var err error
	var res GrantFirewallResponse

	reqCopier := *req
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("GrantFirewall", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// ModifyEIPBandwidthRequest is request schema for ModifyEIPBandwidth action
type ModifyEIPBandwidthRequest struct {
	request.CommonBase




    //  
    Bandwidth *int `required:"true"`

    //  
    EIPId *string `required:"true"`

}


// ModifyEIPBandwidthResponse is response schema for ModifyEIPBandwidth action
type ModifyEIPBandwidthResponse struct {
	response.CommonBase


}


// NewModifyEIPBandwidthRequest will create request of ModifyEIPBandwidth action.
func (c *UNetClient) NewModifyEIPBandwidthRequest() *ModifyEIPBandwidthRequest {
    req := &ModifyEIPBandwidthRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: ModifyEIPBandwidth


*/
func (c *UNetClient) ModifyEIPBandwidth(req *ModifyEIPBandwidthRequest) (*ModifyEIPBandwidthResponse, error) {
	var err error
	var res ModifyEIPBandwidthResponse

	reqCopier := *req
    
    
    
    
    
	err = c.Client.InvokeAction("ModifyEIPBandwidth", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// ModifyEIPWeightRequest is request schema for ModifyEIPWeight action
type ModifyEIPWeightRequest struct {
	request.CommonBase




    //  
    EIPId *string `required:"true"`

    //  
    Weight *int `required:"true"`

}


// ModifyEIPWeightResponse is response schema for ModifyEIPWeight action
type ModifyEIPWeightResponse struct {
	response.CommonBase


}


// NewModifyEIPWeightRequest will create request of ModifyEIPWeight action.
func (c *UNetClient) NewModifyEIPWeightRequest() *ModifyEIPWeightRequest {
    req := &ModifyEIPWeightRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: ModifyEIPWeight


*/
func (c *UNetClient) ModifyEIPWeight(req *ModifyEIPWeightRequest) (*ModifyEIPWeightResponse, error) {
	var err error
	var res ModifyEIPWeightResponse

	reqCopier := *req
    
    
    
    
    
	err = c.Client.InvokeAction("ModifyEIPWeight", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// ReleaseEIPRequest is request schema for ReleaseEIP action
type ReleaseEIPRequest struct {
	request.CommonBase




    //  
    EIPId *string `required:"true"`

}


// ReleaseEIPResponse is response schema for ReleaseEIP action
type ReleaseEIPResponse struct {
	response.CommonBase


}


// NewReleaseEIPRequest will create request of ReleaseEIP action.
func (c *UNetClient) NewReleaseEIPRequest() *ReleaseEIPRequest {
    req := &ReleaseEIPRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: ReleaseEIP


*/
func (c *UNetClient) ReleaseEIP(req *ReleaseEIPRequest) (*ReleaseEIPResponse, error) {
	var err error
	var res ReleaseEIPResponse

	reqCopier := *req
    
    
    
	err = c.Client.InvokeAction("ReleaseEIP", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// ReleaseShareBandwidthRequest is request schema for ReleaseShareBandwidth action
type ReleaseShareBandwidthRequest struct {
	request.CommonBase




    //  
    EIPBandwidth *int `required:"true"`

    //  
    PayMode *string `required:"false"`

    //  
    ShareBandwidthId *string `required:"true"`

}


// ReleaseShareBandwidthResponse is response schema for ReleaseShareBandwidth action
type ReleaseShareBandwidthResponse struct {
	response.CommonBase


}


// NewReleaseShareBandwidthRequest will create request of ReleaseShareBandwidth action.
func (c *UNetClient) NewReleaseShareBandwidthRequest() *ReleaseShareBandwidthRequest {
    req := &ReleaseShareBandwidthRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: ReleaseShareBandwidth


*/
func (c *UNetClient) ReleaseShareBandwidth(req *ReleaseShareBandwidthRequest) (*ReleaseShareBandwidthResponse, error) {
	var err error
	var res ReleaseShareBandwidthResponse

	reqCopier := *req
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("ReleaseShareBandwidth", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// ResizeShareBandwidthRequest is request schema for ResizeShareBandwidth action
type ResizeShareBandwidthRequest struct {
	request.CommonBase




    //  
    ShareBandwidth *int `required:"true"`

    //  
    ShareBandwidthId *string `required:"true"`

}


// ResizeShareBandwidthResponse is response schema for ResizeShareBandwidth action
type ResizeShareBandwidthResponse struct {
	response.CommonBase


}


// NewResizeShareBandwidthRequest will create request of ResizeShareBandwidth action.
func (c *UNetClient) NewResizeShareBandwidthRequest() *ResizeShareBandwidthRequest {
    req := &ResizeShareBandwidthRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: ResizeShareBandwidth


*/
func (c *UNetClient) ResizeShareBandwidth(req *ResizeShareBandwidthRequest) (*ResizeShareBandwidthResponse, error) {
	var err error
	var res ResizeShareBandwidthResponse

	reqCopier := *req
    
    
    
    
    
	err = c.Client.InvokeAction("ResizeShareBandwidth", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// SetEIPPayModeRequest is request schema for SetEIPPayMode action
type SetEIPPayModeRequest struct {
	request.CommonBase




    //  
    Bandwidth *int `required:"true"`

    //  
    EIPId *string `required:"true"`

    //  
    PayMode *string `required:"true"`

}


// SetEIPPayModeResponse is response schema for SetEIPPayMode action
type SetEIPPayModeResponse struct {
	response.CommonBase


}


// NewSetEIPPayModeRequest will create request of SetEIPPayMode action.
func (c *UNetClient) NewSetEIPPayModeRequest() *SetEIPPayModeRequest {
    req := &SetEIPPayModeRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: SetEIPPayMode


*/
func (c *UNetClient) SetEIPPayMode(req *SetEIPPayModeRequest) (*SetEIPPayModeResponse, error) {
	var err error
	var res SetEIPPayModeResponse

	reqCopier := *req
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("SetEIPPayMode", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// UnBindEIPRequest is request schema for UnBindEIP action
type UnBindEIPRequest struct {
	request.CommonBase




    //  
    EIPId *string `required:"true"`

    //  
    ResourceId *string `required:"true"`

    //  
    ResourceType *string `required:"true"`

}


// UnBindEIPResponse is response schema for UnBindEIP action
type UnBindEIPResponse struct {
	response.CommonBase


}


// NewUnBindEIPRequest will create request of UnBindEIP action.
func (c *UNetClient) NewUnBindEIPRequest() *UnBindEIPRequest {
    req := &UnBindEIPRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: UnBindEIP


*/
func (c *UNetClient) UnBindEIP(req *UnBindEIPRequest) (*UnBindEIPResponse, error) {
	var err error
	var res UnBindEIPResponse

	reqCopier := *req
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("UnBindEIP", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// UpdateEIPAttributeRequest is request schema for UpdateEIPAttribute action
type UpdateEIPAttributeRequest struct {
	request.CommonBase




    //  
    EIPId *string `required:"true"`

    //  
    Name *string `required:"false"`

    //  
    Remark *string `required:"false"`

    //  
    Tag *string `required:"false"`

}


// UpdateEIPAttributeResponse is response schema for UpdateEIPAttribute action
type UpdateEIPAttributeResponse struct {
	response.CommonBase


}


// NewUpdateEIPAttributeRequest will create request of UpdateEIPAttribute action.
func (c *UNetClient) NewUpdateEIPAttributeRequest() *UpdateEIPAttributeRequest {
    req := &UpdateEIPAttributeRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: UpdateEIPAttribute


*/
func (c *UNetClient) UpdateEIPAttribute(req *UpdateEIPAttributeRequest) (*UpdateEIPAttributeResponse, error) {
	var err error
	var res UpdateEIPAttributeResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("UpdateEIPAttribute", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// UpdateFirewallRequest is request schema for UpdateFirewall action
type UpdateFirewallRequest struct {
	request.CommonBase




    //  
    FWId *string `required:"true"`

    //  
    Rule []string `required:"true"`

}


// UpdateFirewallResponse is response schema for UpdateFirewall action
type UpdateFirewallResponse struct {
	response.CommonBase


    //  
    FWId string 

}


// NewUpdateFirewallRequest will create request of UpdateFirewall action.
func (c *UNetClient) NewUpdateFirewallRequest() *UpdateFirewallRequest {
    req := &UpdateFirewallRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: UpdateFirewall


*/
func (c *UNetClient) UpdateFirewall(req *UpdateFirewallRequest) (*UpdateFirewallResponse, error) {
	var err error
	var res UpdateFirewallResponse

	reqCopier := *req
    
    
    
    
    
	err = c.Client.InvokeAction("UpdateFirewall", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// UpdateFirewallAttributeRequest is request schema for UpdateFirewallAttribute action
type UpdateFirewallAttributeRequest struct {
	request.CommonBase




    //  
    FWId *string `required:"true"`

    //  
    Name *string `required:"false"`

    //  
    Remark *string `required:"false"`

    //  
    Tag *string `required:"false"`

}


// UpdateFirewallAttributeResponse is response schema for UpdateFirewallAttribute action
type UpdateFirewallAttributeResponse struct {
	response.CommonBase


}


// NewUpdateFirewallAttributeRequest will create request of UpdateFirewallAttribute action.
func (c *UNetClient) NewUpdateFirewallAttributeRequest() *UpdateFirewallAttributeRequest {
    req := &UpdateFirewallAttributeRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: UpdateFirewallAttribute


*/
func (c *UNetClient) UpdateFirewallAttribute(req *UpdateFirewallAttributeRequest) (*UpdateFirewallAttributeResponse, error) {
	var err error
	var res UpdateFirewallAttributeResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("UpdateFirewallAttribute", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}


