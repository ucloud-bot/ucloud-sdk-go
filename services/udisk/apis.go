// Code is generated by ucloud-model, DO NOT EDIT IT.




package udisk

import (
	"github.com/ucloud/ucloud-sdk-go/ucloud/request"
	"github.com/ucloud/ucloud-sdk-go/ucloud/response"
)

// UDisk API Schema
















// AttachUDiskRequest is request schema for AttachUDisk action
type AttachUDiskRequest struct {
	request.CommonBase




    //  
    MultiAttach *string `required:"false"`

    //  
    UDiskId *string `required:"true"`

    //  
    UHostId *string `required:"true"`

}


// AttachUDiskResponse is response schema for AttachUDisk action
type AttachUDiskResponse struct {
	response.CommonBase


    //  
    UDiskId string 

    //  
    UHostId string 

}


// NewAttachUDiskRequest will create request of AttachUDisk action.
func (c *UDiskClient) NewAttachUDiskRequest() *AttachUDiskRequest {
    req := &AttachUDiskRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: AttachUDisk


*/
func (c *UDiskClient) AttachUDisk(req *AttachUDiskRequest) (*AttachUDiskResponse, error) {
	var err error
	var res AttachUDiskResponse

	reqCopier := *req
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("AttachUDisk", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// CloneUDiskRequest is request schema for CloneUDisk action
type CloneUDiskRequest struct {
	request.CommonBase




    //  
    ChargeType *string `required:"false"`

    //  
    Comment *string `required:"false"`

    //  
    CouponId *string `required:"false"`

    //  
    Name *string `required:"true"`

    //  
    Quantity *int `required:"false"`

    //  
    SourceId *string `required:"true"`

    //  
    UDataArkMode *string `required:"false"`

}


// CloneUDiskResponse is response schema for CloneUDisk action
type CloneUDiskResponse struct {
	response.CommonBase


    //  
    UDiskId []string 

}


// NewCloneUDiskRequest will create request of CloneUDisk action.
func (c *UDiskClient) NewCloneUDiskRequest() *CloneUDiskRequest {
    req := &CloneUDiskRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: CloneUDisk


*/
func (c *UDiskClient) CloneUDisk(req *CloneUDiskRequest) (*CloneUDiskResponse, error) {
	var err error
	var res CloneUDiskResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("CloneUDisk", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// CloneUDiskSnapshotRequest is request schema for CloneUDiskSnapshot action
type CloneUDiskSnapshotRequest struct {
	request.CommonBase




    //  
    ChargeType *string `required:"false"`

    //  
    Comment *string `required:"false"`

    //  
    CouponId *string `required:"false"`

    //  
    Name *string `required:"true"`

    //  
    Quantity *int `required:"false"`

    //  
    Size *int `required:"true"`

    //  
    SourceId *string `required:"true"`

    //  
    UDataArkMode *string `required:"false"`

}


// CloneUDiskSnapshotResponse is response schema for CloneUDiskSnapshot action
type CloneUDiskSnapshotResponse struct {
	response.CommonBase


    //  
    UDiskId []string 

}


// NewCloneUDiskSnapshotRequest will create request of CloneUDiskSnapshot action.
func (c *UDiskClient) NewCloneUDiskSnapshotRequest() *CloneUDiskSnapshotRequest {
    req := &CloneUDiskSnapshotRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: CloneUDiskSnapshot


*/
func (c *UDiskClient) CloneUDiskSnapshot(req *CloneUDiskSnapshotRequest) (*CloneUDiskSnapshotResponse, error) {
	var err error
	var res CloneUDiskSnapshotResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("CloneUDiskSnapshot", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// CreateUDiskRequest is request schema for CreateUDisk action
type CreateUDiskRequest struct {
	request.CommonBase




    //  
    ChargeType *string `required:"false"`

    //  
    CouponId *string `required:"false"`

    //  
    DiskType *string `required:"false"`

    //  
    Name *string `required:"true"`

    //  
    Quantity *int `required:"false"`

    //  
    Size *int `required:"true"`

    //  
    Tag *string `required:"false"`

    //  
    UDataArkMode *string `required:"false"`

}


// CreateUDiskResponse is response schema for CreateUDisk action
type CreateUDiskResponse struct {
	response.CommonBase


    //  
    UDiskId []string 

}


// NewCreateUDiskRequest will create request of CreateUDisk action.
func (c *UDiskClient) NewCreateUDiskRequest() *CreateUDiskRequest {
    req := &CreateUDiskRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: CreateUDisk


*/
func (c *UDiskClient) CreateUDisk(req *CreateUDiskRequest) (*CreateUDiskResponse, error) {
	var err error
	var res CreateUDiskResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("CreateUDisk", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// CreateUDiskSnapshotRequest is request schema for CreateUDiskSnapshot action
type CreateUDiskSnapshotRequest struct {
	request.CommonBase




    //  
    ChargeType *string `required:"false"`

    //  
    Comment *string `required:"false"`

    //  
    Name *string `required:"true"`

    //  
    Quantity *int `required:"false"`

    //  
    UDiskId *string `required:"true"`

}


// CreateUDiskSnapshotResponse is response schema for CreateUDiskSnapshot action
type CreateUDiskSnapshotResponse struct {
	response.CommonBase


    //  
    SnapshotId []string 

}


// NewCreateUDiskSnapshotRequest will create request of CreateUDiskSnapshot action.
func (c *UDiskClient) NewCreateUDiskSnapshotRequest() *CreateUDiskSnapshotRequest {
    req := &CreateUDiskSnapshotRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: CreateUDiskSnapshot


*/
func (c *UDiskClient) CreateUDiskSnapshot(req *CreateUDiskSnapshotRequest) (*CreateUDiskSnapshotResponse, error) {
	var err error
	var res CreateUDiskSnapshotResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("CreateUDiskSnapshot", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DeleteUDiskRequest is request schema for DeleteUDisk action
type DeleteUDiskRequest struct {
	request.CommonBase




    //  
    UDiskId *string `required:"true"`

}


// DeleteUDiskResponse is response schema for DeleteUDisk action
type DeleteUDiskResponse struct {
	response.CommonBase


}


// NewDeleteUDiskRequest will create request of DeleteUDisk action.
func (c *UDiskClient) NewDeleteUDiskRequest() *DeleteUDiskRequest {
    req := &DeleteUDiskRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DeleteUDisk


*/
func (c *UDiskClient) DeleteUDisk(req *DeleteUDiskRequest) (*DeleteUDiskResponse, error) {
	var err error
	var res DeleteUDiskResponse

	reqCopier := *req
    
    
    
	err = c.Client.InvokeAction("DeleteUDisk", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DeleteUDiskSnapshotRequest is request schema for DeleteUDiskSnapshot action
type DeleteUDiskSnapshotRequest struct {
	request.CommonBase




    //  
    SnapshotId *string `required:"true"`

    //  
    UDiskId *string `required:"false"`

}


// DeleteUDiskSnapshotResponse is response schema for DeleteUDiskSnapshot action
type DeleteUDiskSnapshotResponse struct {
	response.CommonBase


}


// NewDeleteUDiskSnapshotRequest will create request of DeleteUDiskSnapshot action.
func (c *UDiskClient) NewDeleteUDiskSnapshotRequest() *DeleteUDiskSnapshotRequest {
    req := &DeleteUDiskSnapshotRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DeleteUDiskSnapshot


*/
func (c *UDiskClient) DeleteUDiskSnapshot(req *DeleteUDiskSnapshotRequest) (*DeleteUDiskSnapshotResponse, error) {
	var err error
	var res DeleteUDiskSnapshotResponse

	reqCopier := *req
    
    
    
    
    
	err = c.Client.InvokeAction("DeleteUDiskSnapshot", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DescribeUDiskRequest is request schema for DescribeUDisk action
type DescribeUDiskRequest struct {
	request.CommonBase




    //  
    DiskType *string `required:"false"`

    //  
    Limit *int `required:"false"`

    //  
    Offset *int `required:"false"`

    //  
    UDiskId *string `required:"false"`

}


// DescribeUDiskResponse is response schema for DescribeUDisk action
type DescribeUDiskResponse struct {
	response.CommonBase


    //  
    DataSet []UDiskDataSet 

    //  
    TotalCount int 

}


// NewDescribeUDiskRequest will create request of DescribeUDisk action.
func (c *UDiskClient) NewDescribeUDiskRequest() *DescribeUDiskRequest {
    req := &DescribeUDiskRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DescribeUDisk


*/
func (c *UDiskClient) DescribeUDisk(req *DescribeUDiskRequest) (*DescribeUDiskResponse, error) {
	var err error
	var res DescribeUDiskResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("DescribeUDisk", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DescribeUDiskPriceRequest is request schema for DescribeUDiskPrice action
type DescribeUDiskPriceRequest struct {
	request.CommonBase




    //  
    ChargeType *string `required:"false"`

    //  
    DiskType *string `required:"false"`

    //  
    Quantity *int `required:"false"`

    //  
    Size *int `required:"true"`

    //  
    UDataArkMode *string `required:"false"`

}


// DescribeUDiskPriceResponse is response schema for DescribeUDiskPrice action
type DescribeUDiskPriceResponse struct {
	response.CommonBase


    //  
    DataSet []UDiskPriceDataSet 

}


// NewDescribeUDiskPriceRequest will create request of DescribeUDiskPrice action.
func (c *UDiskClient) NewDescribeUDiskPriceRequest() *DescribeUDiskPriceRequest {
    req := &DescribeUDiskPriceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DescribeUDiskPrice


*/
func (c *UDiskClient) DescribeUDiskPrice(req *DescribeUDiskPriceRequest) (*DescribeUDiskPriceResponse, error) {
	var err error
	var res DescribeUDiskPriceResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("DescribeUDiskPrice", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DescribeUDiskSnapshotRequest is request schema for DescribeUDiskSnapshot action
type DescribeUDiskSnapshotRequest struct {
	request.CommonBase




    //  
    Limit *int `required:"false"`

    //  
    Offset *int `required:"false"`

    //  
    SnapshotId *string `required:"false"`

    //  
    UDiskId *string `required:"false"`

}


// DescribeUDiskSnapshotResponse is response schema for DescribeUDiskSnapshot action
type DescribeUDiskSnapshotResponse struct {
	response.CommonBase


    //  
    DataSet []UDiskSnapshotSet 

    //  
    TotalCount int 

}


// NewDescribeUDiskSnapshotRequest will create request of DescribeUDiskSnapshot action.
func (c *UDiskClient) NewDescribeUDiskSnapshotRequest() *DescribeUDiskSnapshotRequest {
    req := &DescribeUDiskSnapshotRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DescribeUDiskSnapshot


*/
func (c *UDiskClient) DescribeUDiskSnapshot(req *DescribeUDiskSnapshotRequest) (*DescribeUDiskSnapshotResponse, error) {
	var err error
	var res DescribeUDiskSnapshotResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("DescribeUDiskSnapshot", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DescribeUDiskUpgradePriceRequest is request schema for DescribeUDiskUpgradePrice action
type DescribeUDiskUpgradePriceRequest struct {
	request.CommonBase




    //  
    DiskType *string `required:"false"`

    //  
    Size *int `required:"true"`

    //  
    SourceId *string `required:"true"`

    //  
    UDataArkMode *string `required:"true"`

}


// DescribeUDiskUpgradePriceResponse is response schema for DescribeUDiskUpgradePrice action
type DescribeUDiskUpgradePriceResponse struct {
	response.CommonBase


    //  
    Price float64 

}


// NewDescribeUDiskUpgradePriceRequest will create request of DescribeUDiskUpgradePrice action.
func (c *UDiskClient) NewDescribeUDiskUpgradePriceRequest() *DescribeUDiskUpgradePriceRequest {
    req := &DescribeUDiskUpgradePriceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DescribeUDiskUpgradePrice


*/
func (c *UDiskClient) DescribeUDiskUpgradePrice(req *DescribeUDiskUpgradePriceRequest) (*DescribeUDiskUpgradePriceResponse, error) {
	var err error
	var res DescribeUDiskUpgradePriceResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("DescribeUDiskUpgradePrice", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DetachUDiskRequest is request schema for DetachUDisk action
type DetachUDiskRequest struct {
	request.CommonBase




    //  
    UDiskId *string `required:"true"`

    //  
    UHostId *string `required:"true"`

}


// DetachUDiskResponse is response schema for DetachUDisk action
type DetachUDiskResponse struct {
	response.CommonBase


    //  
    UDiskId string 

    //  
    UHostId string 

}


// NewDetachUDiskRequest will create request of DetachUDisk action.
func (c *UDiskClient) NewDetachUDiskRequest() *DetachUDiskRequest {
    req := &DetachUDiskRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DetachUDisk


*/
func (c *UDiskClient) DetachUDisk(req *DetachUDiskRequest) (*DetachUDiskResponse, error) {
	var err error
	var res DetachUDiskResponse

	reqCopier := *req
    
    
    
    
    
	err = c.Client.InvokeAction("DetachUDisk", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// RenameUDiskRequest is request schema for RenameUDisk action
type RenameUDiskRequest struct {
	request.CommonBase




    //  
    UDiskId *string `required:"true"`

    //  
    UDiskName *string `required:"true"`

}


// RenameUDiskResponse is response schema for RenameUDisk action
type RenameUDiskResponse struct {
	response.CommonBase


}


// NewRenameUDiskRequest will create request of RenameUDisk action.
func (c *UDiskClient) NewRenameUDiskRequest() *RenameUDiskRequest {
    req := &RenameUDiskRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: RenameUDisk


*/
func (c *UDiskClient) RenameUDisk(req *RenameUDiskRequest) (*RenameUDiskResponse, error) {
	var err error
	var res RenameUDiskResponse

	reqCopier := *req
    
    
    
    
    
	err = c.Client.InvokeAction("RenameUDisk", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// ResizeUDiskRequest is request schema for ResizeUDisk action
type ResizeUDiskRequest struct {
	request.CommonBase




    //  
    CouponId *string `required:"false"`

    //  
    Size *int `required:"true"`

    //  
    UDiskId *string `required:"true"`

}


// ResizeUDiskResponse is response schema for ResizeUDisk action
type ResizeUDiskResponse struct {
	response.CommonBase


}


// NewResizeUDiskRequest will create request of ResizeUDisk action.
func (c *UDiskClient) NewResizeUDiskRequest() *ResizeUDiskRequest {
    req := &ResizeUDiskRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: ResizeUDisk


*/
func (c *UDiskClient) ResizeUDisk(req *ResizeUDiskRequest) (*ResizeUDiskResponse, error) {
	var err error
	var res ResizeUDiskResponse

	reqCopier := *req
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("ResizeUDisk", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// RestoreUDiskRequest is request schema for RestoreUDisk action
type RestoreUDiskRequest struct {
	request.CommonBase




    //  
    SnapshotId *string `required:"false"`

    //  
    SnapshotTime *int `required:"false"`

    //  
    UDiskId *string `required:"true"`

}


// RestoreUDiskResponse is response schema for RestoreUDisk action
type RestoreUDiskResponse struct {
	response.CommonBase


}


// NewRestoreUDiskRequest will create request of RestoreUDisk action.
func (c *UDiskClient) NewRestoreUDiskRequest() *RestoreUDiskRequest {
    req := &RestoreUDiskRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: RestoreUDisk


*/
func (c *UDiskClient) RestoreUDisk(req *RestoreUDiskRequest) (*RestoreUDiskResponse, error) {
	var err error
	var res RestoreUDiskResponse

	reqCopier := *req
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("RestoreUDisk", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// SetUDiskUDataArkModeRequest is request schema for SetUDiskUDataArkMode action
type SetUDiskUDataArkModeRequest struct {
	request.CommonBase




    //  
    UDataArkMode *string `required:"true"`

    //  
    UDiskId *string `required:"true"`

}


// SetUDiskUDataArkModeResponse is response schema for SetUDiskUDataArkMode action
type SetUDiskUDataArkModeResponse struct {
	response.CommonBase


}


// NewSetUDiskUDataArkModeRequest will create request of SetUDiskUDataArkMode action.
func (c *UDiskClient) NewSetUDiskUDataArkModeRequest() *SetUDiskUDataArkModeRequest {
    req := &SetUDiskUDataArkModeRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: SetUDiskUDataArkMode


*/
func (c *UDiskClient) SetUDiskUDataArkMode(req *SetUDiskUDataArkModeRequest) (*SetUDiskUDataArkModeResponse, error) {
	var err error
	var res SetUDiskUDataArkModeResponse

	reqCopier := *req
    
    
    
    
    
	err = c.Client.InvokeAction("SetUDiskUDataArkMode", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}


