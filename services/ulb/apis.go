// Code is generated by ucloud-model, DO NOT EDIT IT.




package ulb

import (
	"github.com/ucloud/ucloud-sdk-go/ucloud/request"
	"github.com/ucloud/ucloud-sdk-go/ucloud/response"
)

// ULB API Schema
















// AllocateBackendRequest is request schema for AllocateBackend action
type AllocateBackendRequest struct {
	request.CommonBase




    //  
    Enabled *int `required:"false"`

    //  
    Port *int `required:"false"`

    //  
    ResourceId *string `required:"true"`

    //  
    ResourceType *string `required:"true"`

    //  
    ULBId *string `required:"true"`

    //  
    VServerId *string `required:"true"`

    //  
    Weight *int `required:"false"`

}


// AllocateBackendResponse is response schema for AllocateBackend action
type AllocateBackendResponse struct {
	response.CommonBase


    //  
    BackendId string 

}


// NewAllocateBackendRequest will create request of AllocateBackend action.
func (c *ULBClient) NewAllocateBackendRequest() *AllocateBackendRequest {
    req := &AllocateBackendRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: AllocateBackend


*/
func (c *ULBClient) AllocateBackend(req *AllocateBackendRequest) (*AllocateBackendResponse, error) {
	var err error
	var res AllocateBackendResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("AllocateBackend", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// AllocateBackendBatchRequest is request schema for AllocateBackendBatch action
type AllocateBackendBatchRequest struct {
	request.CommonBase




    //  
    ApiVersion *int `required:"false"`

    //  
    Backends []string `required:"true"`

    //  
    ULBId *string `required:"true"`

    //  
    VServerId *string `required:"true"`

}


// AllocateBackendBatchResponse is response schema for AllocateBackendBatch action
type AllocateBackendBatchResponse struct {
	response.CommonBase


    //  
    BackendSet []BackendSet 

}


// NewAllocateBackendBatchRequest will create request of AllocateBackendBatch action.
func (c *ULBClient) NewAllocateBackendBatchRequest() *AllocateBackendBatchRequest {
    req := &AllocateBackendBatchRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: AllocateBackendBatch


*/
func (c *ULBClient) AllocateBackendBatch(req *AllocateBackendBatchRequest) (*AllocateBackendBatchResponse, error) {
	var err error
	var res AllocateBackendBatchResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("AllocateBackendBatch", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// BindSSLRequest is request schema for BindSSL action
type BindSSLRequest struct {
	request.CommonBase




    //  
    SSLId *string `required:"true"`

    //  
    ULBId *string `required:"true"`

    //  
    VServerId *string `required:"true"`

}


// BindSSLResponse is response schema for BindSSL action
type BindSSLResponse struct {
	response.CommonBase


}


// NewBindSSLRequest will create request of BindSSL action.
func (c *ULBClient) NewBindSSLRequest() *BindSSLRequest {
    req := &BindSSLRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: BindSSL


*/
func (c *ULBClient) BindSSL(req *BindSSLRequest) (*BindSSLResponse, error) {
	var err error
	var res BindSSLResponse

	reqCopier := *req
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("BindSSL", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// CreatePolicyRequest is request schema for CreatePolicy action
type CreatePolicyRequest struct {
	request.CommonBase




    //  
    BackendId []string `required:"true"`

    //  
    Match *string `required:"true"`

    //  
    Type *string `required:"false"`

    //  
    ULBId *string `required:"true"`

    //  
    VServerId *string `required:"true"`

}


// CreatePolicyResponse is response schema for CreatePolicy action
type CreatePolicyResponse struct {
	response.CommonBase


    //  
    PolicyId string 

}


// NewCreatePolicyRequest will create request of CreatePolicy action.
func (c *ULBClient) NewCreatePolicyRequest() *CreatePolicyRequest {
    req := &CreatePolicyRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: CreatePolicy


*/
func (c *ULBClient) CreatePolicy(req *CreatePolicyRequest) (*CreatePolicyResponse, error) {
	var err error
	var res CreatePolicyResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("CreatePolicy", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// CreateSSLRequest is request schema for CreateSSL action
type CreateSSLRequest struct {
	request.CommonBase




    //  
    CaCert *string `required:"false"`

    //  
    PrivateKey *string `required:"false"`

    //  
    SSLContent *string `required:"false"`

    //  
    SSLName *string `required:"true"`

    //  
    SSLType *string `required:"false"`

    //  
    UserCert *string `required:"false"`

}


// CreateSSLResponse is response schema for CreateSSL action
type CreateSSLResponse struct {
	response.CommonBase


    //  
    SSLId string 

}


// NewCreateSSLRequest will create request of CreateSSL action.
func (c *ULBClient) NewCreateSSLRequest() *CreateSSLRequest {
    req := &CreateSSLRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: CreateSSL


*/
func (c *ULBClient) CreateSSL(req *CreateSSLRequest) (*CreateSSLResponse, error) {
	var err error
	var res CreateSSLResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("CreateSSL", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// CreateULBRequest is request schema for CreateULB action
type CreateULBRequest struct {
	request.CommonBase




    //  
    BusinessId *string `required:"false"`

    //  
    ChargeType *string `required:"false"`

    //  
    InnerMode *string `required:"false"`

    //  
    OuterMode *string `required:"false"`

    //  
    PrivateIp *string `required:"false"`

    //  
    Remark *string `required:"false"`

    //  
    SubnetId *string `required:"false"`

    //  
    Tag *string `required:"false"`

    //  
    ULBName *string `required:"false"`

    //  
    VPCId *string `required:"false"`

}


// CreateULBResponse is response schema for CreateULB action
type CreateULBResponse struct {
	response.CommonBase


    //  
    ULBId string 

}


// NewCreateULBRequest will create request of CreateULB action.
func (c *ULBClient) NewCreateULBRequest() *CreateULBRequest {
    req := &CreateULBRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: CreateULB


*/
func (c *ULBClient) CreateULB(req *CreateULBRequest) (*CreateULBResponse, error) {
	var err error
	var res CreateULBResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("CreateULB", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// CreateVServerRequest is request schema for CreateVServer action
type CreateVServerRequest struct {
	request.CommonBase




    //  
    ClientTimeout *int `required:"false"`

    //  
    Domain *string `required:"false"`

    //  
    FrontendPort *int `required:"false"`

    //  
    ListenType *string `required:"false"`

    //  
    Method *string `required:"false"`

    //  
    MonitorType *string `required:"false"`

    //  
    Path *string `required:"false"`

    //  
    PersistenceInfo *string `required:"false"`

    //  
    PersistenceType *string `required:"false"`

    //  
    Protocol *string `required:"false"`

    //  
    ULBId *string `required:"true"`

    //  
    VServerName *string `required:"false"`

}


// CreateVServerResponse is response schema for CreateVServer action
type CreateVServerResponse struct {
	response.CommonBase


    //  
    VServerId string 

}


// NewCreateVServerRequest will create request of CreateVServer action.
func (c *ULBClient) NewCreateVServerRequest() *CreateVServerRequest {
    req := &CreateVServerRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: CreateVServer


*/
func (c *ULBClient) CreateVServer(req *CreateVServerRequest) (*CreateVServerResponse, error) {
	var err error
	var res CreateVServerResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("CreateVServer", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DeletePolicyRequest is request schema for DeletePolicy action
type DeletePolicyRequest struct {
	request.CommonBase




    //  
    GroupId *string `required:"false"`

    //  
    PolicyId *string `required:"true"`

    //  
    VServerId *string `required:"false"`

}


// DeletePolicyResponse is response schema for DeletePolicy action
type DeletePolicyResponse struct {
	response.CommonBase


}


// NewDeletePolicyRequest will create request of DeletePolicy action.
func (c *ULBClient) NewDeletePolicyRequest() *DeletePolicyRequest {
    req := &DeletePolicyRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DeletePolicy


*/
func (c *ULBClient) DeletePolicy(req *DeletePolicyRequest) (*DeletePolicyResponse, error) {
	var err error
	var res DeletePolicyResponse

	reqCopier := *req
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("DeletePolicy", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DeleteSSLRequest is request schema for DeleteSSL action
type DeleteSSLRequest struct {
	request.CommonBase




    //  
    SSLId *string `required:"true"`

}


// DeleteSSLResponse is response schema for DeleteSSL action
type DeleteSSLResponse struct {
	response.CommonBase


}


// NewDeleteSSLRequest will create request of DeleteSSL action.
func (c *ULBClient) NewDeleteSSLRequest() *DeleteSSLRequest {
    req := &DeleteSSLRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DeleteSSL


*/
func (c *ULBClient) DeleteSSL(req *DeleteSSLRequest) (*DeleteSSLResponse, error) {
	var err error
	var res DeleteSSLResponse

	reqCopier := *req
    
    
    
	err = c.Client.InvokeAction("DeleteSSL", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DeleteULBRequest is request schema for DeleteULB action
type DeleteULBRequest struct {
	request.CommonBase




    //  
    ReleaseEip *bool `required:"false"`

    //  
    ULBId *string `required:"true"`

}


// DeleteULBResponse is response schema for DeleteULB action
type DeleteULBResponse struct {
	response.CommonBase


}


// NewDeleteULBRequest will create request of DeleteULB action.
func (c *ULBClient) NewDeleteULBRequest() *DeleteULBRequest {
    req := &DeleteULBRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DeleteULB


*/
func (c *ULBClient) DeleteULB(req *DeleteULBRequest) (*DeleteULBResponse, error) {
	var err error
	var res DeleteULBResponse

	reqCopier := *req
    
    
    
    
    
	err = c.Client.InvokeAction("DeleteULB", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DeleteVServerRequest is request schema for DeleteVServer action
type DeleteVServerRequest struct {
	request.CommonBase




    //  
    ULBId *string `required:"true"`

    //  
    VServerId *string `required:"true"`

}


// DeleteVServerResponse is response schema for DeleteVServer action
type DeleteVServerResponse struct {
	response.CommonBase


}


// NewDeleteVServerRequest will create request of DeleteVServer action.
func (c *ULBClient) NewDeleteVServerRequest() *DeleteVServerRequest {
    req := &DeleteVServerRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DeleteVServer


*/
func (c *ULBClient) DeleteVServer(req *DeleteVServerRequest) (*DeleteVServerResponse, error) {
	var err error
	var res DeleteVServerResponse

	reqCopier := *req
    
    
    
    
    
	err = c.Client.InvokeAction("DeleteVServer", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DescribeSSLRequest is request schema for DescribeSSL action
type DescribeSSLRequest struct {
	request.CommonBase




    //  
    Limit *int `required:"false"`

    //  
    Offset *int `required:"false"`

    //  
    SSLId *string `required:"false"`

}


// DescribeSSLResponse is response schema for DescribeSSL action
type DescribeSSLResponse struct {
	response.CommonBase


    //  
    DataSet []ULBSSLSet 

    //  
    TotalCount int 

}


// NewDescribeSSLRequest will create request of DescribeSSL action.
func (c *ULBClient) NewDescribeSSLRequest() *DescribeSSLRequest {
    req := &DescribeSSLRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DescribeSSL


*/
func (c *ULBClient) DescribeSSL(req *DescribeSSLRequest) (*DescribeSSLResponse, error) {
	var err error
	var res DescribeSSLResponse

	reqCopier := *req
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("DescribeSSL", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DescribeULBRequest is request schema for DescribeULB action
type DescribeULBRequest struct {
	request.CommonBase




    //  
    BusinessId *string `required:"false"`

    //  
    Limit *int `required:"false"`

    //  
    Offset *int `required:"false"`

    //  
    SubnetId *string `required:"false"`

    //  
    ULBId *string `required:"false"`

    //  
    VPCId *string `required:"false"`

}


// DescribeULBResponse is response schema for DescribeULB action
type DescribeULBResponse struct {
	response.CommonBase


    //  
    DataSet []ULBSet 

    //  
    TotalCount int 

}


// NewDescribeULBRequest will create request of DescribeULB action.
func (c *ULBClient) NewDescribeULBRequest() *DescribeULBRequest {
    req := &DescribeULBRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DescribeULB


*/
func (c *ULBClient) DescribeULB(req *DescribeULBRequest) (*DescribeULBResponse, error) {
	var err error
	var res DescribeULBResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("DescribeULB", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DescribeVServerRequest is request schema for DescribeVServer action
type DescribeVServerRequest struct {
	request.CommonBase




    //  
    Limit *int `required:"false"`

    //  
    Offset *int `required:"false"`

    //  
    ULBId *string `required:"true"`

    //  
    VServerId *string `required:"false"`

}


// DescribeVServerResponse is response schema for DescribeVServer action
type DescribeVServerResponse struct {
	response.CommonBase


    //  
    DataSet []ULBVServerSet 

    //  
    TotalCount int 

}


// NewDescribeVServerRequest will create request of DescribeVServer action.
func (c *ULBClient) NewDescribeVServerRequest() *DescribeVServerRequest {
    req := &DescribeVServerRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DescribeVServer


*/
func (c *ULBClient) DescribeVServer(req *DescribeVServerRequest) (*DescribeVServerResponse, error) {
	var err error
	var res DescribeVServerResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("DescribeVServer", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// ReleaseBackendRequest is request schema for ReleaseBackend action
type ReleaseBackendRequest struct {
	request.CommonBase




    //  
    BackendId *string `required:"true"`

    //  
    ULBId *string `required:"true"`

}


// ReleaseBackendResponse is response schema for ReleaseBackend action
type ReleaseBackendResponse struct {
	response.CommonBase


}


// NewReleaseBackendRequest will create request of ReleaseBackend action.
func (c *ULBClient) NewReleaseBackendRequest() *ReleaseBackendRequest {
    req := &ReleaseBackendRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: ReleaseBackend


*/
func (c *ULBClient) ReleaseBackend(req *ReleaseBackendRequest) (*ReleaseBackendResponse, error) {
	var err error
	var res ReleaseBackendResponse

	reqCopier := *req
    
    
    
    
    
	err = c.Client.InvokeAction("ReleaseBackend", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// UnbindSSLRequest is request schema for UnbindSSL action
type UnbindSSLRequest struct {
	request.CommonBase




    //  
    SSLId *string `required:"true"`

    //  
    ULBId *string `required:"true"`

    //  
    VServerId *string `required:"true"`

}


// UnbindSSLResponse is response schema for UnbindSSL action
type UnbindSSLResponse struct {
	response.CommonBase


}


// NewUnbindSSLRequest will create request of UnbindSSL action.
func (c *ULBClient) NewUnbindSSLRequest() *UnbindSSLRequest {
    req := &UnbindSSLRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: UnbindSSL


*/
func (c *ULBClient) UnbindSSL(req *UnbindSSLRequest) (*UnbindSSLResponse, error) {
	var err error
	var res UnbindSSLResponse

	reqCopier := *req
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("UnbindSSL", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// UpdateBackendAttributeRequest is request schema for UpdateBackendAttribute action
type UpdateBackendAttributeRequest struct {
	request.CommonBase




    //  
    BackendId *string `required:"true"`

    //  
    Enabled *int `required:"false"`

    //  
    Port *int `required:"false"`

    //  
    ULBId *string `required:"true"`

    //  
    Weight *int `required:"false"`

}


// UpdateBackendAttributeResponse is response schema for UpdateBackendAttribute action
type UpdateBackendAttributeResponse struct {
	response.CommonBase


}


// NewUpdateBackendAttributeRequest will create request of UpdateBackendAttribute action.
func (c *ULBClient) NewUpdateBackendAttributeRequest() *UpdateBackendAttributeRequest {
    req := &UpdateBackendAttributeRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: UpdateBackendAttribute


*/
func (c *ULBClient) UpdateBackendAttribute(req *UpdateBackendAttributeRequest) (*UpdateBackendAttributeResponse, error) {
	var err error
	var res UpdateBackendAttributeResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("UpdateBackendAttribute", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// UpdatePolicyRequest is request schema for UpdatePolicy action
type UpdatePolicyRequest struct {
	request.CommonBase




    //  
    BackendId []string `required:"true"`

    //  
    Match *string `required:"true"`

    //  
    PolicyId *string `required:"true"`

    //  
    Type *string `required:"false"`

    //  
    ULBId *string `required:"true"`

    //  
    VServerId *string `required:"true"`

}


// UpdatePolicyResponse is response schema for UpdatePolicy action
type UpdatePolicyResponse struct {
	response.CommonBase


    //  
    PolicyId string 

}


// NewUpdatePolicyRequest will create request of UpdatePolicy action.
func (c *ULBClient) NewUpdatePolicyRequest() *UpdatePolicyRequest {
    req := &UpdatePolicyRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: UpdatePolicy


*/
func (c *ULBClient) UpdatePolicy(req *UpdatePolicyRequest) (*UpdatePolicyResponse, error) {
	var err error
	var res UpdatePolicyResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("UpdatePolicy", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// UpdateULBAttributeRequest is request schema for UpdateULBAttribute action
type UpdateULBAttributeRequest struct {
	request.CommonBase




    //  
    Name *string `required:"false"`

    //  
    Remark *string `required:"false"`

    //  
    Tag *string `required:"false"`

    //  
    ULBId *string `required:"true"`

}


// UpdateULBAttributeResponse is response schema for UpdateULBAttribute action
type UpdateULBAttributeResponse struct {
	response.CommonBase


}


// NewUpdateULBAttributeRequest will create request of UpdateULBAttribute action.
func (c *ULBClient) NewUpdateULBAttributeRequest() *UpdateULBAttributeRequest {
    req := &UpdateULBAttributeRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: UpdateULBAttribute


*/
func (c *ULBClient) UpdateULBAttribute(req *UpdateULBAttributeRequest) (*UpdateULBAttributeResponse, error) {
	var err error
	var res UpdateULBAttributeResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("UpdateULBAttribute", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// UpdateVServerAttributeRequest is request schema for UpdateVServerAttribute action
type UpdateVServerAttributeRequest struct {
	request.CommonBase




    //  
    ClientTimeout *int `required:"false"`

    //  
    Domain *string `required:"false"`

    //  
    Method *string `required:"false"`

    //  
    MonitorType *string `required:"false"`

    //  
    Path *string `required:"false"`

    //  
    PersistenceInfo *string `required:"false"`

    //  
    PersistenceType *string `required:"false"`

    //  
    Protocol *string `required:"false"`

    //  
    ULBId *string `required:"true"`

    //  
    VServerId *string `required:"true"`

    //  
    VServerName *string `required:"false"`

}


// UpdateVServerAttributeResponse is response schema for UpdateVServerAttribute action
type UpdateVServerAttributeResponse struct {
	response.CommonBase


}


// NewUpdateVServerAttributeRequest will create request of UpdateVServerAttribute action.
func (c *ULBClient) NewUpdateVServerAttributeRequest() *UpdateVServerAttributeRequest {
    req := &UpdateVServerAttributeRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: UpdateVServerAttribute


*/
func (c *ULBClient) UpdateVServerAttribute(req *UpdateVServerAttributeRequest) (*UpdateVServerAttributeResponse, error) {
	var err error
	var res UpdateVServerAttributeResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("UpdateVServerAttribute", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}


