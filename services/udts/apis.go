// Code is generated by ucloud-model, DO NOT EDIT IT.

package udts

import (
	"github.com/ucloud/ucloud-sdk-go/ucloud/request"
	"github.com/ucloud/ucloud-sdk-go/ucloud/response"
)

// UDTS API Schema

// GetUDTSTaskConfigureRequest is request schema for GetUDTSTaskConfigure action
type GetUDTSTaskConfigureRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// 任务ID
	TaskId *string `required:"true"`
}

// GetUDTSTaskConfigureResponse is response schema for GetUDTSTaskConfigure action
type GetUDTSTaskConfigureResponse struct {
	response.CommonBase

	// 详细配置信息
	Data ConfigData
}

// NewGetUDTSTaskConfigureRequest will create request of GetUDTSTaskConfigure action.
func (c *UDTSClient) NewGetUDTSTaskConfigureRequest() *GetUDTSTaskConfigureRequest {
	req := &GetUDTSTaskConfigureRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetUDTSTaskConfigure

获取任务配置
*/
func (c *UDTSClient) GetUDTSTaskConfigure(req *GetUDTSTaskConfigureRequest) (*GetUDTSTaskConfigureResponse, error) {
	var err error
	var res GetUDTSTaskConfigureResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetUDTSTaskConfigure", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// GetUDTSTaskStatusRequest is request schema for GetUDTSTaskStatus action
type GetUDTSTaskStatusRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// 任务ID
	TaskId *string `required:"true"`
}

// GetUDTSTaskStatusResponse is response schema for GetUDTSTaskStatus action
type GetUDTSTaskStatusResponse struct {
	response.CommonBase

	// StatusData
	Data StatusData

	// 返回信息
	Message string
}

// NewGetUDTSTaskStatusRequest will create request of GetUDTSTaskStatus action.
func (c *UDTSClient) NewGetUDTSTaskStatusRequest() *GetUDTSTaskStatusRequest {
	req := &GetUDTSTaskStatusRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetUDTSTaskStatus

查看服务状态
*/
func (c *UDTSClient) GetUDTSTaskStatus(req *GetUDTSTaskStatusRequest) (*GetUDTSTaskStatusResponse, error) {
	var err error
	var res GetUDTSTaskStatusResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetUDTSTaskStatus", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ListUDTSTaskRequest is request schema for ListUDTSTask action
type ListUDTSTaskRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// 请求数量，默认为 20
	Limit *string `required:"false"`

	// 偏移量，默认为 0
	Offset *string `required:"false"`
}

// ListUDTSTaskResponse is response schema for ListUDTSTask action
type ListUDTSTaskResponse struct {
	response.CommonBase

	// ListDataItem 数组
	Data []ListDataItem

	// 返回信息
	Message string
}

// NewListUDTSTaskRequest will create request of ListUDTSTask action.
func (c *UDTSClient) NewListUDTSTaskRequest() *ListUDTSTaskRequest {
	req := &ListUDTSTaskRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ListUDTSTask

获取用户创建的 Task 信息
*/
func (c *UDTSClient) ListUDTSTask(req *ListUDTSTaskRequest) (*ListUDTSTaskResponse, error) {
	var err error
	var res ListUDTSTaskResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ListUDTSTask", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// StartUDTSTaskRequest is request schema for StartUDTSTask action
type StartUDTSTaskRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// 任务ID
	TaskId *string `required:"true"`
}

// StartUDTSTaskResponse is response schema for StartUDTSTask action
type StartUDTSTaskResponse struct {
	response.CommonBase

	// 返回信息
	Message string
}

// NewStartUDTSTaskRequest will create request of StartUDTSTask action.
func (c *UDTSClient) NewStartUDTSTaskRequest() *StartUDTSTaskRequest {
	req := &StartUDTSTaskRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: StartUDTSTask

启动UDTS服务
*/
func (c *UDTSClient) StartUDTSTask(req *StartUDTSTaskRequest) (*StartUDTSTaskResponse, error) {
	var err error
	var res StartUDTSTaskResponse

	reqCopier := *req

	err = c.Client.InvokeAction("StartUDTSTask", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// StopUDTSTaskRequest is request schema for StopUDTSTask action
type StopUDTSTaskRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// 任务 ID
	TaskId *string `required:"true"`
}

// StopUDTSTaskResponse is response schema for StopUDTSTask action
type StopUDTSTaskResponse struct {
	response.CommonBase

	// 返回信息
	Message string
}

// NewStopUDTSTaskRequest will create request of StopUDTSTask action.
func (c *UDTSClient) NewStopUDTSTaskRequest() *StopUDTSTaskRequest {
	req := &StopUDTSTaskRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: StopUDTSTask

停止UDTS任务
*/
func (c *UDTSClient) StopUDTSTask(req *StopUDTSTaskRequest) (*StopUDTSTaskResponse, error) {
	var err error
	var res StopUDTSTaskResponse

	reqCopier := *req

	err = c.Client.InvokeAction("StopUDTSTask", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}
