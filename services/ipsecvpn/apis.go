// Code is generated by ucloud-model, DO NOT EDIT IT.




package ipsecvpn

import (
	"github.com/ucloud/ucloud-sdk-go/ucloud/request"
	"github.com/ucloud/ucloud-sdk-go/ucloud/response"
)

// IPSecVPN API Schema
















// CreateRemoteVPNGatewayRequest is request schema for CreateRemoteVPNGateway action
type CreateRemoteVPNGatewayRequest struct {
	request.CommonBase




    //  
    Remark *string `required:"false"`

    //  
    RemoteVPNGatewayAddr *string `required:"true"`

    //  
    RemoteVPNGatewayName *string `required:"true"`

    //  
    Tag *string `required:"false"`

}


// CreateRemoteVPNGatewayResponse is response schema for CreateRemoteVPNGateway action
type CreateRemoteVPNGatewayResponse struct {
	response.CommonBase


    //  
    RemoteVPNGatewayId string 

}


// NewCreateRemoteVPNGatewayRequest will create request of CreateRemoteVPNGateway action.
func (c *IPSecVPNClient) NewCreateRemoteVPNGatewayRequest() *CreateRemoteVPNGatewayRequest {
    req := &CreateRemoteVPNGatewayRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: CreateRemoteVPNGateway


*/
func (c *IPSecVPNClient) CreateRemoteVPNGateway(req *CreateRemoteVPNGatewayRequest) (*CreateRemoteVPNGatewayResponse, error) {
	var err error
	var res CreateRemoteVPNGatewayResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("CreateRemoteVPNGateway", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// CreateVPNGatewayRequest is request schema for CreateVPNGateway action
type CreateVPNGatewayRequest struct {
	request.CommonBase




    //  
    BusinessId *string `required:"false"`

    //  
    ChargeType *string `required:"false"`

    //  
    CouponId *string `required:"false"`

    //  
    EIPId *string `required:"false"`

    //  
    Grade *string `required:"true"`

    //  
    Quantity *int `required:"false"`

    //  
    Remark *string `required:"false"`

    //  
    Tag *string `required:"false"`

    //  
    VPCId *string `required:"true"`

    //  
    VPNGatewayName *string `required:"true"`

}


// CreateVPNGatewayResponse is response schema for CreateVPNGateway action
type CreateVPNGatewayResponse struct {
	response.CommonBase


    //  
    VPNGatewayId string 

}


// NewCreateVPNGatewayRequest will create request of CreateVPNGateway action.
func (c *IPSecVPNClient) NewCreateVPNGatewayRequest() *CreateVPNGatewayRequest {
    req := &CreateVPNGatewayRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: CreateVPNGateway


*/
func (c *IPSecVPNClient) CreateVPNGateway(req *CreateVPNGatewayRequest) (*CreateVPNGatewayResponse, error) {
	var err error
	var res CreateVPNGatewayResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("CreateVPNGateway", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// CreateVPNTunnelRequest is request schema for CreateVPNTunnel action
type CreateVPNTunnelRequest struct {
	request.CommonBase




    //  
    IKEAuthenticationAlgorithm *string `required:"false"`

    //  
    IKEDhGroup *string `required:"false"`

    //  
    IKEEncryptionAlgorithm *string `required:"false"`

    //  
    IKEExchangeMode *string `required:"false"`

    //  
    IKELocalId *string `required:"false"`

    //  
    IKEPreSharedKey *string `required:"true"`

    //  
    IKERemoteId *string `required:"false"`

    //  
    IKESALifetime *string `required:"false"`

    //  
    IKEVersion *string `required:"true"`

    //  
    IPSecAuthenticationAlgorithm *string `required:"false"`

    //  
    IPSecEncryptionAlgorithm *string `required:"false"`

    //  
    IPSecLocalSubnetIds []string `required:"true"`

    //  
    IPSecPFSDhGroup *string `required:"false"`

    //  
    IPSecProtocol *string `required:"false"`

    //  
    IPSecRemoteSubnets []string `required:"true"`

    //  
    IPSecSALifetime *string `required:"false"`

    //  
    IPSecSALifetimeBytes *string `required:"false"`

    //  
    Remark *string `required:"false"`

    //  
    RemoteVPNGatewayId *string `required:"true"`

    //  
    Tag *string `required:"false"`

    //  
    VPCId *string `required:"true"`

    //  
    VPNGatewayId *string `required:"true"`

    //  
    VPNTunnelName *string `required:"true"`

}


// CreateVPNTunnelResponse is response schema for CreateVPNTunnel action
type CreateVPNTunnelResponse struct {
	response.CommonBase


    //  
    VPNTunnelId string 

}


// NewCreateVPNTunnelRequest will create request of CreateVPNTunnel action.
func (c *IPSecVPNClient) NewCreateVPNTunnelRequest() *CreateVPNTunnelRequest {
    req := &CreateVPNTunnelRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: CreateVPNTunnel


*/
func (c *IPSecVPNClient) CreateVPNTunnel(req *CreateVPNTunnelRequest) (*CreateVPNTunnelResponse, error) {
	var err error
	var res CreateVPNTunnelResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("CreateVPNTunnel", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DeleteRemoteVPNGatewayRequest is request schema for DeleteRemoteVPNGateway action
type DeleteRemoteVPNGatewayRequest struct {
	request.CommonBase




    //  
    RemoteVPNGatewayId *string `required:"true"`

}


// DeleteRemoteVPNGatewayResponse is response schema for DeleteRemoteVPNGateway action
type DeleteRemoteVPNGatewayResponse struct {
	response.CommonBase


}


// NewDeleteRemoteVPNGatewayRequest will create request of DeleteRemoteVPNGateway action.
func (c *IPSecVPNClient) NewDeleteRemoteVPNGatewayRequest() *DeleteRemoteVPNGatewayRequest {
    req := &DeleteRemoteVPNGatewayRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DeleteRemoteVPNGateway


*/
func (c *IPSecVPNClient) DeleteRemoteVPNGateway(req *DeleteRemoteVPNGatewayRequest) (*DeleteRemoteVPNGatewayResponse, error) {
	var err error
	var res DeleteRemoteVPNGatewayResponse

	reqCopier := *req
    
    
    
	err = c.Client.InvokeAction("DeleteRemoteVPNGateway", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DeleteVPNGatewayRequest is request schema for DeleteVPNGateway action
type DeleteVPNGatewayRequest struct {
	request.CommonBase




    //  
    ReleaseEip *bool `required:"false"`

    //  
    VPNGatewayId *string `required:"true"`

}


// DeleteVPNGatewayResponse is response schema for DeleteVPNGateway action
type DeleteVPNGatewayResponse struct {
	response.CommonBase


}


// NewDeleteVPNGatewayRequest will create request of DeleteVPNGateway action.
func (c *IPSecVPNClient) NewDeleteVPNGatewayRequest() *DeleteVPNGatewayRequest {
    req := &DeleteVPNGatewayRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DeleteVPNGateway


*/
func (c *IPSecVPNClient) DeleteVPNGateway(req *DeleteVPNGatewayRequest) (*DeleteVPNGatewayResponse, error) {
	var err error
	var res DeleteVPNGatewayResponse

	reqCopier := *req
    
    
    
    
    
	err = c.Client.InvokeAction("DeleteVPNGateway", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DeleteVPNTunnelRequest is request schema for DeleteVPNTunnel action
type DeleteVPNTunnelRequest struct {
	request.CommonBase




    //  
    VPNTunnelId *string `required:"true"`

}


// DeleteVPNTunnelResponse is response schema for DeleteVPNTunnel action
type DeleteVPNTunnelResponse struct {
	response.CommonBase


}


// NewDeleteVPNTunnelRequest will create request of DeleteVPNTunnel action.
func (c *IPSecVPNClient) NewDeleteVPNTunnelRequest() *DeleteVPNTunnelRequest {
    req := &DeleteVPNTunnelRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DeleteVPNTunnel


*/
func (c *IPSecVPNClient) DeleteVPNTunnel(req *DeleteVPNTunnelRequest) (*DeleteVPNTunnelResponse, error) {
	var err error
	var res DeleteVPNTunnelResponse

	reqCopier := *req
    
    
    
	err = c.Client.InvokeAction("DeleteVPNTunnel", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DescribeRemoteVPNGatewayRequest is request schema for DescribeRemoteVPNGateway action
type DescribeRemoteVPNGatewayRequest struct {
	request.CommonBase




    //  
    Limit *int `required:"false"`

    //  
    Offset *int `required:"false"`

    //  
    RemoteVPNGatewayIds []string `required:"false"`

    //  
    Tag *string `required:"false"`

}


// DescribeRemoteVPNGatewayResponse is response schema for DescribeRemoteVPNGateway action
type DescribeRemoteVPNGatewayResponse struct {
	response.CommonBase


    //  
    DataSet []RemoteVPNGatewayDataSet 

    //  
    TotalCount int 

}


// NewDescribeRemoteVPNGatewayRequest will create request of DescribeRemoteVPNGateway action.
func (c *IPSecVPNClient) NewDescribeRemoteVPNGatewayRequest() *DescribeRemoteVPNGatewayRequest {
    req := &DescribeRemoteVPNGatewayRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DescribeRemoteVPNGateway


*/
func (c *IPSecVPNClient) DescribeRemoteVPNGateway(req *DescribeRemoteVPNGatewayRequest) (*DescribeRemoteVPNGatewayResponse, error) {
	var err error
	var res DescribeRemoteVPNGatewayResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("DescribeRemoteVPNGateway", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DescribeVPNGatewayRequest is request schema for DescribeVPNGateway action
type DescribeVPNGatewayRequest struct {
	request.CommonBase




    //  
    Limit *int `required:"false"`

    //  
    Offset *int `required:"false"`

    //  
    Tag *string `required:"false"`

    //  
    VPCId *string `required:"false"`

    //  
    VPNGatewayIds []string `required:"false"`

}


// DescribeVPNGatewayResponse is response schema for DescribeVPNGateway action
type DescribeVPNGatewayResponse struct {
	response.CommonBase


    //  
    DataSet []VPNGatewayDataSet 

    //  
    TotalCount int 

}


// NewDescribeVPNGatewayRequest will create request of DescribeVPNGateway action.
func (c *IPSecVPNClient) NewDescribeVPNGatewayRequest() *DescribeVPNGatewayRequest {
    req := &DescribeVPNGatewayRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DescribeVPNGateway


*/
func (c *IPSecVPNClient) DescribeVPNGateway(req *DescribeVPNGatewayRequest) (*DescribeVPNGatewayResponse, error) {
	var err error
	var res DescribeVPNGatewayResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("DescribeVPNGateway", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DescribeVPNTunnelRequest is request schema for DescribeVPNTunnel action
type DescribeVPNTunnelRequest struct {
	request.CommonBase




    //  
    Limit *int `required:"false"`

    //  
    Offset *int `required:"false"`

    //  
    Tag *string `required:"false"`

    //  
    VPNTunnelIds []string `required:"false"`

}


// DescribeVPNTunnelResponse is response schema for DescribeVPNTunnel action
type DescribeVPNTunnelResponse struct {
	response.CommonBase


    //  
    DataSet []VPNTunnelDataSet 

    //  
    TotalCount int 

}


// NewDescribeVPNTunnelRequest will create request of DescribeVPNTunnel action.
func (c *IPSecVPNClient) NewDescribeVPNTunnelRequest() *DescribeVPNTunnelRequest {
    req := &DescribeVPNTunnelRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DescribeVPNTunnel


*/
func (c *IPSecVPNClient) DescribeVPNTunnel(req *DescribeVPNTunnelRequest) (*DescribeVPNTunnelResponse, error) {
	var err error
	var res DescribeVPNTunnelResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("DescribeVPNTunnel", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// UpdateVPNGatewayRequest is request schema for UpdateVPNGateway action
type UpdateVPNGatewayRequest struct {
	request.CommonBase




    //  
    Grade *string `required:"true"`

    //  
    VPNGatewayId *string `required:"true"`

}


// UpdateVPNGatewayResponse is response schema for UpdateVPNGateway action
type UpdateVPNGatewayResponse struct {
	response.CommonBase


}


// NewUpdateVPNGatewayRequest will create request of UpdateVPNGateway action.
func (c *IPSecVPNClient) NewUpdateVPNGatewayRequest() *UpdateVPNGatewayRequest {
    req := &UpdateVPNGatewayRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: UpdateVPNGateway


*/
func (c *IPSecVPNClient) UpdateVPNGateway(req *UpdateVPNGatewayRequest) (*UpdateVPNGatewayResponse, error) {
	var err error
	var res UpdateVPNGatewayResponse

	reqCopier := *req
    
    
    
    
    
	err = c.Client.InvokeAction("UpdateVPNGateway", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// UpdateVPNTunnelAttributeRequest is request schema for UpdateVPNTunnelAttribute action
type UpdateVPNTunnelAttributeRequest struct {
	request.CommonBase




    //  
    IKEAuthenticationAlgorithm *string `required:"false"`

    //  
    IKEDhGroup *string `required:"false"`

    //  
    IKEEncryptionAlgorithm *string `required:"false"`

    //  
    IKEExchangeMode *string `required:"false"`

    //  
    IKELocalId *string `required:"false"`

    //  
    IKEPreSharedKey *string `required:"false"`

    //  
    IKERemoteId *string `required:"false"`

    //  
    IKESALifetime *string `required:"false"`

    //  
    IKEVersion *string `required:"false"`

    //  
    IPSecAuthenticationAlgorithm *string `required:"false"`

    //  
    IPSecEncryptionAlgorithm *string `required:"false"`

    //  
    IPSecLocalSubnetIds []string `required:"false"`

    //  
    IPSecPFSDhGroup *string `required:"false"`

    //  
    IPSecProtocol *string `required:"false"`

    //  
    IPSecRemoteSubnets []string `required:"false"`

    //  
    IPSecSALifetime *string `required:"false"`

    //  
    IPSecSALifetimeBytes *string `required:"false"`

    //  
    VPNTunnelId *string `required:"true"`

}


// UpdateVPNTunnelAttributeResponse is response schema for UpdateVPNTunnelAttribute action
type UpdateVPNTunnelAttributeResponse struct {
	response.CommonBase


}


// NewUpdateVPNTunnelAttributeRequest will create request of UpdateVPNTunnelAttribute action.
func (c *IPSecVPNClient) NewUpdateVPNTunnelAttributeRequest() *UpdateVPNTunnelAttributeRequest {
    req := &UpdateVPNTunnelAttributeRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: UpdateVPNTunnelAttribute


*/
func (c *IPSecVPNClient) UpdateVPNTunnelAttribute(req *UpdateVPNTunnelAttributeRequest) (*UpdateVPNTunnelAttributeResponse, error) {
	var err error
	var res UpdateVPNTunnelAttributeResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("UpdateVPNTunnelAttribute", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}


