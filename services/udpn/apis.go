// Code is generated by ucloud-model, DO NOT EDIT IT.




package udpn

import (
	"github.com/ucloud/ucloud-sdk-go/ucloud/request"
	"github.com/ucloud/ucloud-sdk-go/ucloud/response"
)

// UDPN API Schema
















// AllocateUDPNRequest is request schema for AllocateUDPN action
type AllocateUDPNRequest struct {
	request.CommonBase




    //  
    Bandwidth *int `required:"true"`

    //  
    ChargeType *string `required:"false"`

    //  
    CouponId *string `required:"false"`

    //  
    Peer1 *string `required:"true"`

    //  
    Peer2 *string `required:"true"`

    //  
    Quantity *int `required:"false"`

}


// AllocateUDPNResponse is response schema for AllocateUDPN action
type AllocateUDPNResponse struct {
	response.CommonBase


    //  
    UDPNId string 

}


// NewAllocateUDPNRequest will create request of AllocateUDPN action.
func (c *UDPNClient) NewAllocateUDPNRequest() *AllocateUDPNRequest {
    req := &AllocateUDPNRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: AllocateUDPN


*/
func (c *UDPNClient) AllocateUDPN(req *AllocateUDPNRequest) (*AllocateUDPNResponse, error) {
	var err error
	var res AllocateUDPNResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("AllocateUDPN", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DescribeUDPNRequest is request schema for DescribeUDPN action
type DescribeUDPNRequest struct {
	request.CommonBase




    //  
    Limit *int `required:"false"`

    //  
    Offset *int `required:"false"`

    //  
    UDPNId *string `required:"false"`

}


// DescribeUDPNResponse is response schema for DescribeUDPN action
type DescribeUDPNResponse struct {
	response.CommonBase


    //  
    DataSet []UDPNData 

    //  
    TotalCount int 

}


// NewDescribeUDPNRequest will create request of DescribeUDPN action.
func (c *UDPNClient) NewDescribeUDPNRequest() *DescribeUDPNRequest {
    req := &DescribeUDPNRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DescribeUDPN


*/
func (c *UDPNClient) DescribeUDPN(req *DescribeUDPNRequest) (*DescribeUDPNResponse, error) {
	var err error
	var res DescribeUDPNResponse

	reqCopier := *req
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("DescribeUDPN", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// GetUDPNLineListRequest is request schema for GetUDPNLineList action
type GetUDPNLineListRequest struct {
	request.CommonBase




}


// GetUDPNLineListResponse is response schema for GetUDPNLineList action
type GetUDPNLineListResponse struct {
	response.CommonBase


    //  
    DataSet []UDPNLineSet 

    //  
    TotalCount int 

}


// NewGetUDPNLineListRequest will create request of GetUDPNLineList action.
func (c *UDPNClient) NewGetUDPNLineListRequest() *GetUDPNLineListRequest {
    req := &GetUDPNLineListRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: GetUDPNLineList


*/
func (c *UDPNClient) GetUDPNLineList(req *GetUDPNLineListRequest) (*GetUDPNLineListResponse, error) {
	var err error
	var res GetUDPNLineListResponse

	reqCopier := *req
    
	err = c.Client.InvokeAction("GetUDPNLineList", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// GetUDPNPriceRequest is request schema for GetUDPNPrice action
type GetUDPNPriceRequest struct {
	request.CommonBase




    //  
    Bandwidth *int `required:"true"`

    //  
    ChargeType *string `required:"false"`

    //  
    Peer1 *string `required:"true"`

    //  
    Peer2 *string `required:"true"`

    //  
    Quantity *int `required:"false"`

}


// GetUDPNPriceResponse is response schema for GetUDPNPrice action
type GetUDPNPriceResponse struct {
	response.CommonBase


    //  
    Price float64 

    //  
    PurchaseValue int 

}


// NewGetUDPNPriceRequest will create request of GetUDPNPrice action.
func (c *UDPNClient) NewGetUDPNPriceRequest() *GetUDPNPriceRequest {
    req := &GetUDPNPriceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: GetUDPNPrice


*/
func (c *UDPNClient) GetUDPNPrice(req *GetUDPNPriceRequest) (*GetUDPNPriceResponse, error) {
	var err error
	var res GetUDPNPriceResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("GetUDPNPrice", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// GetUDPNUpgradePriceRequest is request schema for GetUDPNUpgradePrice action
type GetUDPNUpgradePriceRequest struct {
	request.CommonBase




    //  
    Bandwidth *int `required:"true"`

    //  
    UDPNId *string `required:"true"`

}


// GetUDPNUpgradePriceResponse is response schema for GetUDPNUpgradePrice action
type GetUDPNUpgradePriceResponse struct {
	response.CommonBase


    //  
    Price float64 

}


// NewGetUDPNUpgradePriceRequest will create request of GetUDPNUpgradePrice action.
func (c *UDPNClient) NewGetUDPNUpgradePriceRequest() *GetUDPNUpgradePriceRequest {
    req := &GetUDPNUpgradePriceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: GetUDPNUpgradePrice


*/
func (c *UDPNClient) GetUDPNUpgradePrice(req *GetUDPNUpgradePriceRequest) (*GetUDPNUpgradePriceResponse, error) {
	var err error
	var res GetUDPNUpgradePriceResponse

	reqCopier := *req
    
    
    
    
    
	err = c.Client.InvokeAction("GetUDPNUpgradePrice", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// ModifyUDPNBandwidthRequest is request schema for ModifyUDPNBandwidth action
type ModifyUDPNBandwidthRequest struct {
	request.CommonBase




    //  
    Bandwidth *int `required:"true"`

    //  
    CouponId *string `required:"false"`

    //  
    UDPNId *string `required:"true"`

}


// ModifyUDPNBandwidthResponse is response schema for ModifyUDPNBandwidth action
type ModifyUDPNBandwidthResponse struct {
	response.CommonBase


}


// NewModifyUDPNBandwidthRequest will create request of ModifyUDPNBandwidth action.
func (c *UDPNClient) NewModifyUDPNBandwidthRequest() *ModifyUDPNBandwidthRequest {
    req := &ModifyUDPNBandwidthRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: ModifyUDPNBandwidth


*/
func (c *UDPNClient) ModifyUDPNBandwidth(req *ModifyUDPNBandwidthRequest) (*ModifyUDPNBandwidthResponse, error) {
	var err error
	var res ModifyUDPNBandwidthResponse

	reqCopier := *req
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("ModifyUDPNBandwidth", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// ReleaseUDPNRequest is request schema for ReleaseUDPN action
type ReleaseUDPNRequest struct {
	request.CommonBase




    //  
    UDPNId *string `required:"true"`

}


// ReleaseUDPNResponse is response schema for ReleaseUDPN action
type ReleaseUDPNResponse struct {
	response.CommonBase


}


// NewReleaseUDPNRequest will create request of ReleaseUDPN action.
func (c *UDPNClient) NewReleaseUDPNRequest() *ReleaseUDPNRequest {
    req := &ReleaseUDPNRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: ReleaseUDPN


*/
func (c *UDPNClient) ReleaseUDPN(req *ReleaseUDPNRequest) (*ReleaseUDPNResponse, error) {
	var err error
	var res ReleaseUDPNResponse

	reqCopier := *req
    
    
    
	err = c.Client.InvokeAction("ReleaseUDPN", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}


