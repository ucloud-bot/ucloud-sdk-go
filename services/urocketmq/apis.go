// Code is generated by ucloud-model, DO NOT EDIT IT.

package urocketmq

import (
	"github.com/ucloud/ucloud-sdk-go/ucloud/request"
	"github.com/ucloud/ucloud-sdk-go/ucloud/response"
)

// URocketMQ API Schema

// CreateURocketMQGroupRequest is request schema for CreateURocketMQGroup action
type CreateURocketMQGroupRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// Group 名称，支持大小写字母、数字及-, _ ，长度1~36
	Name *string `required:"true"`

	// Group 描述.
	Remark *string `required:"false"`

	// Service ID
	ServiceId *string `required:"true"`
}

// CreateURocketMQGroupResponse is response schema for CreateURocketMQGroup action
type CreateURocketMQGroupResponse struct {
	response.CommonBase

	// 新建 Group 的 ID
	GroupId string

	// 返回信息
	Message string
}

// NewCreateURocketMQGroupRequest will create request of CreateURocketMQGroup action.
func (c *URocketMQClient) NewCreateURocketMQGroupRequest() *CreateURocketMQGroupRequest {
	req := &CreateURocketMQGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateURocketMQGroup

创建一个 Group, 如果同名 Group 在当前 Service 中已存在, 则会失败.
*/
func (c *URocketMQClient) CreateURocketMQGroup(req *CreateURocketMQGroupRequest) (*CreateURocketMQGroupResponse, error) {
	var err error
	var res CreateURocketMQGroupResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateURocketMQGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteURocketMQGroupRequest is request schema for DeleteURocketMQGroup action
type DeleteURocketMQGroupRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// Group名称
	GroupName *string `required:"true"`

	// Service ID
	ServiceId *string `required:"true"`
}

// DeleteURocketMQGroupResponse is response schema for DeleteURocketMQGroup action
type DeleteURocketMQGroupResponse struct {
	response.CommonBase

	// 返回信息
	Message string
}

// NewDeleteURocketMQGroupRequest will create request of DeleteURocketMQGroup action.
func (c *URocketMQClient) NewDeleteURocketMQGroupRequest() *DeleteURocketMQGroupRequest {
	req := &DeleteURocketMQGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteURocketMQGroup

删除一个已存在的 Group
*/
func (c *URocketMQClient) DeleteURocketMQGroup(req *DeleteURocketMQGroupRequest) (*DeleteURocketMQGroupResponse, error) {
	var err error
	var res DeleteURocketMQGroupResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteURocketMQGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ListURocketMQGroupRequest is request schema for ListURocketMQGroup action
type ListURocketMQGroupRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。 请参考[GetProjectList接口](https://docs.ucloud.cn/api/summary/get_project_list)
	// ProjectId *string `required:"true"`

	// [公共参数] 地域。 参见 [地域和可用区列表](https://docs.ucloud.cn/api/summary/regionlist)
	// Region *string `required:"true"`

	// 最多返回的条目数量, (0, 1000], 默认 50 条
	Limit *int `required:"false"`

	// 查询起始位置, [0, ∞)
	Offset *int `required:"false"`

	// Service ID
	ServiceId *string `required:"true"`
}

// ListURocketMQGroupResponse is response schema for ListURocketMQGroup action
type ListURocketMQGroupResponse struct {
	response.CommonBase

	// Group列表信息
	GroupList []GroupBaseInfo

	// 返回信息
	Message string

	// 记录总数
	TotalCount int
}

// NewListURocketMQGroupRequest will create request of ListURocketMQGroup action.
func (c *URocketMQClient) NewListURocketMQGroupRequest() *ListURocketMQGroupRequest {
	req := &ListURocketMQGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ListURocketMQGroup

获取一个 RocketMQ 服务下的所有 Group
*/
func (c *URocketMQClient) ListURocketMQGroup(req *ListURocketMQGroupRequest) (*ListURocketMQGroupResponse, error) {
	var err error
	var res ListURocketMQGroupResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ListURocketMQGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}
