// Code is generated by ucloud-model, DO NOT EDIT IT.




package ufile

import (
	"github.com/ucloud/ucloud-sdk-go/ucloud/request"
	"github.com/ucloud/ucloud-sdk-go/ucloud/response"
)

// UFile API Schema
















// CreateBucketRequest is request schema for CreateBucket action
type CreateBucketRequest struct {
	request.CommonBase




    //  
    BucketName *string `required:"true"`

    //  
    Type *string `required:"false"`

}


// CreateBucketResponse is response schema for CreateBucket action
type CreateBucketResponse struct {
	response.CommonBase


    //  
    BucketId string 

    //  
    BucketName string 

}


// NewCreateBucketRequest will create request of CreateBucket action.
func (c *UFileClient) NewCreateBucketRequest() *CreateBucketRequest {
    req := &CreateBucketRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: CreateBucket


*/
func (c *UFileClient) CreateBucket(req *CreateBucketRequest) (*CreateBucketResponse, error) {
	var err error
	var res CreateBucketResponse

	reqCopier := *req
    
    
    
    
    
	err = c.Client.InvokeAction("CreateBucket", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// CreateUFileTokenRequest is request schema for CreateUFileToken action
type CreateUFileTokenRequest struct {
	request.CommonBase




    //  
    AllowedBuckets []string `required:"false"`

    //  
    AllowedOps []string `required:"false"`

    //  
    AllowedPrefixes []string `required:"false"`

    //  
    ExpireTime *int `required:"false"`

    //  
    TokenName *string `required:"true"`

}


// CreateUFileTokenResponse is response schema for CreateUFileToken action
type CreateUFileTokenResponse struct {
	response.CommonBase


    //  
    TokenId string 

}


// NewCreateUFileTokenRequest will create request of CreateUFileToken action.
func (c *UFileClient) NewCreateUFileTokenRequest() *CreateUFileTokenRequest {
    req := &CreateUFileTokenRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: CreateUFileToken


*/
func (c *UFileClient) CreateUFileToken(req *CreateUFileTokenRequest) (*CreateUFileTokenResponse, error) {
	var err error
	var res CreateUFileTokenResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("CreateUFileToken", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DeleteBucketRequest is request schema for DeleteBucket action
type DeleteBucketRequest struct {
	request.CommonBase




    //  
    BucketName *string `required:"true"`

}


// DeleteBucketResponse is response schema for DeleteBucket action
type DeleteBucketResponse struct {
	response.CommonBase


    //  
    BucketId string 

    //  
    BucketName string 

}


// NewDeleteBucketRequest will create request of DeleteBucket action.
func (c *UFileClient) NewDeleteBucketRequest() *DeleteBucketRequest {
    req := &DeleteBucketRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DeleteBucket


*/
func (c *UFileClient) DeleteBucket(req *DeleteBucketRequest) (*DeleteBucketResponse, error) {
	var err error
	var res DeleteBucketResponse

	reqCopier := *req
    
    
    
	err = c.Client.InvokeAction("DeleteBucket", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DeleteUFileTokenRequest is request schema for DeleteUFileToken action
type DeleteUFileTokenRequest struct {
	request.CommonBase




    //  
    TokenId *string `required:"true"`

}


// DeleteUFileTokenResponse is response schema for DeleteUFileToken action
type DeleteUFileTokenResponse struct {
	response.CommonBase


}


// NewDeleteUFileTokenRequest will create request of DeleteUFileToken action.
func (c *UFileClient) NewDeleteUFileTokenRequest() *DeleteUFileTokenRequest {
    req := &DeleteUFileTokenRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DeleteUFileToken


*/
func (c *UFileClient) DeleteUFileToken(req *DeleteUFileTokenRequest) (*DeleteUFileTokenResponse, error) {
	var err error
	var res DeleteUFileTokenResponse

	reqCopier := *req
    
    
    
	err = c.Client.InvokeAction("DeleteUFileToken", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DescribeBucketRequest is request schema for DescribeBucket action
type DescribeBucketRequest struct {
	request.CommonBase




    //  
    BucketName *string `required:"false"`

    //  
    Limit *int `required:"false"`

    //  
    Offset *int `required:"false"`

}


// DescribeBucketResponse is response schema for DescribeBucket action
type DescribeBucketResponse struct {
	response.CommonBase


    //  
    DataSet []UFileBucketSet 

}


// NewDescribeBucketRequest will create request of DescribeBucket action.
func (c *UFileClient) NewDescribeBucketRequest() *DescribeBucketRequest {
    req := &DescribeBucketRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DescribeBucket


*/
func (c *UFileClient) DescribeBucket(req *DescribeBucketRequest) (*DescribeBucketResponse, error) {
	var err error
	var res DescribeBucketResponse

	reqCopier := *req
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("DescribeBucket", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// DescribeUFileTokenRequest is request schema for DescribeUFileToken action
type DescribeUFileTokenRequest struct {
	request.CommonBase




    //  
    Display *int `required:"false"`

    //  
    TokenId *string `required:"false"`

}


// DescribeUFileTokenResponse is response schema for DescribeUFileToken action
type DescribeUFileTokenResponse struct {
	response.CommonBase


    //  
    Action string 

    //  
    DataSet []UFileTokenSet 

    //  
    RetCode int 

}


// NewDescribeUFileTokenRequest will create request of DescribeUFileToken action.
func (c *UFileClient) NewDescribeUFileTokenRequest() *DescribeUFileTokenRequest {
    req := &DescribeUFileTokenRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: DescribeUFileToken


*/
func (c *UFileClient) DescribeUFileToken(req *DescribeUFileTokenRequest) (*DescribeUFileTokenResponse, error) {
	var err error
	var res DescribeUFileTokenResponse

	reqCopier := *req
    
    
    
    
    
	err = c.Client.InvokeAction("DescribeUFileToken", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// UpdateBucketRequest is request schema for UpdateBucket action
type UpdateBucketRequest struct {
	request.CommonBase




    //  
    BucketName *string `required:"true"`

    //  
    Type *string `required:"true"`

}


// UpdateBucketResponse is response schema for UpdateBucket action
type UpdateBucketResponse struct {
	response.CommonBase


    //  
    BucketId string 

    //  
    BucketName string 

}


// NewUpdateBucketRequest will create request of UpdateBucket action.
func (c *UFileClient) NewUpdateBucketRequest() *UpdateBucketRequest {
    req := &UpdateBucketRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: UpdateBucket


*/
func (c *UFileClient) UpdateBucket(req *UpdateBucketRequest) (*UpdateBucketResponse, error) {
	var err error
	var res UpdateBucketResponse

	reqCopier := *req
    
    
    
    
    
	err = c.Client.InvokeAction("UpdateBucket", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}








// UpdateUFileTokenRequest is request schema for UpdateUFileToken action
type UpdateUFileTokenRequest struct {
	request.CommonBase




    //  
    AllowedBuckets []string `required:"false"`

    //  
    AllowedOps []string `required:"false"`

    //  
    AllowedPrefixes []string `required:"false"`

    //  
    ExpireTime *int `required:"false"`

    //  
    TokenId *string `required:"true"`

    //  
    TokenName *string `required:"false"`

}


// UpdateUFileTokenResponse is response schema for UpdateUFileToken action
type UpdateUFileTokenResponse struct {
	response.CommonBase


}


// NewUpdateUFileTokenRequest will create request of UpdateUFileToken action.
func (c *UFileClient) NewUpdateUFileTokenRequest() *UpdateUFileTokenRequest {
    req := &UpdateUFileTokenRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}


/*
API: UpdateUFileToken


*/
func (c *UFileClient) UpdateUFileToken(req *UpdateUFileTokenRequest) (*UpdateUFileTokenResponse, error) {
	var err error
	var res UpdateUFileTokenResponse

	reqCopier := *req
    
    
    
    
    
    
    
    
    
    
    
    
    
	err = c.Client.InvokeAction("UpdateUFileToken", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}


