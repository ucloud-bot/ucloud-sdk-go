// Code is generated by ucloud-model, DO NOT EDIT IT.

package umedia

import (
	"github.com/ucloud/ucloud-sdk-go/ucloud/request"
	"github.com/ucloud/ucloud-sdk-go/ucloud/response"
)

// UMedia API Schema

// CreateCodecPattenRequest is request schema for CreateCodecPatten action
type CreateCodecPattenRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// 转码任务结束后，回调客户的url地址。
	CallbackUrl *string `required:"false"`

	// 音频码率，单位kbps，范围[16,192]，推荐使用48。
	DestAudioBitrate *string `required:"false"`

	// 音频声道数量。可选值为1（单声道）、2（双声道），推荐使用2（双声道）。
	DestAudioChannel *int `required:"false"`

	// 音频采样率，单位hz,可选值为22050、32000，44100，推荐使用44100。
	DestAudioSample *int `required:"false"`

	// 目标视频格式，可选值为mp4、flv、mpegts。
	DestFormat *string `required:"true"`

	// 目标视频的文件名后缀，长度不超过32个字符
	DestSuffix *string `required:"false"`

	// 视频码率，单位kbps,范围[200,4000]或者是0。如果为0，则表示由视频工厂输出自适应码率
	DestVideoBitrate *int `required:"true"`

	// 视频的编码类型
	DestVideoCodec *string `required:"false"`

	// 视频分辨率，格式为像素宽度x像素高度，例如1280x720。不传该字段则表示不改变分辨率
	DestVideoResolution *string `required:"false"`

	// 模版名称,长度不查过256个字节
	PattenName *string `required:"true"`
}

// CreateCodecPattenResponse is response schema for CreateCodecPatten action
type CreateCodecPattenResponse struct {
	response.CommonBase

	// 创建成功后生成的转码模版ID
	PattenId string
}

// NewCreateCodecPattenRequest will create request of CreateCodecPatten action.
func (c *UMediaClient) NewCreateCodecPattenRequest() *CreateCodecPattenRequest {
	req := &CreateCodecPattenRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateCodecPatten

创建转码模版
*/
func (c *UMediaClient) CreateCodecPatten(req *CreateCodecPattenRequest) (*CreateCodecPattenResponse, error) {
	var err error
	var res CreateCodecPattenResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateCodecPatten", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateCodecTaskByPattenRequest is request schema for CreateCodecTaskByPatten action
type CreateCodecTaskByPattenRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// 上传到ufile上文件的路径
	BaseDir *string `required:"false"`

	// 转码模版Id，单次提交支持最多3个转码模版。下标相同的转码模版、水印模版、片头片尾模版进行组合。
	CodecPattenId []string `required:"true"`

	// 存放转码后视频文件的bucket，需使用bucket全名，如：video.cn-bj.ufileos.com
	DestBucket *string `required:"true"`

	// 片头片尾模版Id
	HeadTailPattenId *string `required:"false"`

	// 原始视频地址，只支持http协议，不支持https以及其他协议。单次提交url数量最多为10条。
	Url []string `required:"true"`

	// 水印模版Id
	WatermarkPattenId *string `required:"false"`
}

// CreateCodecTaskByPattenResponse is response schema for CreateCodecTaskByPatten action
type CreateCodecTaskByPattenResponse struct {
	response.CommonBase

	// 生成的任务Id列表
	TaskIdList []TaskIdList

	// 生成的总的任务条数
	TotalTaskCount int
}

// NewCreateCodecTaskByPattenRequest will create request of CreateCodecTaskByPatten action.
func (c *UMediaClient) NewCreateCodecTaskByPattenRequest() *CreateCodecTaskByPattenRequest {
	req := &CreateCodecTaskByPattenRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateCodecTaskByPatten

使用模版创建转码任务
*/
func (c *UMediaClient) CreateCodecTaskByPatten(req *CreateCodecTaskByPattenRequest) (*CreateCodecTaskByPattenResponse, error) {
	var err error
	var res CreateCodecTaskByPattenResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateCodecTaskByPatten", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateFormatTaskRequest is request schema for CreateFormatTask action
type CreateFormatTaskRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// 上传文件的路径。DestBucket、BaseDir、目标文件名三个参数共同决定了转码后文件的下载url地址。
	BaseDir *string `required:"false"`

	// 任务结束后，回调客户的url地址。
	CallbackUrl *string `required:"false"`

	// 存放转码后视频文件的bucket，需使用bucket全名，如：video.cn-bj.ufileos.com
	DestBucket *string `required:"true"`

	// 目标文件的封装格式，支持mp4、flv、mpegts、m3u8四种。不传该参数，则默认为m3u8
	DestFormat *string `required:"false"`

	// 原始视频地址，只支持http协议，不支持https以及其他协议。单次提交url数量最多为10条。
	Url []string `required:"true"`

	// 视频的开始时间,时间单位为秒
	VideoBeginTime *int `required:"false"`

	// 视频的结束时间,时间单位为秒
	VideoEndTime *int `required:"false"`
}

// CreateFormatTaskResponse is response schema for CreateFormatTask action
type CreateFormatTaskResponse struct {
	response.CommonBase

	// 生成的任务Id列表
	TaskIdList []TaskIdList

	// 生成的总的任务条数
	TotalTaskCount int
}

// NewCreateFormatTaskRequest will create request of CreateFormatTask action.
func (c *UMediaClient) NewCreateFormatTaskRequest() *CreateFormatTaskRequest {
	req := &CreateFormatTaskRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateFormatTask

创建封装任务
*/
func (c *UMediaClient) CreateFormatTask(req *CreateFormatTaskRequest) (*CreateFormatTaskResponse, error) {
	var err error
	var res CreateFormatTaskResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateFormatTask", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateSnapTaskRequest is request schema for CreateSnapTask action
type CreateSnapTaskRequest struct {
	request.CommonBase

	// 上传文件的路径。DestBucket、BaseDir、目标文件名三个参数共同决定了图片文件的下载url地址。
	BaseDir *string `required:"false"`

	// 任务结束后，回调客户的url地址。
	CallbackUrl *string `required:"false"`

	// 存放转码后视频文件的bucket，需使用bucket全名，如：video.cn-bj.ufileos.com
	DestBucket *string `required:"true"`

	// Gif图片的播放速度，单位为帧/秒
	GifFrameRate *float64 `required:"false"`

	// 图片类型，支持jpg、png、gif
	ImageFormat *string `required:"true"`

	// 目标图片尺寸大小，格式为像素宽度x像素高度，例如1280x720。不传此参数则表示使用原始视频尺寸。
	ImageSize *string `required:"false"`

	// 截图模式为single时表示截图时间点，periodic时表示时间间隔
	SnapTime *int `required:"true"`

	// 截图模式，single表示确定时间点单张截图，periodic表示周期截图, dynamic表示为gif截图
	SnapType *string `required:"true"`

	// 原始视频地址，只支持http协议，不支持https以及其他协议。单次提交url数量最多为10条。
	Url []string `required:"true"`
}

// CreateSnapTaskResponse is response schema for CreateSnapTask action
type CreateSnapTaskResponse struct {
	response.CommonBase

	// 生成的任务Id列表
	TaskIdList []TaskIdList

	// 生成的总的任务条数
	TotalTaskCount int
}

// NewCreateSnapTaskRequest will create request of CreateSnapTask action.
func (c *UMediaClient) NewCreateSnapTaskRequest() *CreateSnapTaskRequest {
	req := &CreateSnapTaskRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateSnapTask

创建截图任务
*/
func (c *UMediaClient) CreateSnapTask(req *CreateSnapTaskRequest) (*CreateSnapTaskResponse, error) {
	var err error
	var res CreateSnapTaskResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateSnapTask", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateWatermarkPattenRequest is request schema for CreateWatermarkPatten action
type CreateWatermarkPattenRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// 转码任务结束后，回调客户的url地址。
	CallbackUrl *string `required:"false"`

	// 字体颜色，可使用颜色英文单词，如red、green来表示，也可使用RGB十六进制颜色，比如FF0000
	FontColor *string `required:"false"`

	// 字体大小，单位：磅，取值范围[8-48]
	FontSize *int `required:"false"`

	// 字体类型,中文支持仿宋、黑体、楷体、宋体、微软雅黑，英文字体支持arial、verdana、georgia、times new roman。注意如果水印内容含有中文，则必须使用中文字体。
	FontType *string `required:"false"`

	// 图片水印的url地址
	ImageUrl *string `required:"false"`

	// 水印离最近的水平边线占整个视频宽度的百分比，取值[0-49]
	PaddingX *int `required:"true"`

	// 水印离最近的垂直边线占整个视频高度的百分比,取值[0-49]
	PaddingY *int `required:"true"`

	// 模版名称,长度不查过256个字节
	PattenName *string `required:"true"`

	// 水印的参考位置，topleft、topright、center、bottomleft、bottomright分别表示左上、右上、居中、左下、右下
	Position *string `required:"true"`

	// 文字水印的内容
	TextContent *string `required:"false"`

	// image表示图片水印，text表示文字水印
	WaterMarkType *string `required:"true"`
}

// CreateWatermarkPattenResponse is response schema for CreateWatermarkPatten action
type CreateWatermarkPattenResponse struct {
	response.CommonBase

	// 创建成功后生成的转码模版ID
	PattenId string
}

// NewCreateWatermarkPattenRequest will create request of CreateWatermarkPatten action.
func (c *UMediaClient) NewCreateWatermarkPattenRequest() *CreateWatermarkPattenRequest {
	req := &CreateWatermarkPattenRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateWatermarkPatten

创建水印模版
*/
func (c *UMediaClient) CreateWatermarkPatten(req *CreateWatermarkPattenRequest) (*CreateWatermarkPattenResponse, error) {
	var err error
	var res CreateWatermarkPattenResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateWatermarkPatten", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteCodecPattenRequest is request schema for DeleteCodecPatten action
type DeleteCodecPattenRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// 模版Id
	PattenId *string `required:"true"`
}

// DeleteCodecPattenResponse is response schema for DeleteCodecPatten action
type DeleteCodecPattenResponse struct {
	response.CommonBase
}

// NewDeleteCodecPattenRequest will create request of DeleteCodecPatten action.
func (c *UMediaClient) NewDeleteCodecPattenRequest() *DeleteCodecPattenRequest {
	req := &DeleteCodecPattenRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteCodecPatten

删除转码模版
*/
func (c *UMediaClient) DeleteCodecPatten(req *DeleteCodecPattenRequest) (*DeleteCodecPattenResponse, error) {
	var err error
	var res DeleteCodecPattenResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteCodecPatten", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteWatermarkPattenRequest is request schema for DeleteWatermarkPatten action
type DeleteWatermarkPattenRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// 模版Id
	PattenId *string `required:"true"`
}

// DeleteWatermarkPattenResponse is response schema for DeleteWatermarkPatten action
type DeleteWatermarkPattenResponse struct {
	response.CommonBase
}

// NewDeleteWatermarkPattenRequest will create request of DeleteWatermarkPatten action.
func (c *UMediaClient) NewDeleteWatermarkPattenRequest() *DeleteWatermarkPattenRequest {
	req := &DeleteWatermarkPattenRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteWatermarkPatten

删除水印模版
*/
func (c *UMediaClient) DeleteWatermarkPatten(req *DeleteWatermarkPattenRequest) (*DeleteWatermarkPattenResponse, error) {
	var err error
	var res DeleteWatermarkPattenResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteWatermarkPatten", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// GetCodecPattenListRequest is request schema for GetCodecPattenList action
type GetCodecPattenListRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

}

// GetCodecPattenListResponse is response schema for GetCodecPattenList action
type GetCodecPattenListResponse struct {
	response.CommonBase

	// 客户定制的转码模版列表，详细结构见下表
	CustomizedPattenList []CodecPattenListNode

	// 系统预制的转码模版列表,详细结构见下表
	DefaultPattenList []CodecPattenListNode
}

// NewGetCodecPattenListRequest will create request of GetCodecPattenList action.
func (c *UMediaClient) NewGetCodecPattenListRequest() *GetCodecPattenListRequest {
	req := &GetCodecPattenListRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetCodecPattenList

获取转码模版列表
*/
func (c *UMediaClient) GetCodecPattenList(req *GetCodecPattenListRequest) (*GetCodecPattenListResponse, error) {
	var err error
	var res GetCodecPattenListResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetCodecPattenList", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// GetCodecTaskDetailRequest is request schema for GetCodecTaskDetail action
type GetCodecTaskDetailRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// 任务的id号
	TaskId *string `required:"true"`
}

// GetCodecTaskDetailResponse is response schema for GetCodecTaskDetail action
type GetCodecTaskDetailResponse struct {
	response.CommonBase

	// 任务完成后回调客户的url地址。
	CallbackUrl string

	// 转码清晰度：superdefinition、highdefinition、mediumdefinition、lowdefinition，分别对应计费的4种规格。只有当任务状态为处理完成时，该参数有意义，其他状态该参数为空字符串。
	CodecLevel string

	// CodecPattenDetail类型
	CodecPattenDetail CodecPattenDetail

	// 任务创建时间，单位：Unix时间戳
	CreateTime int

	// 输出文件的存储空间
	DestBucket string

	// 输出视频封装格式
	DestFormat string

	// 输出文件名
	DestVideoName string

	// 视频时长，单位：秒。只有当任务状态为处理完成时，该参数有意义，其他状态该参数为0。
	Duration int

	// 任务完成时间，单位：Unix时间戳。当任务状态为排队中或者处理中时，该参数为0。
	FinishTime int

	// 原始视频url地址
	SrcUrl string

	// 任务状态：waiting、processing、finished、failed，分别表示排队中，处理中，处理完成，处理失败。
	Status string

	// 任务ID
	TaskId string

	// WatermarkDetail类型
	WatermarkDetail WatermarkDetail
}

// NewGetCodecTaskDetailRequest will create request of GetCodecTaskDetail action.
func (c *UMediaClient) NewGetCodecTaskDetailRequest() *GetCodecTaskDetailRequest {
	req := &GetCodecTaskDetailRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetCodecTaskDetail

获取转码任务详情
*/
func (c *UMediaClient) GetCodecTaskDetail(req *GetCodecTaskDetailRequest) (*GetCodecTaskDetailResponse, error) {
	var err error
	var res GetCodecTaskDetailResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetCodecTaskDetail", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// GetCodecTaskListRequest is request schema for GetCodecTaskList action
type GetCodecTaskListRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// 查询的开始时间，单位：unix时间戳。如果不传，若没有传结束时间，则为当前时间的前七天。否则为结束时间的前七天。
	BeginTime *int `required:"false"`

	// 查询的结束时间，单位：unix时间戳。如果不传，若没有传开始时间，则为当前时间，否则为开始时间的后七天。EndTime必须为当前时间往前一个月内，也就是支持一个月内的任务查询。
	EndTime *int `required:"false"`
}

// GetCodecTaskListResponse is response schema for GetCodecTaskList action
type GetCodecTaskListResponse struct {
	response.CommonBase

	// 任务信息列表
	TaskList []CodecPattenInfo
}

// NewGetCodecTaskListRequest will create request of GetCodecTaskList action.
func (c *UMediaClient) NewGetCodecTaskListRequest() *GetCodecTaskListRequest {
	req := &GetCodecTaskListRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetCodecTaskList

获取转码任务列表
*/
func (c *UMediaClient) GetCodecTaskList(req *GetCodecTaskListRequest) (*GetCodecTaskListResponse, error) {
	var err error
	var res GetCodecTaskListResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetCodecTaskList", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// GetCodecTotalStatRequest is request schema for GetCodecTotalStat action
type GetCodecTotalStatRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// 查询的开始时间，单位：unix时间戳。如果不传，若没有传结束时间，则为当前时间的前七天。否则为结束时间的前七天。
	BeginTime *int `required:"false"`

	// 查询的结束时间，单位：unix时间戳。如果不传，若没有传开始时间，则为当前时间，否则为开始时间的后七天。EndTime必须为当前时间往前一个月内，也就是支持一个月内的任务查询。
	EndTime *int `required:"false"`
}

// GetCodecTotalStatResponse is response schema for GetCodecTotalStat action
type GetCodecTotalStatResponse struct {
	response.CommonBase

	// 转码使用量数据表
	StatSet []CodecStatInfo
}

// NewGetCodecTotalStatRequest will create request of GetCodecTotalStat action.
func (c *UMediaClient) NewGetCodecTotalStatRequest() *GetCodecTotalStatRequest {
	req := &GetCodecTotalStatRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetCodecTotalStat

获取转码使用量统计
*/
func (c *UMediaClient) GetCodecTotalStat(req *GetCodecTotalStatRequest) (*GetCodecTotalStatResponse, error) {
	var err error
	var res GetCodecTotalStatResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetCodecTotalStat", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// GetFormatTaskDetailRequest is request schema for GetFormatTaskDetail action
type GetFormatTaskDetailRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// 查询的截图任务ID
	TaskId *string `required:"true"`
}

// GetFormatTaskDetailResponse is response schema for GetFormatTaskDetail action
type GetFormatTaskDetailResponse struct {
	response.CommonBase

	// 任务创建时间，单位：Unix时间戳
	CreateTime int

	// 存储图片的ufile的bucket名称
	DestBucket string

	// 输出视频封装格式
	DestVideoFormat string

	// 输出视频文件名
	DestVideoName string

	// 视频时长
	Duration int

	// 任务结束时间，单位：Unix时间戳。只有任务状态为处理完成时值才有意义，默认为0。
	FinishTime int

	// 原始视频url地址
	SrcUrl string

	// 任务状态：waiting、processing、finished、failed，分别表示排队中，处理中，处理完成，处理失败。
	Status string
}

// NewGetFormatTaskDetailRequest will create request of GetFormatTaskDetail action.
func (c *UMediaClient) NewGetFormatTaskDetailRequest() *GetFormatTaskDetailRequest {
	req := &GetFormatTaskDetailRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetFormatTaskDetail

获取封装任务详情
*/
func (c *UMediaClient) GetFormatTaskDetail(req *GetFormatTaskDetailRequest) (*GetFormatTaskDetailResponse, error) {
	var err error
	var res GetFormatTaskDetailResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetFormatTaskDetail", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// GetFormatTaskListRequest is request schema for GetFormatTaskList action
type GetFormatTaskListRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// 查询的开始时间，单位：unix时间戳。如果不传，若没有传结束时间，则为当前时间的前七天。否则为结束时间的前七天。
	BeginTime *int `required:"false"`

	// 查询的结束时间，单位：unix时间戳。如果不传，若没有传开始时间，则为当前时间，否则为开始时间的后七天。EndTime必须为当前时间往前一个月内，也就是支持一个月内的任务查询。
	EndTime *int `required:"false"`
}

// GetFormatTaskListResponse is response schema for GetFormatTaskList action
type GetFormatTaskListResponse struct {
	response.CommonBase

	// 任务列表
	TaskList []FormatTaskInfo
}

// NewGetFormatTaskListRequest will create request of GetFormatTaskList action.
func (c *UMediaClient) NewGetFormatTaskListRequest() *GetFormatTaskListRequest {
	req := &GetFormatTaskListRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetFormatTaskList

获取封装任务列表
*/
func (c *UMediaClient) GetFormatTaskList(req *GetFormatTaskListRequest) (*GetFormatTaskListResponse, error) {
	var err error
	var res GetFormatTaskListResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetFormatTaskList", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// GetFormatTotalStatRequest is request schema for GetFormatTotalStat action
type GetFormatTotalStatRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// 查询的开始时间，单位：unix时间戳。如果不传，若没有传结束时间，则为当前时间的前七天。否则为结束时间的前七天。
	BeginTime *int `required:"false"`

	// 查询的结束时间，单位：unix时间戳。如果不传，若没有传开始时间，则为当前时间，否则为开始时间的后七天。EndTime必须为当前时间往前一个月内，也就是支持一个月内的任务查询。
	EndTime *int `required:"false"`
}

// GetFormatTotalStatResponse is response schema for GetFormatTotalStat action
type GetFormatTotalStatResponse struct {
	response.CommonBase

	// 状态列表
	StatSet []FormatStatInfo
}

// NewGetFormatTotalStatRequest will create request of GetFormatTotalStat action.
func (c *UMediaClient) NewGetFormatTotalStatRequest() *GetFormatTotalStatRequest {
	req := &GetFormatTotalStatRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetFormatTotalStat

获取转封装使用量统计
*/
func (c *UMediaClient) GetFormatTotalStat(req *GetFormatTotalStatRequest) (*GetFormatTotalStatResponse, error) {
	var err error
	var res GetFormatTotalStatResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetFormatTotalStat", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// GetSnapTaskDetailRequest is request schema for GetSnapTaskDetail action
type GetSnapTaskDetailRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// 查询的截图任务ID
	TaskId *string `required:"true"`
}

// GetSnapTaskDetailResponse is response schema for GetSnapTaskDetail action
type GetSnapTaskDetailResponse struct {
	response.CommonBase

	// 任务创建时间，单位：Unix时间戳
	CreateTime int

	// 存储图片的ufile的bucket名称
	DestBucket string

	// 任务结束时间，单位：Unix时间戳。只有任务状态为处理完成时值才有意义，默认为0。
	FinishTime int

	// 截图张数，只有任务状态处理完成时值才有意义。
	ImageCount int

	// 图片格式类型
	ImageFormat string

	// 文件名列表
	ImageList string

	// 截图输出的文件名（这里指基础图片的文件名，不包括后缀）
	ImageName string

	// 截图模式，single表示确定时间点单张截图，periodic表示周期截图,dynamic表示为gif截图
	SnapType string

	// 原始视频url地址
	SrcUrl string

	// 任务状态：waiting、processing、finished、failed，分别表示排队中，处理中，处理完成，处理失败。
	Status string
}

// NewGetSnapTaskDetailRequest will create request of GetSnapTaskDetail action.
func (c *UMediaClient) NewGetSnapTaskDetailRequest() *GetSnapTaskDetailRequest {
	req := &GetSnapTaskDetailRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetSnapTaskDetail

获取截图任务详情
*/
func (c *UMediaClient) GetSnapTaskDetail(req *GetSnapTaskDetailRequest) (*GetSnapTaskDetailResponse, error) {
	var err error
	var res GetSnapTaskDetailResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetSnapTaskDetail", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// GetSnapTaskListRequest is request schema for GetSnapTaskList action
type GetSnapTaskListRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// 查询的开始时间，单位：unix时间戳。如果不传，若没有传结束时间，则为当前时间的前七天。否则为结束时间的前七天。
	BeginTime *int `required:"false"`

	// 查询的结束时间，单位：unix时间戳。如果不传，若没有传开始时间，则为当前时间，否则为开始时间的后七天。EndTime必须为当前时间往前一个月内，也就是支持一个月内的任务查询。
	EndTime *int `required:"false"`
}

// GetSnapTaskListResponse is response schema for GetSnapTaskList action
type GetSnapTaskListResponse struct {
	response.CommonBase

	// 任务列表
	TaskList []SnapTaskInfo
}

// NewGetSnapTaskListRequest will create request of GetSnapTaskList action.
func (c *UMediaClient) NewGetSnapTaskListRequest() *GetSnapTaskListRequest {
	req := &GetSnapTaskListRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetSnapTaskList

获取截图任务列表
*/
func (c *UMediaClient) GetSnapTaskList(req *GetSnapTaskListRequest) (*GetSnapTaskListResponse, error) {
	var err error
	var res GetSnapTaskListResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetSnapTaskList", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// GetSnapTotalStatRequest is request schema for GetSnapTotalStat action
type GetSnapTotalStatRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// 查询的开始时间，单位：unix时间戳。如果不传，若没有传结束时间，则为当前时间的前七天。否则为结束时间的前七天。
	BeginTime *int `required:"false"`

	// 查询的结束时间，单位：unix时间戳。如果不传，若没有传开始时间，则为当前时间，否则为开始时间的后七天。EndTime必须为当前时间往前一个月内，也就是支持一个月内的任务查询。
	EndTime *int `required:"false"`
}

// GetSnapTotalStatResponse is response schema for GetSnapTotalStat action
type GetSnapTotalStatResponse struct {
	response.CommonBase

	// 状态列表
	StatSet []SnapStatInfo
}

// NewGetSnapTotalStatRequest will create request of GetSnapTotalStat action.
func (c *UMediaClient) NewGetSnapTotalStatRequest() *GetSnapTotalStatRequest {
	req := &GetSnapTotalStatRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetSnapTotalStat

获取截图使用量统计
*/
func (c *UMediaClient) GetSnapTotalStat(req *GetSnapTotalStatRequest) (*GetSnapTotalStatResponse, error) {
	var err error
	var res GetSnapTotalStatResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetSnapTotalStat", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// GetWaterMarkPattenListRequest is request schema for GetWaterMarkPattenList action
type GetWaterMarkPattenListRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

}

// GetWaterMarkPattenListResponse is response schema for GetWaterMarkPattenList action
type GetWaterMarkPattenListResponse struct {
	response.CommonBase

	// 水印模版列表,详细结构见下表
	CustomizedPattenList []WaterMarkPattenListNode

	// 水印模版列表,详细结构见下表
	DefaultPattenList []WaterMarkPattenListNode
}

// NewGetWaterMarkPattenListRequest will create request of GetWaterMarkPattenList action.
func (c *UMediaClient) NewGetWaterMarkPattenListRequest() *GetWaterMarkPattenListRequest {
	req := &GetWaterMarkPattenListRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetWaterMarkPattenList

获取水印模版列表
*/
func (c *UMediaClient) GetWaterMarkPattenList(req *GetWaterMarkPattenListRequest) (*GetWaterMarkPattenListResponse, error) {
	var err error
	var res GetWaterMarkPattenListResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetWaterMarkPattenList", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UpdateCodecPattenRequest is request schema for UpdateCodecPatten action
type UpdateCodecPattenRequest struct {
	request.CommonBase

	// 转码任务结束后，回调客户的url地址。
	CallbackUrl *string `required:"false"`

	// 音频码率，单位kbps，范围[16,192]，默认使用48。
	DestAudioBitrate *int `required:"false"`

	// 音频声道数量。可选值为1（单声道）、2（双声道），默认使用2（双声道）。
	DestAudioChannel *string `required:"false"`

	// 音频采样率，单位hz,可选值为22050、32000，44100，默认使用44100
	DestAudioSample *int `required:"false"`

	// 目标视频格式，可选值为mp4、flv、mpegts。
	DestFormat *string `required:"true"`

	// 目标视频的文件名后缀，长度不超过32个字符
	DestSuffix *string `required:"true"`

	// 视频码率，单位kbps,范围[200,4000]或者是0。如果为0，则表示由视频工厂输出自适应码率
	DestVideoBitrate *int `required:"true"`

	// 视频编码类型
	DestVideoCodec *string `required:"false"`

	// 视频分辨率，格式为像素宽度x像素高度，例如1280x720。不传该字段则表示不改变分辨率
	DestVideoResolution *string `required:"false"`

	// 模板ID
	PattenId *string `required:"true"`

	// 模版名称,长度不查过256个字节
	PattenName *string `required:"true"`
}

// UpdateCodecPattenResponse is response schema for UpdateCodecPatten action
type UpdateCodecPattenResponse struct {
	response.CommonBase
}

// NewUpdateCodecPattenRequest will create request of UpdateCodecPatten action.
func (c *UMediaClient) NewUpdateCodecPattenRequest() *UpdateCodecPattenRequest {
	req := &UpdateCodecPattenRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdateCodecPatten

更新转码模版
*/
func (c *UMediaClient) UpdateCodecPatten(req *UpdateCodecPattenRequest) (*UpdateCodecPattenResponse, error) {
	var err error
	var res UpdateCodecPattenResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdateCodecPatten", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UpdateWatermarkPattenRequest is request schema for UpdateWatermarkPatten action
type UpdateWatermarkPattenRequest struct {
	request.CommonBase

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// 字体颜色，可使用颜色英文单词，如red、green来表示，也可使用RGB十六进制颜色，比如FF0000
	FontColor *string `required:"false"`

	// 字体大小，单位：磅，取值范围[8-48]。
	FontSize *int `required:"false"`

	// 字体类型,中文支持仿宋、黑体、楷体、宋体、微软雅黑，英文字体支持arial、verdana、georgia、times new roman。注意如果水印内容含有中文，则必须使用中文字体。
	FontType *string `required:"false"`

	// 图片水印的url地址
	ImageUrl *string `required:"false"`

	// 水印离最近的水平边线占整个视频宽度的百分比，取值[0-49]
	PaddingX *int `required:"true"`

	// 水印离最近的垂直边线占整个视频高度的百分比,取值[0-49]
	PaddingY *int `required:"true"`

	// 模版Id
	PattenId *string `required:"true"`

	// 模版名称,长度不查过256个字节
	PattenName *string `required:"true"`

	// 水印的参考位置，topleft、topright、center、bottomleft、bottomright分别表示左上、右上、居中、左下、右下
	Position *string `required:"true"`

	// 文字水印的内容
	TextContent *string `required:"false"`

	// image表示图片水印，text表示文字水印
	WaterMarkType *string `required:"true"`
}

// UpdateWatermarkPattenResponse is response schema for UpdateWatermarkPatten action
type UpdateWatermarkPattenResponse struct {
	response.CommonBase
}

// NewUpdateWatermarkPattenRequest will create request of UpdateWatermarkPatten action.
func (c *UMediaClient) NewUpdateWatermarkPattenRequest() *UpdateWatermarkPattenRequest {
	req := &UpdateWatermarkPattenRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdateWatermarkPatten

更新水印模版
*/
func (c *UMediaClient) UpdateWatermarkPatten(req *UpdateWatermarkPattenRequest) (*UpdateWatermarkPattenResponse, error) {
	var err error
	var res UpdateWatermarkPattenResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdateWatermarkPatten", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}
