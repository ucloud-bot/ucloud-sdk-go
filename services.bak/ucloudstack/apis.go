// Code is generated by ucloud-model, DO NOT EDIT IT.

package ucloudstack

import (
	"github.com/ucloud/ucloud-sdk-go/ucloud/request"
	"github.com/ucloud/ucloud-sdk-go/ucloud/response"
)

// UCloudStack API Schema

// AllocateEIPRequest is request schema for AllocateEIP action
type AllocateEIPRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn,表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 带宽，默认值1，默认范围1~100
	Bandwidth *int `required:"true"`

	// 计费模式。枚举值：Dynamic，表示小时；Month，表示月；Year，表示年；
	ChargeType *string `required:"true"`

	// 名称
	Name *string `required:"true"`

	// 线路。目前支持Bgp
	OperatorName *string `required:"true"`

	// 购买时长。默认值1。小时不生效，月范围【1，11】，年范围【1，5】。
	Quantity *int `required:"false"`
}

// AllocateEIPResponse is response schema for AllocateEIP action
type AllocateEIPResponse struct {
	response.CommonBase

	// 申请的EIP的ID
	EIPID string

	// 返回信息描述。
	Message string
}

// NewAllocateEIPRequest will create request of AllocateEIP action.
func (c *UCloudStackClient) NewAllocateEIPRequest() *AllocateEIPRequest {
	req := &AllocateEIPRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: AllocateEIP

申请UCloudStack外网IP
*/
func (c *UCloudStackClient) AllocateEIP(req *AllocateEIPRequest) (*AllocateEIPResponse, error) {
	var err error
	var res AllocateEIPResponse

	reqCopier := *req

	err = c.Client.InvokeAction("AllocateEIP", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// AttachDiskRequest is request schema for AttachDisk action
type AttachDiskRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn,表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 硬盘ID
	DiskID *string `required:"true"`

	// 绑定的资源ID
	ResourceID *string `required:"true"`

	// 绑定的资源类型，枚举值：VM，标识虚拟机
	ResourceType *string `required:"true"`
}

// AttachDiskResponse is response schema for AttachDisk action
type AttachDiskResponse struct {
	response.CommonBase

	// 返回信息描述。
	Message string
}

// NewAttachDiskRequest will create request of AttachDisk action.
func (c *UCloudStackClient) NewAttachDiskRequest() *AttachDiskRequest {
	req := &AttachDiskRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: AttachDisk

绑定UClouStack硬盘
*/
func (c *UCloudStackClient) AttachDisk(req *AttachDiskRequest) (*AttachDiskResponse, error) {
	var err error
	var res AttachDiskResponse

	reqCopier := *req

	err = c.Client.InvokeAction("AttachDisk", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// BindAlarmTemplateRequest is request schema for BindAlarmTemplate action
type BindAlarmTemplateRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值： cn，表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 告警模板ID
	AlarmTemplateID *string `required:"true"`

	// 【数组】告警模板ID。调用方式举例：ResourceIDs.0=“one-id”、ResourceIDs.1=“two-id”。
	ResourceIDs []string `required:"true"`

	// 资源类型。VM：虚拟机, LB:负载均衡, NATGW：nat网关;EIP:弹性IP
	ResourceType *string `required:"true"`
}

// BindAlarmTemplateResponse is response schema for BindAlarmTemplate action
type BindAlarmTemplateResponse struct {
	response.CommonBase

	// 返回信息描述
	Message string
}

// NewBindAlarmTemplateRequest will create request of BindAlarmTemplate action.
func (c *UCloudStackClient) NewBindAlarmTemplateRequest() *BindAlarmTemplateRequest {
	req := &BindAlarmTemplateRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: BindAlarmTemplate

绑定告警模板
*/
func (c *UCloudStackClient) BindAlarmTemplate(req *BindAlarmTemplateRequest) (*BindAlarmTemplateResponse, error) {
	var err error
	var res BindAlarmTemplateResponse

	reqCopier := *req

	err = c.Client.InvokeAction("BindAlarmTemplate", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// BindEIPRequest is request schema for BindEIP action
type BindEIPRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn,表示中国；中国
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 外网IP的ID
	EIPID *string `required:"true"`

	// 资源ID
	ResourceID *string `required:"true"`

	// 资源类型。VM：虚拟机, LB:负载均衡, NATGW：nat网关
	ResourceType *string `required:"true"`
}

// BindEIPResponse is response schema for BindEIP action
type BindEIPResponse struct {
	response.CommonBase

	// 返回描述
	Message string
}

// NewBindEIPRequest will create request of BindEIP action.
func (c *UCloudStackClient) NewBindEIPRequest() *BindEIPRequest {
	req := &BindEIPRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: BindEIP

绑定UCoudStack外网IP
*/
func (c *UCloudStackClient) BindEIP(req *BindEIPRequest) (*BindEIPResponse, error) {
	var err error
	var res BindEIPResponse

	reqCopier := *req

	err = c.Client.InvokeAction("BindEIP", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CloneDiskRequest is request schema for CloneDisk action
type CloneDiskRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn,表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 计费模式。枚举值：Dynamic，表示小时；Month，表示月；Year，表示年；
	ChargeType *string `required:"true"`

	// 名称
	Name *string `required:"true"`

	// 购买时长。默认值1。小时不生效，月范围【1，11】，年范围【1，5】。
	Quantity *int `required:"false"`

	// 源硬盘ID
	SrcID *string `required:"true"`
}

// CloneDiskResponse is response schema for CloneDisk action
type CloneDiskResponse struct {
	response.CommonBase

	// 克隆出的硬盘ID
	DiskID string

	// 返回信息描述。
	Message string
}

// NewCloneDiskRequest will create request of CloneDisk action.
func (c *UCloudStackClient) NewCloneDiskRequest() *CloneDiskRequest {
	req := &CloneDiskRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: CloneDisk

克隆UCloudStack硬盘
*/
func (c *UCloudStackClient) CloneDisk(req *CloneDiskRequest) (*CloneDiskResponse, error) {
	var err error
	var res CloneDiskResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CloneDisk", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateDiskRequest is request schema for CreateDisk action
type CreateDiskRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn,表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 计费模式。枚举值：Dynamic，表示小时；Month，表示月；Year，表示年；
	ChargeType *string `required:"true"`

	// 磁盘大小
	DiskSpace *int `required:"true"`

	// 磁盘名称
	Name *string `required:"true"`

	// 购买时长。默认值1。小时不生效，月范围【1，11】，年范围【1，5】。
	Quantity *int `required:"false"`

	// 磁盘类型。例如：Normal,SSD
	SetType *string `required:"true"`
}

// CreateDiskResponse is response schema for CreateDisk action
type CreateDiskResponse struct {
	response.CommonBase

	// 创建的磁盘ID
	DiskID string

	// 返回信息描述。
	Message string
}

// NewCreateDiskRequest will create request of CreateDisk action.
func (c *UCloudStackClient) NewCreateDiskRequest() *CreateDiskRequest {
	req := &CreateDiskRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: CreateDisk

创建UCloudStack硬盘
*/
func (c *UCloudStackClient) CreateDisk(req *CreateDiskRequest) (*CreateDiskResponse, error) {
	var err error
	var res CreateDiskResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateDisk", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateSecurityGroupRequest is request schema for CreateSecurityGroup action
type CreateSecurityGroupRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值： cn，表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 名称;
	Name *string `required:"true"`

	// 描述;
	Remark *string `required:"false"`

	// 【数组】安全组规则。输入有效的规则，调用方式举例：Rule.0=“TCP|23|0.0.0.0/0|ACCEPT|HIGH|1”、Rule.1=“TCP|55|0.0.0.0/0|ACCEPT|HIGH|1”
	Rule []string `required:"true"`
}

// CreateSecurityGroupResponse is response schema for CreateSecurityGroup action
type CreateSecurityGroupResponse struct {
	response.CommonBase

	// 返回信息描述；
	Message string

	// 创建的安全组ID
	SGID string
}

// NewCreateSecurityGroupRequest will create request of CreateSecurityGroup action.
func (c *UCloudStackClient) NewCreateSecurityGroupRequest() *CreateSecurityGroupRequest {
	req := &CreateSecurityGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: CreateSecurityGroup

创建安全组
*/
func (c *UCloudStackClient) CreateSecurityGroup(req *CreateSecurityGroupRequest) (*CreateSecurityGroupResponse, error) {
	var err error
	var res CreateSecurityGroupResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateSecurityGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateSecurityGroupRuleRequest is request schema for CreateSecurityGroupRule action
type CreateSecurityGroupRuleRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值： cn，表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 【数组】安全组规则。输入有效的规则，调用方式举例：Rule.0=“TCP|23|0.0.0.0/0|ACCEPT|HIGH|1”、Rule.1=“TCP|55|0.0.0.0/0|ACCEPT|HIGH|1”
	Rules []string `required:"true"`

	// 安全组ID
	SGID *string `required:"true"`
}

// CreateSecurityGroupRuleResponse is response schema for CreateSecurityGroupRule action
type CreateSecurityGroupRuleResponse struct {
	response.CommonBase

	// 返回信息描述；
	Message string

	// 创建的安全组规则ID
	SGRuleID string
}

// NewCreateSecurityGroupRuleRequest will create request of CreateSecurityGroupRule action.
func (c *UCloudStackClient) NewCreateSecurityGroupRuleRequest() *CreateSecurityGroupRuleRequest {
	req := &CreateSecurityGroupRuleRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: CreateSecurityGroupRule

创建安全组规则
*/
func (c *UCloudStackClient) CreateSecurityGroupRule(req *CreateSecurityGroupRuleRequest) (*CreateSecurityGroupRuleResponse, error) {
	var err error
	var res CreateSecurityGroupRuleResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateSecurityGroupRule", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateSubnetRequest is request schema for CreateSubnet action
type CreateSubnetRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值： cn，表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 名称;
	Name *string `required:"true"`

	// 网段。列如：10.0.0.0/16；
	Network *string `required:"true"`

	// 描述;
	Remark *string `required:"false"`

	// 所属VPCID
	VPCID *string `required:"true"`
}

// CreateSubnetResponse is response schema for CreateSubnet action
type CreateSubnetResponse struct {
	response.CommonBase

	// 返回信息描述；
	Message string

	// 创建Subnet的ID；
	SubnetID string
}

// NewCreateSubnetRequest will create request of CreateSubnet action.
func (c *UCloudStackClient) NewCreateSubnetRequest() *CreateSubnetRequest {
	req := &CreateSubnetRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: CreateSubnet

创建子网
*/
func (c *UCloudStackClient) CreateSubnet(req *CreateSubnetRequest) (*CreateSubnetResponse, error) {
	var err error
	var res CreateSubnetResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateSubnet", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateUserRequest is request schema for CreateUser action
type CreateUserRequest struct {
	request.CommonBase

	// 账号密码。
	PassWord *string `required:"true"`

	// 账号邮箱。
	UserEmail *string `required:"true"`
}

// CreateUserResponse is response schema for CreateUser action
type CreateUserResponse struct {
	response.CommonBase

	// 返回信息描述。
	Message string

	// 账户ID
	UserID int
}

// NewCreateUserRequest will create request of CreateUser action.
func (c *UCloudStackClient) NewCreateUserRequest() *CreateUserRequest {
	req := &CreateUserRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: CreateUser

管理员添加账号
*/
func (c *UCloudStackClient) CreateUser(req *CreateUserRequest) (*CreateUserResponse, error) {
	var err error
	var res CreateUserResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateUser", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateVMInstanceRequest is request schema for CreateVMInstance action
type CreateVMInstanceRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn,表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 系统盘类型。枚举值：Normal，表示普通；SSD，表示SSD；
	BootDiskSetType *string `required:"true"`

	// CPU个数，如1，2，4，8，16，32，64等。
	CPU *int `required:"true"`

	// 计费模式。枚举值：Dynamic，表示小时；Month，表示月；Year，表示年；
	ChargeType *string `required:"true"`

	// 数据盘类型。枚举值：Normal，表示普通；SSD，表示SSD；
	DataDiskSetType *string `required:"true"`

	// 数据盘大小，单位 GB。默认值为0。范围：【0，8000】，步长10。
	DataDiskSpace *int `required:"false"`

	// GPU 卡核心的占用个数。枚举值：【1,2,4】。GPU与CPU、内存大小关系：CPU个数>=4*GPU个数，同时内存与CPU规格匹配.
	GPU *int `required:"false"`

	// 镜像 ID。基础镜像 ID 或者自制镜像 ID。如：cn-image-centos-74。
	ImageID *string `required:"true"`

	// 指定内网IP。输入有效的指定内网 IP。默认为系统自动分配内网 IP。
	InternalIP *string `required:"false"`

	// 内网安全组 ID。输入“有效”状态的安全组的ID。
	LANSGID *string `required:"false"`

	// 内存容量，如1024，2048，4096，8192，16384，32768，65535等。
	Memory *int `required:"true"`

	// 虚拟机名称。可输入如：myVM。名称只能包含中英文、数字以及- _ .且1-30个字符。
	Name *string `required:"true"`

	// 密码。可输入如：ucloud.cn。密码长度限6-30个字符；需要同时包含两项或以上（大写字母/小写字母/数字/特殊符号)；windows不能包含用户名（administrator）中超过2个连续字符的部分。
	Password *string `required:"true"`

	// 购买时长。默认值1。小时不生效，月范围【1，11】，年范围【1，5】。
	Quantity *int `required:"false"`

	// 子网 ID。
	SubnetID *string `required:"true"`

	// 机型。枚举值：Normal，表示普通；SSD，表示SSD；
	VMType *string `required:"true"`

	// VPC ID。
	VPCID *string `required:"true"`

	// 外网安全组 ID。输入“有效”状态的安全组的ID。
	WANSGID *string `required:"true"`
}

// CreateVMInstanceResponse is response schema for CreateVMInstance action
type CreateVMInstanceResponse struct {
	response.CommonBase

	// 返回信息描述。
	Message string

	// 返回创建虚拟机的 ID 数组。
	VMID string
}

// NewCreateVMInstanceRequest will create request of CreateVMInstance action.
func (c *UCloudStackClient) NewCreateVMInstanceRequest() *CreateVMInstanceRequest {
	req := &CreateVMInstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: CreateVMInstance

创建UCloudStack虚拟机
*/
func (c *UCloudStackClient) CreateVMInstance(req *CreateVMInstanceRequest) (*CreateVMInstanceResponse, error) {
	var err error
	var res CreateVMInstanceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateVMInstance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// CreateVPCRequest is request schema for CreateVPC action
type CreateVPCRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值： cn，表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 名称;
	Name *string `required:"true"`

	// 网段。例如：10.0.0.0/16；
	Network *string `required:"true"`

	// 描述;
	Remark *string `required:"false"`
}

// CreateVPCResponse is response schema for CreateVPC action
type CreateVPCResponse struct {
	response.CommonBase

	// 返回信息描述；
	Message string

	// 创建的VPCID；
	VPCID string
}

// NewCreateVPCRequest will create request of CreateVPC action.
func (c *UCloudStackClient) NewCreateVPCRequest() *CreateVPCRequest {
	req := &CreateVPCRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: CreateVPC

创建VPC
*/
func (c *UCloudStackClient) CreateVPC(req *CreateVPCRequest) (*CreateVPCResponse, error) {
	var err error
	var res CreateVPCResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateVPC", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteDiskRequest is request schema for DeleteDisk action
type DeleteDiskRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn,表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 被删除的硬盘ID
	DiskID *string `required:"true"`
}

// DeleteDiskResponse is response schema for DeleteDisk action
type DeleteDiskResponse struct {
	response.CommonBase

	// 返回信息描述。
	Message string
}

// NewDeleteDiskRequest will create request of DeleteDisk action.
func (c *UCloudStackClient) NewDeleteDiskRequest() *DeleteDiskRequest {
	req := &DeleteDiskRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteDisk

删除UCloudStack硬盘
*/
func (c *UCloudStackClient) DeleteDisk(req *DeleteDiskRequest) (*DeleteDiskResponse, error) {
	var err error
	var res DeleteDiskResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteDisk", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteSecurityGroupRequest is request schema for DeleteSecurityGroup action
type DeleteSecurityGroupRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值： cn，表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 安全组ID
	SGID *string `required:"true"`
}

// DeleteSecurityGroupResponse is response schema for DeleteSecurityGroup action
type DeleteSecurityGroupResponse struct {
	response.CommonBase

	// 返回信息描述；
	Message string
}

// NewDeleteSecurityGroupRequest will create request of DeleteSecurityGroup action.
func (c *UCloudStackClient) NewDeleteSecurityGroupRequest() *DeleteSecurityGroupRequest {
	req := &DeleteSecurityGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteSecurityGroup

删除安全组
*/
func (c *UCloudStackClient) DeleteSecurityGroup(req *DeleteSecurityGroupRequest) (*DeleteSecurityGroupResponse, error) {
	var err error
	var res DeleteSecurityGroupResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteSecurityGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteSecurityGroupRuleRequest is request schema for DeleteSecurityGroupRule action
type DeleteSecurityGroupRuleRequest struct {
	request.CommonBase

	// [公共参数] 地域。
	// Region *string `required:"true"`

	// [公共参数] 可用区。
	// Zone *string `required:"true"`

	// 安全组ID
	SGID *string `required:"true"`

	// 安全组规则ID
	SGRuleID *string `required:"true"`
}

// DeleteSecurityGroupRuleResponse is response schema for DeleteSecurityGroupRule action
type DeleteSecurityGroupRuleResponse struct {
	response.CommonBase

	// 返回信息描述；
	Message string
}

// NewDeleteSecurityGroupRuleRequest will create request of DeleteSecurityGroupRule action.
func (c *UCloudStackClient) NewDeleteSecurityGroupRuleRequest() *DeleteSecurityGroupRuleRequest {
	req := &DeleteSecurityGroupRuleRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteSecurityGroupRule

删除安全组规则
*/
func (c *UCloudStackClient) DeleteSecurityGroupRule(req *DeleteSecurityGroupRuleRequest) (*DeleteSecurityGroupRuleResponse, error) {
	var err error
	var res DeleteSecurityGroupRuleResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteSecurityGroupRule", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteSubnetRequest is request schema for DeleteSubnet action
type DeleteSubnetRequest struct {
	request.CommonBase

	// [公共参数] 地域。
	// Region *string `required:"true"`

	// [公共参数] 可用区。
	// Zone *string `required:"true"`

	// SubnetID
	SubnetID *string `required:"true"`
}

// DeleteSubnetResponse is response schema for DeleteSubnet action
type DeleteSubnetResponse struct {
	response.CommonBase

	// 返回信息描述；
	Message string
}

// NewDeleteSubnetRequest will create request of DeleteSubnet action.
func (c *UCloudStackClient) NewDeleteSubnetRequest() *DeleteSubnetRequest {
	req := &DeleteSubnetRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteSubnet

删除子网
*/
func (c *UCloudStackClient) DeleteSubnet(req *DeleteSubnetRequest) (*DeleteSubnetResponse, error) {
	var err error
	var res DeleteSubnetResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteSubnet", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteVMInstanceRequest is request schema for DeleteVMInstance action
type DeleteVMInstanceRequest struct {
	request.CommonBase

	// [公共参数] 地域。 枚举值：cn，表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 虚拟机 ID。输入有效的虚拟机 ID。
	VMID *string `required:"true"`
}

// DeleteVMInstanceResponse is response schema for DeleteVMInstance action
type DeleteVMInstanceResponse struct {
	response.CommonBase

	// 返回信息描述。
	Message string
}

// NewDeleteVMInstanceRequest will create request of DeleteVMInstance action.
func (c *UCloudStackClient) NewDeleteVMInstanceRequest() *DeleteVMInstanceRequest {
	req := &DeleteVMInstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteVMInstance

删除UCloudStack虚拟机
*/
func (c *UCloudStackClient) DeleteVMInstance(req *DeleteVMInstanceRequest) (*DeleteVMInstanceResponse, error) {
	var err error
	var res DeleteVMInstanceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteVMInstance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteVPCRequest is request schema for DeleteVPC action
type DeleteVPCRequest struct {
	request.CommonBase

	// [公共参数] 地域。
	// Region *string `required:"true"`

	// [公共参数] 可用区。
	// Zone *string `required:"true"`

	// ID
	VPCID *string `required:"true"`
}

// DeleteVPCResponse is response schema for DeleteVPC action
type DeleteVPCResponse struct {
	response.CommonBase

	// 返回信息描述；
	Message string
}

// NewDeleteVPCRequest will create request of DeleteVPC action.
func (c *UCloudStackClient) NewDeleteVPCRequest() *DeleteVPCRequest {
	req := &DeleteVPCRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteVPC

删除VPC
*/
func (c *UCloudStackClient) DeleteVPC(req *DeleteVPCRequest) (*DeleteVPCResponse, error) {
	var err error
	var res DeleteVPCResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteVPC", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeDiskRequest is request schema for DescribeDisk action
type DescribeDiskRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值： cn，表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 【数组】磁盘的 ID。输入有效的 ID。调用方式举例：DiskIDs.0=“one-id”、DiskIDs.1=“two-id”。
	DiskIDs []string `required:"false"`

	// 返回数据长度，默认为20，最大100。
	Limit *int `required:"false"`

	// 列表起始位置偏移量，默认为0。
	Offset *int `required:"false"`
}

// DescribeDiskResponse is response schema for DescribeDisk action
type DescribeDiskResponse struct {
	response.CommonBase

	// 【数组】返回磁盘对象数组
	Infos []DiskInfo

	// 返回信息描述。
	Message string

	// 返回磁盘总个数。
	TotalCount int
}

// NewDescribeDiskRequest will create request of DescribeDisk action.
func (c *UCloudStackClient) NewDescribeDiskRequest() *DescribeDiskRequest {
	req := &DescribeDiskRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeDisk

获取UCloudStack硬盘信息
*/
func (c *UCloudStackClient) DescribeDisk(req *DescribeDiskRequest) (*DescribeDiskResponse, error) {
	var err error
	var res DescribeDiskResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeDisk", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeEIPRequest is request schema for DescribeEIP action
type DescribeEIPRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn,表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 【数组】外网的 ID。输入有效的 ID。调用方式举例：EIPIDs.0=“one-id”、EIPIDs.1=“two-id”
	EIPIDs []string `required:"false"`

	// 返回数据长度，默认为20，最大100。
	Limit *string `required:"false"`

	// 列表起始位置偏移量，默认为0。
	Offset *string `required:"false"`
}

// DescribeEIPResponse is response schema for DescribeEIP action
type DescribeEIPResponse struct {
	response.CommonBase

	// 外网IP数组
	Infos []EIPInfo

	// 返回信息描述
	Message string

	// 返回现有外网IP总数
	Totalcount int
}

// NewDescribeEIPRequest will create request of DescribeEIP action.
func (c *UCloudStackClient) NewDescribeEIPRequest() *DescribeEIPRequest {
	req := &DescribeEIPRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeEIP

获取UCloudStack外网IP的信息
*/
func (c *UCloudStackClient) DescribeEIP(req *DescribeEIPRequest) (*DescribeEIPResponse, error) {
	var err error
	var res DescribeEIPResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeEIP", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeMetricRequest is request schema for DescribeMetric action
type DescribeMetricRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn，表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，中国；
	// Zone *string `required:"true"`

	// 开始时间。使用unix时间戳
	BeginTime *string `required:"true"`

	// 结束时间。使用Unix时间戳
	EndTime *string `required:"true"`

	// 监控指标。1. 获取虚拟机监控信息调用举例，MetricName.0="CPUUtilization"、MetricName.0="MemUsage"。虚拟机监控指标枚举值：BlockProcessCount，表示阻塞进程数；CPUUtilization，表示CPU使用率；DiskReadOps，表示磁盘读次数；DiskWriteOps，表示磁盘写次数；IORead，表示磁盘读吞吐；IOWrite，表示磁盘写吞吐；LoadAvg，表示平均负载1分钟；MemUsage，表示内存使用率；NetPacketIn，表示网卡入包量；NetPacketOut，表示网卡出包量；NICIn，表示网卡入带宽；NICOut，表示网卡出带宽；SpaceUsage，表示空间使用率；TCPConnectCount，表示TCP连接数；2. EIP监控指标：NetPacketIn：入包量；NetPacketOut：出包量；NICIn：入带宽；NICOut：出带宽；NICOutUsage：出带宽使用率；
	MetricName []string `required:"true"`

	// 资源ID
	ResourceID *string `required:"true"`

	// 资源类型。VM：虚拟机；EIP：弹性IP
	ResourceType *string `required:"true"`
}

// DescribeMetricResponse is response schema for DescribeMetric action
type DescribeMetricResponse struct {
	response.CommonBase

	// 返回信息列表
	Infos []MetricInfo

	// 返回信息描述
	Message string

	// 返回监控信息条数
	TotalCount int
}

// NewDescribeMetricRequest will create request of DescribeMetric action.
func (c *UCloudStackClient) NewDescribeMetricRequest() *DescribeMetricRequest {
	req := &DescribeMetricRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeMetric

获取资源监控信息
*/
func (c *UCloudStackClient) DescribeMetric(req *DescribeMetricRequest) (*DescribeMetricResponse, error) {
	var err error
	var res DescribeMetricResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeMetric", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeSecurityGroupRequest is request schema for DescribeSecurityGroup action
type DescribeSecurityGroupRequest struct {
	request.CommonBase

	// [公共参数] 地域。
	// Region *string `required:"true"`

	// [公共参数] 可用区。
	// Zone *string `required:"true"`

	// 返回数据长度，默认为20，最大100。
	Limit *int `required:"false"`

	// 列表起始位置偏移量，默认为0。
	Offset *int `required:"false"`

	// 【数组】安全组的 ID。输入有效的 ID。调用方式举例：SGIDs.0=“one-id”、SGIDs.1=“two-id”
	SGIDs []string `required:"false"`
}

// DescribeSecurityGroupResponse is response schema for DescribeSecurityGroup action
type DescribeSecurityGroupResponse struct {
	response.CommonBase

	// 安全组信息列表
	Infos []SGInfo

	// 返回信息描述；
	Message string

	// 安全组的总数
	TotalCount int
}

// NewDescribeSecurityGroupRequest will create request of DescribeSecurityGroup action.
func (c *UCloudStackClient) NewDescribeSecurityGroupRequest() *DescribeSecurityGroupRequest {
	req := &DescribeSecurityGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeSecurityGroup

查询安全组信息
*/
func (c *UCloudStackClient) DescribeSecurityGroup(req *DescribeSecurityGroupRequest) (*DescribeSecurityGroupResponse, error) {
	var err error
	var res DescribeSecurityGroupResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeSecurityGroup", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeSubnetRequest is request schema for DescribeSubnet action
type DescribeSubnetRequest struct {
	request.CommonBase

	// [公共参数] 地域。
	// Region *string `required:"true"`

	// [公共参数] 可用区。
	// Zone *string `required:"true"`

	// 返回数据长度，默认为20，最大100。
	Limit *int `required:"false"`

	// 列表起始位置偏移量，默认为0。
	Offset *int `required:"false"`

	// 【数组】子网 ID。调用方式举例：SubnetIDs.0=“one-id”、SubnetIDs.1=“two-id”
	SubnetIDs []string `required:"false"`

	// VPCID
	VPCID *string `required:"false"`
}

// DescribeSubnetResponse is response schema for DescribeSubnet action
type DescribeSubnetResponse struct {
	response.CommonBase

	// 子网信息列表
	Infos []SubnetInfo

	// 返回信息描述；
	Message string

	// 子网的总数
	TotalCount int
}

// NewDescribeSubnetRequest will create request of DescribeSubnet action.
func (c *UCloudStackClient) NewDescribeSubnetRequest() *DescribeSubnetRequest {
	req := &DescribeSubnetRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeSubnet

查询子网信息
*/
func (c *UCloudStackClient) DescribeSubnet(req *DescribeSubnetRequest) (*DescribeSubnetResponse, error) {
	var err error
	var res DescribeSubnetResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeSubnet", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeUserRequest is request schema for DescribeUser action
type DescribeUserRequest struct {
	request.CommonBase

	// 返回数据长度，默认为20，最大100。
	Limit *int `required:"false"`

	// 列表起始位置偏移量，默认为0。
	Offset *int `required:"false"`

	// 【数组】租户的 ID。输入有效的 ID。调用方式举例：UserIDs.0=123”、UserIDs.1=456
	UserIDs []int `required:"false"`
}

// DescribeUserResponse is response schema for DescribeUser action
type DescribeUserResponse struct {
	response.CommonBase

	// 【数组】返回租户对象数组
	Infos []UserInfo

	// 返回信息描述
	Message string

	// 返回现有租户总数
	TotalCount int
}

// NewDescribeUserRequest will create request of DescribeUser action.
func (c *UCloudStackClient) NewDescribeUserRequest() *DescribeUserRequest {
	req := &DescribeUserRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeUser

查询UcloudStack租户信息
*/
func (c *UCloudStackClient) DescribeUser(req *DescribeUserRequest) (*DescribeUserResponse, error) {
	var err error
	var res DescribeUserResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeUser", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeVMInstanceRequest is request schema for DescribeVMInstance action
type DescribeVMInstanceRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值： cn，表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 返回数据长度，默认为20，最大100。
	Limit *int `required:"false"`

	// 列表起始位置偏移量，默认为0。
	Offset *string `required:"false"`

	// 子网 ID。输入“有效”状态的子网 ID。
	SubnetID *string `required:"false"`

	// 【数组】虚拟机的 ID。输入有效的 ID。调用方式举例：PrivateIp.0=“one-id”、PrivateIp.1=“two-id”。
	VMIDs []string `required:"false"`

	// VPC ID。输入“有效”状态的VPC ID。
	VPCID *string `required:"false"`
}

// DescribeVMInstanceResponse is response schema for DescribeVMInstance action
type DescribeVMInstanceResponse struct {
	response.CommonBase

	// 【数组】返回虚拟机对象数组
	Infos []VMInstanceInfo

	// 返回信息描述
	Message string

	// 返回虚拟机总个数
	TotalCount int
}

// NewDescribeVMInstanceRequest will create request of DescribeVMInstance action.
func (c *UCloudStackClient) NewDescribeVMInstanceRequest() *DescribeVMInstanceRequest {
	req := &DescribeVMInstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeVMInstance

查询UCloudStack虚拟机
*/
func (c *UCloudStackClient) DescribeVMInstance(req *DescribeVMInstanceRequest) (*DescribeVMInstanceResponse, error) {
	var err error
	var res DescribeVMInstanceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeVMInstance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DescribeVPCRequest is request schema for DescribeVPC action
type DescribeVPCRequest struct {
	request.CommonBase

	// [公共参数] 地域。
	// Region *string `required:"true"`

	// [公共参数] 可用区。
	// Zone *string `required:"true"`

	// 返回数据长度，默认为20，最大100。
	Limit *int `required:"false"`

	// 列表起始位置偏移量，默认为0。
	Offset *int `required:"false"`

	// 【数组】VPC的 ID。调用方式举例：VPCIDs.0=“one-id”、VPCIDs.1=“two-id”
	VPCIDs []string `required:"false"`
}

// DescribeVPCResponse is response schema for DescribeVPC action
type DescribeVPCResponse struct {
	response.CommonBase

	// VPC信息列表
	Infos []VPCInfo

	// 返回信息描述；
	Message string

	// VPC的总数
	TotalCount int
}

// NewDescribeVPCRequest will create request of DescribeVPC action.
func (c *UCloudStackClient) NewDescribeVPCRequest() *DescribeVPCRequest {
	req := &DescribeVPCRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DescribeVPC

查询VPC信息
*/
func (c *UCloudStackClient) DescribeVPC(req *DescribeVPCRequest) (*DescribeVPCResponse, error) {
	var err error
	var res DescribeVPCResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DescribeVPC", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DetachDiskRequest is request schema for DetachDisk action
type DetachDiskRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn,表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 硬盘ID
	DiskID *string `required:"true"`

	// 绑定的资源ID
	ResourceID *string `required:"true"`
}

// DetachDiskResponse is response schema for DetachDisk action
type DetachDiskResponse struct {
	response.CommonBase

	// 返回信息描述。
	Message string
}

// NewDetachDiskRequest will create request of DetachDisk action.
func (c *UCloudStackClient) NewDetachDiskRequest() *DetachDiskRequest {
	req := &DetachDiskRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DetachDisk

解绑UClouStack硬盘
*/
func (c *UCloudStackClient) DetachDisk(req *DetachDiskRequest) (*DetachDiskResponse, error) {
	var err error
	var res DetachDiskResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DetachDisk", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// GetDiskPriceRequest is request schema for GetDiskPrice action
type GetDiskPriceRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn,表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 计费模式。枚举值：Dynamic，表示小时；Month，表示月；Year，表示年；
	ChargeType *string `required:"true"`

	// 磁盘大小
	DiskSpace *int `required:"true"`

	// 购买时长。默认值1。小时不生效，月范围【1，11】，年范围【1，5】。
	Quantity *int `required:"false"`

	// 磁盘类型
	SetType *string `required:"true"`
}

// GetDiskPriceResponse is response schema for GetDiskPrice action
type GetDiskPriceResponse struct {
	response.CommonBase

	// 价格信息
	Infos []PriceInfo

	// 返回信息描述。
	Message string
}

// NewGetDiskPriceRequest will create request of GetDiskPrice action.
func (c *UCloudStackClient) NewGetDiskPriceRequest() *GetDiskPriceRequest {
	req := &GetDiskPriceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetDiskPrice

获取UCloudStack硬盘价格
*/
func (c *UCloudStackClient) GetDiskPrice(req *GetDiskPriceRequest) (*GetDiskPriceResponse, error) {
	var err error
	var res GetDiskPriceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetDiskPrice", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// GetEIPPriceRequest is request schema for GetEIPPrice action
type GetEIPPriceRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn,表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 带宽，默认值1，默认范围1~100
	Bandwidth *int `required:"true"`

	// 计费模式。枚举值：Dynamic，表示小时；Month，表示月；Year，表示年；
	ChargeType *string `required:"true"`

	// 线路。目前支持Bgp
	OpertatorName *string `required:"true"`

	// 购买时长。默认值1。小时不生效，月范围【1，11】，年范围【1，5】。
	Quantity *int `required:"false"`
}

// GetEIPPriceResponse is response schema for GetEIPPrice action
type GetEIPPriceResponse struct {
	response.CommonBase

	// 返回的价格信息
	Infos []PriceInfo

	// 返回信息描述
	Message string
}

// NewGetEIPPriceRequest will create request of GetEIPPrice action.
func (c *UCloudStackClient) NewGetEIPPriceRequest() *GetEIPPriceRequest {
	req := &GetEIPPriceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetEIPPrice

获取UCloudStack外网IP价格
*/
func (c *UCloudStackClient) GetEIPPrice(req *GetEIPPriceRequest) (*GetEIPPriceResponse, error) {
	var err error
	var res GetEIPPriceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetEIPPrice", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// GetVMInstancePriceRequest is request schema for GetVMInstancePrice action
type GetVMInstancePriceRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn,表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 系统盘类型。枚举值：Normal，表示普通；SSD，表示SSD；
	BootDiskSetType *string `required:"true"`

	// CPU 个数，目前只能输入数据库配置指定规格参数，如：1核2048M、2核4096M、4核8192M、8核16384M、16核32768M。
	CPU *int `required:"true"`

	// 计费模式。枚举值：Dynamic，表示小时；Month，表示月；Year，表示年；
	ChargeType *string `required:"true"`

	// 数据盘类型。枚举值：Normal，表示普通；SSD，表示SSD；
	DataDiskSetType *string `required:"true"`

	// 数据盘大小，单位 GB。默认值为0。范围：【0，8000】，步长10。
	DataDiskSpace *int `required:"true"`

	// GPU 卡核心的占用个数。枚举值：【1,2,4】。GPU与CPU、内存大小关系：CPU个数>=4*GPU个数，同时内存与CPU规格匹配.
	GPU *int `required:"false"`

	// 镜像 ID。基础镜像 ID 或者自制镜像 ID。如：cn-image-centos-74。
	ImageID *string `required:"true"`

	// 内存大小，单位 M。目前只能输入数据库配置指定规格参数，如：1核2048M、2核4096M、4核8192M、8核16384M、16核32768M。
	Memory *int `required:"true"`

	// 系统类型。
	OSType *string `required:"true"`

	// 购买时长。默认值1。小时不生效，月范围【1，11】，年范围【1，5】。
	Quantity *int `required:"false"`

	// 机型。枚举值：Normal，表示普通；SSD，表示SSD；
	VMType *string `required:"true"`
}

// GetVMInstancePriceResponse is response schema for GetVMInstancePrice action
type GetVMInstancePriceResponse struct {
	response.CommonBase

	// 返回的价格信息
	Infos []PriceInfo

	// 返回信息描述。
	Message string
}

// NewGetVMInstancePriceRequest will create request of GetVMInstancePrice action.
func (c *UCloudStackClient) NewGetVMInstancePriceRequest() *GetVMInstancePriceRequest {
	req := &GetVMInstancePriceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetVMInstancePrice

获取UCloudStack虚拟机价格
*/
func (c *UCloudStackClient) GetVMInstancePrice(req *GetVMInstancePriceRequest) (*GetVMInstancePriceResponse, error) {
	var err error
	var res GetVMInstancePriceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetVMInstancePrice", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// LoginByPasswordRequest is request schema for LoginByPassword action
type LoginByPasswordRequest struct {
	request.CommonBase

	// 密码
	Password *string `required:"true"`

	// 邮箱
	UserEmail *string `required:"true"`
}

// LoginByPasswordResponse is response schema for LoginByPassword action
type LoginByPasswordResponse struct {
	response.CommonBase

	//
	Message string
}

// NewLoginByPasswordRequest will create request of LoginByPassword action.
func (c *UCloudStackClient) NewLoginByPasswordRequest() *LoginByPasswordRequest {
	req := &LoginByPasswordRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: LoginByPassword

登录账户
*/
func (c *UCloudStackClient) LoginByPassword(req *LoginByPasswordRequest) (*LoginByPasswordResponse, error) {
	var err error
	var res LoginByPasswordResponse

	reqCopier := *req

	err = c.Client.InvokeAction("LoginByPassword", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ModifyEIPBandwidthRequest is request schema for ModifyEIPBandwidth action
type ModifyEIPBandwidthRequest struct {
	request.CommonBase

	// [公共参数] 地域。
	// Region *string `required:"true"`

	// [公共参数] 可用区。
	// Zone *string `required:"true"`

	// 调整后的带宽
	Bandwidth *int `required:"true"`

	// 外网IP的ID
	EIPID *string `required:"true"`
}

// ModifyEIPBandwidthResponse is response schema for ModifyEIPBandwidth action
type ModifyEIPBandwidthResponse struct {
	response.CommonBase

	// 返回信息描述；
	Message string
}

// NewModifyEIPBandwidthRequest will create request of ModifyEIPBandwidth action.
func (c *UCloudStackClient) NewModifyEIPBandwidthRequest() *ModifyEIPBandwidthRequest {
	req := &ModifyEIPBandwidthRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ModifyEIPBandwidth

调整外网IP带宽
*/
func (c *UCloudStackClient) ModifyEIPBandwidth(req *ModifyEIPBandwidthRequest) (*ModifyEIPBandwidthResponse, error) {
	var err error
	var res ModifyEIPBandwidthResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ModifyEIPBandwidth", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ModifyNameAndRemarkRequest is request schema for ModifyNameAndRemark action
type ModifyNameAndRemarkRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值： cn，表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 名称;
	Name *string `required:"true"`

	// 描述;
	Remark *string `required:"false"`

	// 资源ID;
	ResourceID *string `required:"true"`
}

// ModifyNameAndRemarkResponse is response schema for ModifyNameAndRemark action
type ModifyNameAndRemarkResponse struct {
	response.CommonBase

	// 返回信息描述
	Message string
}

// NewModifyNameAndRemarkRequest will create request of ModifyNameAndRemark action.
func (c *UCloudStackClient) NewModifyNameAndRemarkRequest() *ModifyNameAndRemarkRequest {
	req := &ModifyNameAndRemarkRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ModifyNameAndRemark

修改资源名称和备注
*/
func (c *UCloudStackClient) ModifyNameAndRemark(req *ModifyNameAndRemarkRequest) (*ModifyNameAndRemarkResponse, error) {
	var err error
	var res ModifyNameAndRemarkResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ModifyNameAndRemark", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// RechargeRequest is request schema for Recharge action
type RechargeRequest struct {
	request.CommonBase

	// 充值金额。最少100,最大500000
	Amount *int `required:"true"`

	// 充值来源。INPOUR_FROM_ALIPAY：支付宝，INPOUR_FROM_OFFLINE：银行转账，INPOUR_FROM_SINPAY：新浪支付，INPOUR_FROM_WECHAT_PAY：微信转账。
	FromType *string `required:"true"`

	// 充值单号。充值方式为“账户余额”时为必要参数。
	SerialNo *string `required:"true"`

	// 租户的账户ID。
	UserID *int `required:"true"`
}

// RechargeResponse is response schema for Recharge action
type RechargeResponse struct {
	response.CommonBase

	// 返回信息描述。
	Message string
}

// NewRechargeRequest will create request of Recharge action.
func (c *UCloudStackClient) NewRechargeRequest() *RechargeRequest {
	req := &RechargeRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: Recharge

UCloudStack管理员给租户充值
*/
func (c *UCloudStackClient) Recharge(req *RechargeRequest) (*RechargeResponse, error) {
	var err error
	var res RechargeResponse

	reqCopier := *req

	err = c.Client.InvokeAction("Recharge", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ReinstallVMInstanceRequest is request schema for ReinstallVMInstance action
type ReinstallVMInstanceRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值： cn，表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 镜像ID
	ImageID *string `required:"true"`

	// 虚拟机ID
	VMID *string `required:"true"`
}

// ReinstallVMInstanceResponse is response schema for ReinstallVMInstance action
type ReinstallVMInstanceResponse struct {
	response.CommonBase

	// 返回信息描述
	Message string
}

// NewReinstallVMInstanceRequest will create request of ReinstallVMInstance action.
func (c *UCloudStackClient) NewReinstallVMInstanceRequest() *ReinstallVMInstanceRequest {
	req := &ReinstallVMInstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ReinstallVMInstance

重装系统，关机的虚拟机才可以重装系统
*/
func (c *UCloudStackClient) ReinstallVMInstance(req *ReinstallVMInstanceRequest) (*ReinstallVMInstanceResponse, error) {
	var err error
	var res ReinstallVMInstanceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ReinstallVMInstance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ReleaseEIPRequest is request schema for ReleaseEIP action
type ReleaseEIPRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn,表示中国；中国
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国
	// Zone *string `required:"true"`

	// 外网IP的ID
	EIPID *string `required:"true"`
}

// ReleaseEIPResponse is response schema for ReleaseEIP action
type ReleaseEIPResponse struct {
	response.CommonBase

	// 返回状态描述
	Message string
}

// NewReleaseEIPRequest will create request of ReleaseEIP action.
func (c *UCloudStackClient) NewReleaseEIPRequest() *ReleaseEIPRequest {
	req := &ReleaseEIPRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ReleaseEIP

删除外网IP
*/
func (c *UCloudStackClient) ReleaseEIP(req *ReleaseEIPRequest) (*ReleaseEIPResponse, error) {
	var err error
	var res ReleaseEIPResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ReleaseEIP", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ResetVMInstancePasswordRequest is request schema for ResetVMInstancePassword action
type ResetVMInstancePasswordRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值： cn，表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 密码
	Password *string `required:"true"`

	// 虚拟机ID
	VMID *string `required:"true"`
}

// ResetVMInstancePasswordResponse is response schema for ResetVMInstancePassword action
type ResetVMInstancePasswordResponse struct {
	response.CommonBase

	// 返回信息描述
	Message string
}

// NewResetVMInstancePasswordRequest will create request of ResetVMInstancePassword action.
func (c *UCloudStackClient) NewResetVMInstancePasswordRequest() *ResetVMInstancePasswordRequest {
	req := &ResetVMInstancePasswordRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ResetVMInstancePassword

重置虚拟机密码，主机必须开机才可以重置密码
*/
func (c *UCloudStackClient) ResetVMInstancePassword(req *ResetVMInstancePasswordRequest) (*ResetVMInstancePasswordResponse, error) {
	var err error
	var res ResetVMInstancePasswordResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ResetVMInstancePassword", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// ResizeVMConfigRequest is request schema for ResizeVMConfig action
type ResizeVMConfigRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值： cn，表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// CPU 个数，如 1、2、4、8、16、32、64。
	CPU *int `required:"true"`

	// 内存容量，如 2048、4096、8192、16384、32768、65536、131072。
	Memory *int `required:"true"`

	// 虚拟机ID
	VMID *string `required:"true"`
}

// ResizeVMConfigResponse is response schema for ResizeVMConfig action
type ResizeVMConfigResponse struct {
	response.CommonBase

	// 返回信息描述
	Message string
}

// NewResizeVMConfigRequest will create request of ResizeVMConfig action.
func (c *UCloudStackClient) NewResizeVMConfigRequest() *ResizeVMConfigRequest {
	req := &ResizeVMConfigRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: ResizeVMConfig

修改虚拟机配置
*/
func (c *UCloudStackClient) ResizeVMConfig(req *ResizeVMConfigRequest) (*ResizeVMConfigResponse, error) {
	var err error
	var res ResizeVMConfigResponse

	reqCopier := *req

	err = c.Client.InvokeAction("ResizeVMConfig", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// RestartVMInstanceRequest is request schema for RestartVMInstance action
type RestartVMInstanceRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn,表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 虚拟机ID;
	VMID *string `required:"true"`
}

// RestartVMInstanceResponse is response schema for RestartVMInstance action
type RestartVMInstanceResponse struct {
	response.CommonBase

	// 返回信息描述
	Message string
}

// NewRestartVMInstanceRequest will create request of RestartVMInstance action.
func (c *UCloudStackClient) NewRestartVMInstanceRequest() *RestartVMInstanceRequest {
	req := &RestartVMInstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: RestartVMInstance

重启虚拟机
*/
func (c *UCloudStackClient) RestartVMInstance(req *RestartVMInstanceRequest) (*RestartVMInstanceResponse, error) {
	var err error
	var res RestartVMInstanceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("RestartVMInstance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// StartVMInstanceRequest is request schema for StartVMInstance action
type StartVMInstanceRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn，表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 虚拟机 ID
	VMID *string `required:"true"`
}

// StartVMInstanceResponse is response schema for StartVMInstance action
type StartVMInstanceResponse struct {
	response.CommonBase

	// 返回信息描述
	Message string
}

// NewStartVMInstanceRequest will create request of StartVMInstance action.
func (c *UCloudStackClient) NewStartVMInstanceRequest() *StartVMInstanceRequest {
	req := &StartVMInstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: StartVMInstance

开启UCloudStack虚拟机
*/
func (c *UCloudStackClient) StartVMInstance(req *StartVMInstanceRequest) (*StartVMInstanceResponse, error) {
	var err error
	var res StartVMInstanceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("StartVMInstance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// StopVMInstanceRequest is request schema for StopVMInstance action
type StopVMInstanceRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn，表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 虚拟机 ID
	VMID *string `required:"true"`
}

// StopVMInstanceResponse is response schema for StopVMInstance action
type StopVMInstanceResponse struct {
	response.CommonBase

	// 返回信息描述
	Message string

	// 虚拟机 ID
	VMID string
}

// NewStopVMInstanceRequest will create request of StopVMInstance action.
func (c *UCloudStackClient) NewStopVMInstanceRequest() *StopVMInstanceRequest {
	req := &StopVMInstanceRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: StopVMInstance

关闭UCloudStack虚拟机
*/
func (c *UCloudStackClient) StopVMInstance(req *StopVMInstanceRequest) (*StopVMInstanceResponse, error) {
	var err error
	var res StopVMInstanceResponse

	reqCopier := *req

	err = c.Client.InvokeAction("StopVMInstance", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UnBindEIPRequest is request schema for UnBindEIP action
type UnBindEIPRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值：cn,表示中国；中国
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 外网IP的ID
	EIPID *string `required:"true"`

	// 资源ID
	ResourceID *string `required:"true"`

	// 资源类型。VM：虚拟机, LB:负载均衡, NATGW：nat网关
	ResourceType *string `required:"true"`
}

// UnBindEIPResponse is response schema for UnBindEIP action
type UnBindEIPResponse struct {
	response.CommonBase

	// 返回信息描述。
	Message string
}

// NewUnBindEIPRequest will create request of UnBindEIP action.
func (c *UCloudStackClient) NewUnBindEIPRequest() *UnBindEIPRequest {
	req := &UnBindEIPRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UnBindEIP

解绑外网IP
*/
func (c *UCloudStackClient) UnBindEIP(req *UnBindEIPRequest) (*UnBindEIPResponse, error) {
	var err error
	var res UnBindEIPResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UnBindEIP", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UnbindAlarmTemplateRequest is request schema for UnbindAlarmTemplate action
type UnbindAlarmTemplateRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值： cn，表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 【数组】资源的 ID。调用方式举例：ResourceIDs.0=“one-id”、ResourceIDs.1=“two-id”。
	ResourceIDs []string `required:"true"`

	// 资源类型。VM：虚拟机, LB:负载均衡, NATGW：nat网关;EIP:弹性网卡
	ResourceType *string `required:"true"`
}

// UnbindAlarmTemplateResponse is response schema for UnbindAlarmTemplate action
type UnbindAlarmTemplateResponse struct {
	response.CommonBase

	// 返回信息描述
	Message string
}

// NewUnbindAlarmTemplateRequest will create request of UnbindAlarmTemplate action.
func (c *UCloudStackClient) NewUnbindAlarmTemplateRequest() *UnbindAlarmTemplateRequest {
	req := &UnbindAlarmTemplateRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UnbindAlarmTemplate

解绑告警模板
*/
func (c *UCloudStackClient) UnbindAlarmTemplate(req *UnbindAlarmTemplateRequest) (*UnbindAlarmTemplateResponse, error) {
	var err error
	var res UnbindAlarmTemplateResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UnbindAlarmTemplate", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UpdateSecurityGroupRuleRequest is request schema for UpdateSecurityGroupRule action
type UpdateSecurityGroupRuleRequest struct {
	request.CommonBase

	// [公共参数] 地域。枚举值： cn，表示中国；
	// Region *string `required:"true"`

	// [公共参数] 可用区。枚举值：zone-01，表示中国；
	// Zone *string `required:"true"`

	// 【数组】规则。输入有效的 规则。调用方式举例：Rules.0=“TCP|23|0.0.0.0/0|ACCEPT|HIGH|1”、Rules.1=“TCP|55|0.0.0.0/0|ACCEPT|HIGH|1”
	Rules []string `required:"true"`

	// 安全组ID
	SGID *string `required:"true"`
}

// UpdateSecurityGroupRuleResponse is response schema for UpdateSecurityGroupRule action
type UpdateSecurityGroupRuleResponse struct {
	response.CommonBase

	// 返回信息描述；
	Message string
}

// NewUpdateSecurityGroupRuleRequest will create request of UpdateSecurityGroupRule action.
func (c *UCloudStackClient) NewUpdateSecurityGroupRuleRequest() *UpdateSecurityGroupRuleRequest {
	req := &UpdateSecurityGroupRuleRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdateSecurityGroupRule

修改安全组规则
*/
func (c *UCloudStackClient) UpdateSecurityGroupRule(req *UpdateSecurityGroupRuleRequest) (*UpdateSecurityGroupRuleResponse, error) {
	var err error
	var res UpdateSecurityGroupRuleResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdateSecurityGroupRule", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}
