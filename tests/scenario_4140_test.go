// Code is generated by ucloud-model, DO NOT EDIT IT.

package tests

import (
	"testing"
	"time"

	"github.com/ucloud/ucloud-sdk-go/services/ucdn"
	"github.com/ucloud/ucloud-sdk-go/services/ufile"
	"github.com/ucloud/ucloud-sdk-go/ucloud"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/driver"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/functions"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/utils"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/validation"
)

func TestScenario4140(t *testing.T) {
	spec.ParallelTest(t, &driver.Scenario{
		PreCheck: func() {
			testAccPreCheck(t)
		},
		Id: "4140",
		Vars: func(scenario *driver.Scenario) map[string]interface{} {
			return map[string]interface{}{
				"BucketName_test":   scenario.Must(functions.Concat("ucdntest-", scenario.Must(functions.GetTimestamp(10)))),
				"time_granule_type": 1,
				"Region":            "cn-bj2",
			}
		},
		Owners: []string{"chenoa.chen@ucloud.cn"},
		Title:  "ucdn-官网开放API测试集",
		Steps: []*driver.Step{
			testStep4140CreateBucket01,
			testStep4140StartUcdnTestDomain02,
			testStep4140DescribeUcdnDomain03,
			testStep4140DescribeUcdnDomain04,
			testStep4140GetUcdnDomainConfig05,
			testStep4140GetNewUcdnDomainHttpCodeV206,
			testStep4140GetUcdnDomainHttpCodeV207,
			testStep4140GetNewUcdnDomainHitRate08,
			testStep4140GetNewUcdnDomainHttpCode09,
			testStep4140PrefetchNewUcdnDomainCache10,
			testStep4140DescribeNewUcdnPrefetchCacheTask11,
			testStep4140DescribeNewUcdnRefreshCacheTask12,
			testStep4140RefreshNewUcdnDomainCache13,
			testStep4140RefreshNewUcdnDomainCache14,
			testStep4140GetNewUcdnDomainBandwidth15,
			testStep4140GetUcdnDomainBandwidthV216,
			testStep4140GetUcdnProIspBandwidthV217,
			testStep4140GetUcdnDomain95BandwidthV218,
			testStep4140GetUcdnPassBandwidth19,
			testStep4140GetUcdnPassBandwidthV220,
			testStep4140GetUcdnDomainRequestNumV221,
			testStep4140GetUcdnDomainRequestNumV322,
			testStep4140GetUcdnProIspRequestNumV223,
			testStep4140GetUcdnDomainOriginRequestNum24,
			testStep4140GetUcdnDomainLog25,
			testStep4140GetUcdnTraffic26,
			testStep4140GetUcdnTrafficV227,
			testStep4140GetUcdnDomainTraffic28,
			testStep4140GetUcdnDomainPrefetchEnable29,
			testStep4140SwitchUcdnChargeType30,
			testStep4140StopUcdnTestDomain31,
			testStep4140DescribeUcdnDomain32,
			testStep4140UpdateUcdnDomainStatus33,
			testStep4140DeleteBucket34,
		},
	})
}

var testStep4140CreateBucket01 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UFile")
		if err != nil {
			return nil, err
		}
		client := c.(*ufile.UFileClient)

		req := client.NewCreateBucketRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Region":     step.Scenario.GetVar("Region"),
			"BucketName": step.Scenario.GetVar("BucketName_test"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.CreateBucket(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "CreateBucketResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "创建Bucket",
	FastFail:      false,
}

var testStep4140StartUcdnTestDomain02 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("StartUcdnTestDomain")
		err = req.SetPayload(map[string]interface{}{
			"Region":     step.Scenario.GetVar("Region"),
			"BucketName": step.Scenario.GetVar("BucketName_test"),
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("domainId", step.Must(utils.GetValue(resp, "DomainId")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "StartUcdnTestDomainResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "开通ucdn测试域名",
	FastFail:      false,
}

var testStep4140DescribeUcdnDomain03 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUcdnDomain")
		err = req.SetPayload(map[string]interface{}{
			"DomainId": []interface{}{
				step.Scenario.GetVar("domainId"),
			},
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUcdnDomainResponse", "str_eq"),
			validation.Builtins.NewValidator("DomainSet.0.ChannelType", "ucdn", "str_eq"),
			validation.Builtins.NewValidator("DomainSet.0.Domain", step.Must(functions.Concat(step.Scenario.GetVar("BucketName_test"), ".ufile.ucloud.com.cn")), "str_eq"),
			validation.Builtins.NewValidator("DomainSet.0.DomainId", step.Scenario.GetVar("domainId"), "str_eq"),
			validation.Builtins.NewValidator("DomainSet.0.Status", "check", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(3) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取加速域名详细信息",
	FastFail:      true,
}

var testStep4140DescribeUcdnDomain04 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUcdnDomain")
		err = req.SetPayload(map[string]interface{}{
			"DomainId": []interface{}{
				step.Scenario.GetVar("domainId"),
			},
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("domain", step.Must(utils.GetValue(resp, "DomainSet.0.Domain")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUcdnDomainResponse", "str_eq"),
			validation.Builtins.NewValidator("DomainSet.0.ChannelType", "ucdn", "str_eq"),
			validation.Builtins.NewValidator("DomainSet.0.Domain", step.Must(functions.Concat(step.Scenario.GetVar("BucketName_test"), ".ufile.ucloud.com.cn")), "str_eq"),
			validation.Builtins.NewValidator("DomainSet.0.DomainId", step.Scenario.GetVar("domainId"), "str_eq"),
			validation.Builtins.NewValidator("DomainSet.0.Status", "enable", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(200) * time.Second,
	MaxRetries:    30,
	RetryInterval: 10 * time.Second,
	Title:         "获取加速域名详细信息",
	FastFail:      true,
}

var testStep4140GetUcdnDomainConfig05 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCDN")
		if err != nil {
			return nil, err
		}
		client := c.(*ucdn.UCDNClient)

		req := client.NewGetUcdnDomainConfigRequest()
		err = utils.SetRequest(req, map[string]interface{}{})
		if err != nil {
			return nil, err
		}

		resp, err := client.GetUcdnDomainConfig(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "GetUcdnDomainConfigResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "批量获取加速域名配置",
	FastFail:      false,
}

var testStep4140GetNewUcdnDomainHttpCodeV206 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCDN")
		if err != nil {
			return nil, err
		}
		client := c.(*ucdn.UCDNClient)

		req := client.NewGetNewUcdnDomainHttpCodeV2Request()
		err = utils.SetRequest(req, map[string]interface{}{
			"Type":      step.Scenario.GetVar("time_granule_type"),
			"EndTime":   step.Must(functions.GetTimestamp(10)),
			"BeginTime": step.Must(functions.Calculate("-", step.Must(functions.GetTimestamp(10)), 10000)),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.GetNewUcdnDomainHttpCodeV2(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "GetNewUcdnDomainHttpCodeV2Response", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取域名详细状态码监控",
	FastFail:      false,
}

var testStep4140GetUcdnDomainHttpCodeV207 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCDN")
		if err != nil {
			return nil, err
		}
		client := c.(*ucdn.UCDNClient)

		req := client.NewGetUcdnDomainHttpCodeV2Request()
		err = utils.SetRequest(req, map[string]interface{}{
			"Type": "time_granule_type",
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.GetUcdnDomainHttpCodeV2(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "GetUcdnDomainHttpCodeV2Response", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取域名状态码信息【新】",
	FastFail:      false,
}

var testStep4140GetNewUcdnDomainHitRate08 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCDN")
		if err != nil {
			return nil, err
		}
		client := c.(*ucdn.UCDNClient)

		req := client.NewGetNewUcdnDomainHitRateRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Type":      step.Scenario.GetVar("time_granule_type"),
			"EndTime":   step.Must(functions.GetTimestamp(10)),
			"BeginTime": step.Must(functions.Calculate("-", step.Must(functions.GetTimestamp(10)), 1000)),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.GetNewUcdnDomainHitRate(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "GetNewUcdnDomainHitRateResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取域名命中率",
	FastFail:      false,
}

var testStep4140GetNewUcdnDomainHttpCode09 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCDN")
		if err != nil {
			return nil, err
		}
		client := c.(*ucdn.UCDNClient)

		req := client.NewGetNewUcdnDomainHttpCodeRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Type":      step.Scenario.GetVar("time_granule_type"),
			"EndTime":   step.Must(functions.GetTimestamp(10)),
			"BeginTime": step.Must(functions.Calculate("-", step.Must(functions.GetTimestamp(10)), 10000)),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.GetNewUcdnDomainHttpCode(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "GetNewUcdnDomainHttpCodeResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取域名状态码监控",
	FastFail:      false,
}

var testStep4140PrefetchNewUcdnDomainCache10 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCDN")
		if err != nil {
			return nil, err
		}
		client := c.(*ucdn.UCDNClient)

		req := client.NewPrefetchNewUcdnDomainCacheRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"UrlList": []interface{}{
				step.Must(functions.Concat("http://", step.Scenario.GetVar("domain"), "/")),
			},
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.PrefetchNewUcdnDomainCache(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("PrefetchCache_TaskId", step.Must(utils.GetValue(resp, "TaskId")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "PrefetchNewUcdnDomainCacheResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "提交预取任务",
	FastFail:      false,
}

var testStep4140DescribeNewUcdnPrefetchCacheTask11 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCDN")
		if err != nil {
			return nil, err
		}
		client := c.(*ucdn.UCDNClient)

		req := client.NewDescribeNewUcdnPrefetchCacheTaskRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"TaskId": []interface{}{
				step.Scenario.GetVar("PrefetchCache_TaskId"),
			},
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeNewUcdnPrefetchCacheTask(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeNewUcdnPrefetchCacheTaskResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取预取任务状态",
	FastFail:      false,
}

var testStep4140DescribeNewUcdnRefreshCacheTask12 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCDN")
		if err != nil {
			return nil, err
		}
		client := c.(*ucdn.UCDNClient)

		req := client.NewDescribeNewUcdnRefreshCacheTaskRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"TaskId": []interface{}{
				step.Scenario.GetVar("PrefetchCache_TaskId"),
			},
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeNewUcdnRefreshCacheTask(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeNewUcdnRefreshCacheTaskResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取域名刷新任务状态",
	FastFail:      false,
}

var testStep4140RefreshNewUcdnDomainCache13 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCDN")
		if err != nil {
			return nil, err
		}
		client := c.(*ucdn.UCDNClient)

		req := client.NewRefreshNewUcdnDomainCacheRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"UrlList": []interface{}{
				step.Must(functions.Concat("http://", step.Scenario.GetVar("domain"), "/")),
			},
			"Type": "file",
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.RefreshNewUcdnDomainCache(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "RefreshNewUcdnDomainCacheResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "刷新缓存",
	FastFail:      false,
}

var testStep4140RefreshNewUcdnDomainCache14 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCDN")
		if err != nil {
			return nil, err
		}
		client := c.(*ucdn.UCDNClient)

		req := client.NewRefreshNewUcdnDomainCacheRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"UrlList": []interface{}{
				step.Must(functions.Concat("http://", step.Scenario.GetVar("domain"), "/test.txt")),
			},
			"Type": "file",
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.RefreshNewUcdnDomainCache(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "RefreshNewUcdnDomainCacheResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "刷新缓存",
	FastFail:      false,
}

var testStep4140GetNewUcdnDomainBandwidth15 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCDN")
		if err != nil {
			return nil, err
		}
		client := c.(*ucdn.UCDNClient)

		req := client.NewGetNewUcdnDomainBandwidthRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Type": step.Scenario.GetVar("time_granule_type"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.GetNewUcdnDomainBandwidth(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "GetNewUcdnDomainBandwidthResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取域名带宽数据",
	FastFail:      false,
}

var testStep4140GetUcdnDomainBandwidthV216 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCDN")
		if err != nil {
			return nil, err
		}
		client := c.(*ucdn.UCDNClient)

		req := client.NewGetUcdnDomainBandwidthV2Request()
		err = utils.SetRequest(req, map[string]interface{}{
			"Type": step.Scenario.GetVar("time_granule_type"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.GetUcdnDomainBandwidthV2(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "GetUcdnDomainBandwidthV2Response", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取域名带宽数据【新】",
	FastFail:      false,
}

var testStep4140GetUcdnProIspBandwidthV217 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCDN")
		if err != nil {
			return nil, err
		}
		client := c.(*ucdn.UCDNClient)

		req := client.NewGetUcdnProIspBandwidthV2Request()
		err = utils.SetRequest(req, map[string]interface{}{
			"Type":      step.Scenario.GetVar("time_granule_type"),
			"EndTime":   step.Must(functions.GetTimestamp(10)),
			"BeginTime": step.Must(functions.Calculate("-", step.Must(functions.GetTimestamp(10)), 1000)),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.GetUcdnProIspBandwidthV2(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "GetUcdnProIspBandwidthV2Response", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "按省份运营商获取域名带宽数据【新】",
	FastFail:      false,
}

var testStep4140GetUcdnDomain95BandwidthV218 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCDN")
		if err != nil {
			return nil, err
		}
		client := c.(*ucdn.UCDNClient)

		req := client.NewGetUcdnDomain95BandwidthV2Request()
		err = utils.SetRequest(req, map[string]interface{}{
			"EndTime":   step.Must(functions.GetTimestamp(10)),
			"BeginTime": step.Must(functions.Calculate("-", step.Must(functions.GetTimestamp(10)), 1000)),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.GetUcdnDomain95BandwidthV2(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "GetUcdnDomain95BandwidthV2Response", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取域名九五峰值带宽数据【新】",
	FastFail:      false,
}

var testStep4140GetUcdnPassBandwidth19 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCDN")
		if err != nil {
			return nil, err
		}
		client := c.(*ucdn.UCDNClient)

		req := client.NewGetUcdnPassBandwidthRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Type": step.Scenario.GetVar("time_granule_type"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.GetUcdnPassBandwidth(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "GetUcdnPassBandwidthResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取回源带宽数据（按时间分类）",
	FastFail:      false,
}

var testStep4140GetUcdnPassBandwidthV220 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCDN")
		if err != nil {
			return nil, err
		}
		client := c.(*ucdn.UCDNClient)

		req := client.NewGetUcdnPassBandwidthV2Request()
		err = utils.SetRequest(req, map[string]interface{}{
			"Type": step.Scenario.GetVar("time_granule_type"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.GetUcdnPassBandwidthV2(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "GetUcdnPassBandwidthV2Response", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取回源带宽数据（按时间分类）【新】",
	FastFail:      false,
}

var testStep4140GetUcdnDomainRequestNumV221 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCDN")
		if err != nil {
			return nil, err
		}
		client := c.(*ucdn.UCDNClient)

		req := client.NewGetUcdnDomainRequestNumV2Request()
		err = utils.SetRequest(req, map[string]interface{}{
			"Type":    step.Scenario.GetVar("time_granule_type"),
			"EndTime": step.Must(functions.GetTimestamp(10)),
			"DomainId": []interface{}{
				step.Scenario.GetVar("domainId"),
			},
			"BeginTime": step.Must(functions.Calculate("-", step.Must(functions.GetTimestamp(10)), 1000)),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.GetUcdnDomainRequestNumV2(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "GetUcdnDomainRequestNumV2Response", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取域名请求数",
	FastFail:      false,
}

var testStep4140GetUcdnDomainRequestNumV322 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCDN")
		if err != nil {
			return nil, err
		}
		client := c.(*ucdn.UCDNClient)

		req := client.NewGetUcdnDomainRequestNumV3Request()
		err = utils.SetRequest(req, map[string]interface{}{
			"Type":    step.Scenario.GetVar("time_granule_type"),
			"EndTime": step.Must(functions.GetTimestamp(10)),
			"DomainId": []interface{}{
				step.Scenario.GetVar("domainId"),
			},
			"BeginTime": step.Must(functions.Calculate("-", step.Must(functions.GetTimestamp(10)), 1000)),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.GetUcdnDomainRequestNumV3(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "GetUcdnDomainRequestNumV3Response", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取域名请求数【新】",
	FastFail:      false,
}

var testStep4140GetUcdnProIspRequestNumV223 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCDN")
		if err != nil {
			return nil, err
		}
		client := c.(*ucdn.UCDNClient)

		req := client.NewGetUcdnProIspRequestNumV2Request()
		err = utils.SetRequest(req, map[string]interface{}{
			"EndTime":   step.Must(functions.GetTimestamp(10)),
			"BeginTime": step.Must(functions.Calculate("-", step.Must(functions.GetTimestamp(10)), 1000)),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.GetUcdnProIspRequestNumV2(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "GetUcdnProIspRequestNumV2Response", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "按省份运营商获取域名请求数【新】",
	FastFail:      false,
}

var testStep4140GetUcdnDomainOriginRequestNum24 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCDN")
		if err != nil {
			return nil, err
		}
		client := c.(*ucdn.UCDNClient)

		req := client.NewGetUcdnDomainOriginRequestNumRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Type":      step.Scenario.GetVar("time_granule_type"),
			"EndTime":   step.Must(functions.GetTimestamp(10)),
			"BeginTime": step.Must(functions.Calculate("-", step.Must(functions.GetTimestamp(10)), 1000)),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.GetUcdnDomainOriginRequestNum(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "GetUcdnDomainOriginRequestNumResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取域名回源请求数【新】",
	FastFail:      false,
}

var testStep4140GetUcdnDomainLog25 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCDN")
		if err != nil {
			return nil, err
		}
		client := c.(*ucdn.UCDNClient)

		req := client.NewGetUcdnDomainLogRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Type": step.Scenario.GetVar("time_granule_type"),
			"DomainId": []interface{}{
				step.Scenario.GetVar("domainId"),
			},
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.GetUcdnDomainLog(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "GetUcdnDomainLogResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取加速域名原始日志",
	FastFail:      false,
}

var testStep4140GetUcdnTraffic26 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCDN")
		if err != nil {
			return nil, err
		}
		client := c.(*ucdn.UCDNClient)

		req := client.NewGetUcdnTrafficRequest()
		err = utils.SetRequest(req, map[string]interface{}{})
		if err != nil {
			return nil, err
		}

		resp, err := client.GetUcdnTraffic(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "GetUcdnTrafficResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取流量信息",
	FastFail:      false,
}

var testStep4140GetUcdnTrafficV227 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCDN")
		if err != nil {
			return nil, err
		}
		client := c.(*ucdn.UCDNClient)

		req := client.NewGetUcdnTrafficV2Request()
		err = utils.SetRequest(req, map[string]interface{}{})
		if err != nil {
			return nil, err
		}

		resp, err := client.GetUcdnTrafficV2(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "GetUcdnTrafficV2Response", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取账户总流量信息【新】",
	FastFail:      false,
}

var testStep4140GetUcdnDomainTraffic28 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCDN")
		if err != nil {
			return nil, err
		}
		client := c.(*ucdn.UCDNClient)

		req := client.NewGetUcdnDomainTrafficRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"AccountType": "top",
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.GetUcdnDomainTraffic(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "GetUcdnDomainTrafficResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取加速域名流量使用信息",
	FastFail:      false,
}

var testStep4140GetUcdnDomainPrefetchEnable29 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCDN")
		if err != nil {
			return nil, err
		}
		client := c.(*ucdn.UCDNClient)

		req := client.NewGetUcdnDomainPrefetchEnableRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"DomainId": step.Scenario.GetVar("domainId"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.GetUcdnDomainPrefetchEnable(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "GetUcdnDomainPrefetchEnableResponse", "str_eq"),
			validation.Builtins.NewValidator("Enable", 1, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取域名预取开启状态",
	FastFail:      false,
}

var testStep4140SwitchUcdnChargeType30 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UCDN")
		if err != nil {
			return nil, err
		}
		client := c.(*ucdn.UCDNClient)

		req := client.NewSwitchUcdnChargeTypeRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"ChargeType": "traffic",
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.SwitchUcdnChargeType(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "SwitchUcdnChargeTypeResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "切换账号计费方式",
	FastFail:      false,
}

var testStep4140StopUcdnTestDomain31 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("StopUcdnTestDomain")
		err = req.SetPayload(map[string]interface{}{
			"Region":     step.Scenario.GetVar("Region"),
			"BucketName": step.Scenario.GetVar("BucketName_test"),
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "StopUcdnTestDomainResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "停止ucdn测试域名",
	FastFail:      false,
}

var testStep4140DescribeUcdnDomain32 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUcdnDomain")
		err = req.SetPayload(map[string]interface{}{
			"DomainId": []interface{}{
				step.Scenario.GetVar("domainId"),
			},
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUcdnDomainResponse", "str_eq"),
			validation.Builtins.NewValidator("DomainSet.0.ChannelType", "ucdn", "str_eq"),
			validation.Builtins.NewValidator("DomainSet.0.Domain", step.Must(functions.Concat(step.Scenario.GetVar("BucketName_test"), ".ufile.ucloud.com.cn")), "str_eq"),
			validation.Builtins.NewValidator("DomainSet.0.DomainId", step.Scenario.GetVar("domainId"), "str_eq"),
			validation.Builtins.NewValidator("DomainSet.0.Status", "disable", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取加速域名详细信息",
	FastFail:      false,
}

var testStep4140UpdateUcdnDomainStatus33 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("UpdateUcdnDomainStatus")
		err = req.SetPayload(map[string]interface{}{
			"Status":   "delete",
			"DomainId": step.Scenario.GetVar("domainId"),
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "UpdateUcdnDomainStatusResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "更新加速域名状态",
	FastFail:      false,
}

var testStep4140DeleteBucket34 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UFile")
		if err != nil {
			return nil, err
		}
		client := c.(*ufile.UFileClient)

		req := client.NewDeleteBucketRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"BucketName": step.Scenario.GetVar("BucketName_test"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DeleteBucket(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DeleteBucketResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(120) * time.Second,
	MaxRetries:    10,
	RetryInterval: 10 * time.Second,
	Title:         "删除Bucket",
	FastFail:      false,
}
