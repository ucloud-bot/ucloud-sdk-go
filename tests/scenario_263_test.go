// Code is generated by ucloud-model, DO NOT EDIT IT.

package tests

import (
	"testing"
	"time"

	"github.com/ucloud/ucloud-sdk-go/services/unet"
	"github.com/ucloud/ucloud-sdk-go/ucloud"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/driver"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/utils"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/validation"
)

func TestScenario263(t *testing.T) {
	spec.ParallelTest(t, &driver.Scenario{
		PreCheck: func() {
			testAccPreCheck(t)
		},
		Id: "263",
		Vars: func(scenario *driver.Scenario) map[string]interface{} {
			return map[string]interface{}{
				"sbw_name":         "sbw_api_auto",
				"sbw_chargetype":   "Month",
				"sbw_bw":           20,
				"resize_bw":        22,
				"eip_operatorname": "International",
				"eip_bw":           2,
				"Region":           "tw-tp",
				"Zone":             "tw-tp-01",
			}
		},
		Owners: []string{"chenoa.chen@ucloud.cn"},
		Title:  "ShareBandwidth自动化回归-共享带宽-基础-02",
		Steps: []*driver.Step{
			testStep263AllocateShareBandwidth01,
			testStep263AllocateEIP02,
			testStep263AssociateEIPWithShareBandwidth03,
			testStep263DescribeShareBandwidthPrice04,
			testStep263DescribeShareBandwidth05,
			testStep263ResizeShareBandwidth06,
			testStep263DescribeShareBandwidth07,
			testStep263DescribeEIP08,
			testStep263DisassociateEIPWithShareBandwidth09,
			testStep263DescribeEIP10,
			testStep263GetBandwidthSum11,
			testStep263ReleaseEIP12,
			testStep263ReleaseShareBandwidth13,
		},
	})
}

var testStep263AllocateShareBandwidth01 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UNet")
		if err != nil {
			return nil, err
		}
		client := c.(*unet.UNetClient)

		req := client.NewAllocateShareBandwidthRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"ShareBandwidth": step.Scenario.GetVar("sbw_bw"),
			"Region":         step.Scenario.GetVar("Region"),
			"Name":           step.Scenario.GetVar("sbw_name"),
			"ChargeType":     step.Scenario.GetVar("sbw_chargetype"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.AllocateShareBandwidth(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("sbw_id", step.Must(utils.GetValue(resp, "ShareBandwidthId")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    10,
	RetryInterval: 10 * time.Second,
	Title:         "开通共享带宽",
	FastFail:      false,
}

var testStep263AllocateEIP02 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UNet")
		if err != nil {
			return nil, err
		}
		client := c.(*unet.UNetClient)

		req := client.NewAllocateEIPRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Region":       step.Scenario.GetVar("Region"),
			"PayMode":      "Traffic",
			"OperatorName": step.Scenario.GetVar("eip_operatorname"),
			"Name":         "eip_auto",
			"ChargeType":   "Month",
			"Bandwidth":    step.Scenario.GetVar("eip_bw"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.AllocateEIP(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("eip_id", step.Must(utils.GetValue(resp, "EIPSet.0.EIPId")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    10,
	RetryInterval: 10 * time.Second,
	Title:         "申请弹性IP",
	FastFail:      false,
}

var testStep263AssociateEIPWithShareBandwidth03 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UNet")
		if err != nil {
			return nil, err
		}
		client := c.(*unet.UNetClient)

		req := client.NewAssociateEIPWithShareBandwidthRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"ShareBandwidthId": step.Scenario.GetVar("sbw_id"),
			"Region":           step.Scenario.GetVar("Region"),
			"EIPIds": []interface{}{
				step.Scenario.GetVar("eip_id"),
			},
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.AssociateEIPWithShareBandwidth(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(60) * time.Second,
	MaxRetries:    10,
	RetryInterval: 10 * time.Second,
	Title:         "将EIP加入共享带宽",
	FastFail:      false,
}

var testStep263DescribeShareBandwidthPrice04 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeShareBandwidthPrice")
		err = req.SetPayload(map[string]interface{}{
			"ShareBandwidth": step.Scenario.GetVar("sbw_bw"),
			"Region":         step.Scenario.GetVar("Region"),
			"Quantity":       1,
			"ChargeType":     step.Scenario.GetVar("sbw_chargetype"),
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("TotalPrice", 0, "gt"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    10,
	RetryInterval: 10 * time.Second,
	Title:         "获取共享带宽价格",
	FastFail:      false,
}

var testStep263DescribeShareBandwidth05 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UNet")
		if err != nil {
			return nil, err
		}
		client := c.(*unet.UNetClient)

		req := client.NewDescribeShareBandwidthRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"ShareBandwidthIds": []interface{}{
				step.Scenario.GetVar("sbw_id"),
			},
			"Region": step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeShareBandwidth(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.ShareBandwidthId", step.Scenario.GetVar("sbw_id"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.ShareBandwidth", step.Scenario.GetVar("sbw_bw"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.ChargeType", step.Scenario.GetVar("sbw_chargetype"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Name", step.Scenario.GetVar("sbw_name"), "str_eq"),
			validation.Builtins.NewValidator("TotalCount", 1, "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.EIPSet.0.EIPAddr.0.OperatorName", step.Scenario.GetVar("eip_operatorname"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.EIPSet.0.EIPId", step.Scenario.GetVar("eip_id"), "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    10,
	RetryInterval: 10 * time.Second,
	Title:         "获取共享带宽信息",
	FastFail:      false,
}

var testStep263ResizeShareBandwidth06 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UNet")
		if err != nil {
			return nil, err
		}
		client := c.(*unet.UNetClient)

		req := client.NewResizeShareBandwidthRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"ShareBandwidthId": step.Scenario.GetVar("sbw_id"),
			"ShareBandwidth":   step.Scenario.GetVar("resize_bw"),
			"Region":           step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.ResizeShareBandwidth(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    10,
	RetryInterval: 10 * time.Second,
	Title:         "调整共享带宽",
	FastFail:      false,
}

var testStep263DescribeShareBandwidth07 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UNet")
		if err != nil {
			return nil, err
		}
		client := c.(*unet.UNetClient)

		req := client.NewDescribeShareBandwidthRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"ShareBandwidthIds": []interface{}{
				step.Scenario.GetVar("sbw_id"),
			},
			"Region": step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeShareBandwidth(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.ShareBandwidth", step.Scenario.GetVar("resize_bw"), "str_eq"),
		}
	},
	StartupDelay:  time.Duration(60) * time.Second,
	MaxRetries:    10,
	RetryInterval: 10 * time.Second,
	Title:         "获取共享带宽信息",
	FastFail:      false,
}

var testStep263DescribeEIP08 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UNet")
		if err != nil {
			return nil, err
		}
		client := c.(*unet.UNetClient)

		req := client.NewDescribeEIPRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Region": step.Scenario.GetVar("Region"),
			"Offset": 0,
			"Limit":  100,
			"EIPIds": []interface{}{
				step.Scenario.GetVar("eip_id"),
			},
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeEIP(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("EIPSet.0.BandwidthType", 1, "str_eq"),
			validation.Builtins.NewValidator("EIPSet.0.PayMode", "ShareBandwidth", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取弹性IP信息",
	FastFail:      false,
}

var testStep263DisassociateEIPWithShareBandwidth09 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UNet")
		if err != nil {
			return nil, err
		}
		client := c.(*unet.UNetClient)

		req := client.NewDisassociateEIPWithShareBandwidthRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"ShareBandwidthId": step.Scenario.GetVar("sbw_id"),
			"Region":           step.Scenario.GetVar("Region"),
			"EIPIds": []interface{}{
				step.Scenario.GetVar("eip_id"),
			},
			"Bandwidth": step.Scenario.GetVar("eip_bw"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DisassociateEIPWithShareBandwidth(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    10,
	RetryInterval: 10 * time.Second,
	Title:         "将EIP移出共享带宽",
	FastFail:      false,
}

var testStep263DescribeEIP10 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UNet")
		if err != nil {
			return nil, err
		}
		client := c.(*unet.UNetClient)

		req := client.NewDescribeEIPRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Region": step.Scenario.GetVar("Region"),
			"Offset": 0,
			"Limit":  100,
			"EIPIds": []interface{}{
				step.Scenario.GetVar("eip_id"),
			},
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeEIP(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("EIPSet.0.BandwidthType", 0, "str_eq"),
			validation.Builtins.NewValidator("EIPSet.0.PayMode", "Bandwidth", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(10) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取弹性IP信息",
	FastFail:      false,
}

var testStep263GetBandwidthSum11 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("GetBandwidthSum")
		err = req.SetPayload(map[string]interface{}{
			"Region": step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Info.BwOutSum", 0, "gt"),
			validation.Builtins.NewValidator("Info.BwOutShareSum", 0, "gt"),
			validation.Builtins.NewValidator("Info.BwOutAll", 0, "gt"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取带宽总量信息",
	FastFail:      false,
}

var testStep263ReleaseEIP12 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UNet")
		if err != nil {
			return nil, err
		}
		client := c.(*unet.UNetClient)

		req := client.NewReleaseEIPRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Region": step.Scenario.GetVar("Region"),
			"EIPId":  step.Scenario.GetVar("eip_id"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.ReleaseEIP(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    10,
	RetryInterval: 10 * time.Second,
	Title:         "释放弹性IP",
	FastFail:      false,
}

var testStep263ReleaseShareBandwidth13 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UNet")
		if err != nil {
			return nil, err
		}
		client := c.(*unet.UNetClient)

		req := client.NewReleaseShareBandwidthRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"ShareBandwidthId": step.Scenario.GetVar("sbw_id"),
			"Region":           step.Scenario.GetVar("Region"),
			"EIPBandwidth":     2,
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.ReleaseShareBandwidth(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(3) * time.Second,
	MaxRetries:    10,
	RetryInterval: 10 * time.Second,
	Title:         "关闭共享带宽",
	FastFail:      false,
}
