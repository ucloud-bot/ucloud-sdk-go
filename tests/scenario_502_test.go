// Code is generated by ucloud-model, DO NOT EDIT IT.

package tests

import (
	"testing"
	"time"

	"github.com/ucloud/ucloud-sdk-go/services/udb"
	"github.com/ucloud/ucloud-sdk-go/ucloud"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/driver"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/functions"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/utils"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/validation"
)

func TestScenario502(t *testing.T) {
	spec.ParallelTest(t, &driver.Scenario{
		PreCheck: func() {
			testAccPreCheck(t)
		},
		Id: "502",
		Vars: func(scenario *driver.Scenario) map[string]interface{} {
			return map[string]interface{}{
				"DBTypeId":     "mysql-5.6",
				"InstanceMode": "HA",
				"InstanceType": "SATA_SSD",
				"Port":         3306,
				"MemoryLimit":  1000,
				"DiskSpace":    20,
				"DBName":       "auto_hassd_",
				"UseSSD":       "true",
				"Region":       "cn-bj2",
				"Zone":         "cn-bj2-02",
			}
		},
		Owners: []string{"xiangyu.wang@ucloud.cn"},
		Title:  "Mysql_HA_SSD_mysql 5.6_01",
		Steps: []*driver.Step{
			testStep502DescribeUDBType01,
			testStep502DescribeUDBParamGroup02,
			testStep502DescribeUDBInstancePrice03,
			testStep502CheckUDBInstanceAllowance04,
			testStep502CreateUDBInstance05,
			testStep502DescribeUDBInstance06,
			testStep502DescribeUDBInstanceState07,
			testStep502EnableUDBRWSplitting08,
			testStep502CheckUDBInstanceAllowance09,
			testStep502CreateUDBSlave10,
			testStep502DescribeUDBInstanceState11,
			testStep502EnableUDBRWSplitting12,
			testStep502DescribeUDBSplittingInfo13,
			testStep502SetUDBRWSplitting14,
			testStep502DescribeUDBSplittingInfo15,
			testStep502SetUDBRWSplitting16,
			testStep502DescribeUDBSplittingInfo17,
			testStep502SetUDBRWSplitting18,
			testStep502DescribeUDBSplittingInfo19,
			testStep502SetUDBRWSplitting20,
			testStep502DescribeUDBSplittingInfo21,
			testStep502RestartRWSplitting22,
			testStep502DescribeUDBSplittingInfo23,
			testStep502DisableUDBRWSplitting24,
			testStep502StopUDBInstance25,
			testStep502DescribeUDBInstance26,
			testStep502StopUDBInstance27,
			testStep502DescribeUDBInstance28,
			testStep502DeleteUDBInstance29,
			testStep502DeleteUDBInstance30,
		},
	})
}

var testStep502DescribeUDBType01 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDB")
		if err != nil {
			return nil, err
		}
		client := c.(*udb.UDBClient)

		req := client.NewDescribeUDBTypeRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeUDBType(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "获取云数据库支持类型",
	FastFail:      false,
}

var testStep502DescribeUDBParamGroup02 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDB")
		if err != nil {
			return nil, err
		}
		client := c.(*udb.UDBClient)

		req := client.NewDescribeUDBParamGroupRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"Offset": 0,
			"Limit":  100,
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeUDBParamGroup(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("DataSet_paramGroup", step.Must(utils.GetValue(resp, "DataSet")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "获取参数信息",
	FastFail:      false,
}

var testStep502DescribeUDBInstancePrice03 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDB")
		if err != nil {
			return nil, err
		}
		client := c.(*udb.UDBClient)

		req := client.NewDescribeUDBInstancePriceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":        step.Scenario.GetVar("Zone"),
			"Region":      step.Scenario.GetVar("Region"),
			"MemoryLimit": step.Scenario.GetVar("MemoryLimit"),
			"DiskSpace":   step.Scenario.GetVar("DiskSpace"),
			"DBTypeId":    step.Scenario.GetVar("DBTypeId"),
			"Count":       1,
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeUDBInstancePrice(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "获取云数据库价格",
	FastFail:      false,
}

var testStep502CheckUDBInstanceAllowance04 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("CheckUDBInstanceAllowance")
		err = req.SetPayload(map[string]interface{}{
			"Zone":        step.Scenario.GetVar("Zone"),
			"UseSSD":      step.Scenario.GetVar("UseSSD"),
			"SSDType":     "SATA",
			"Region":      step.Scenario.GetVar("Region"),
			"MemoryLimit": step.Scenario.GetVar("MemoryLimit"),
			"DiskSpace":   step.Scenario.GetVar("DiskSpace"),
			"Count":       1,
			"ClassType":   "SQL",
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "核查UDB资源余量",
	FastFail:      false,
}

var testStep502CreateUDBInstance05 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDB")
		if err != nil {
			return nil, err
		}
		client := c.(*udb.UDBClient)

		req := client.NewCreateUDBInstanceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":          step.Scenario.GetVar("Zone"),
			"Region":        step.Scenario.GetVar("Region"),
			"Quantity":      0,
			"Port":          step.Scenario.GetVar("Port"),
			"ParamGroupId":  step.Must(functions.SearchValue(step.Scenario.GetVar("DataSet_paramGroup"), "DBTypeId", step.Scenario.GetVar("DBTypeId"), "GroupId")),
			"Name":          step.Must(functions.Concat(step.Scenario.GetVar("DBName"), step.Scenario.GetVar("DBTypeId"))),
			"MemoryLimit":   step.Scenario.GetVar("MemoryLimit"),
			"InstanceType":  step.Scenario.GetVar("InstanceType"),
			"InstanceMode":  step.Scenario.GetVar("InstanceMode"),
			"DiskSpace":     step.Scenario.GetVar("DiskSpace"),
			"DBTypeId":      step.Scenario.GetVar("DBTypeId"),
			"ChargeType":    "Month",
			"AdminPassword": "guanliyuanmima",
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.CreateUDBInstance(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("DBId", step.Must(utils.GetValue(resp, "DBId")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(1) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "创建数据库",
	FastFail:      false,
}

var testStep502DescribeUDBInstance06 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDB")
		if err != nil {
			return nil, err
		}
		client := c.(*udb.UDBClient)

		req := client.NewDescribeUDBInstanceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":      step.Scenario.GetVar("Zone"),
			"Region":    step.Scenario.GetVar("Region"),
			"Offset":    0,
			"Limit":     100,
			"DBId":      step.Scenario.GetVar("DBId"),
			"ClassType": "sql",
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeUDBInstance(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Name ", step.Must(functions.Concat(step.Scenario.GetVar("DBName"), step.Scenario.GetVar("DBTypeId"))), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.DBTypeId", step.Scenario.GetVar("DBTypeId"), "str_eq"),
		}
	},
	StartupDelay:  time.Duration(2) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "获取云数据库信息",
	FastFail:      false,
}

var testStep502DescribeUDBInstanceState07 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDB")
		if err != nil {
			return nil, err
		}
		client := c.(*udb.UDBClient)

		req := client.NewDescribeUDBInstanceStateRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"DBId":   step.Scenario.GetVar("DBId"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeUDBInstanceState(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("State", "Running", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(30) * time.Second,
	MaxRetries:    50,
	RetryInterval: 10 * time.Second,
	Title:         "获取云数据库状态",
	FastFail:      false,
}

var testStep502EnableUDBRWSplitting08 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("EnableUDBRWSplitting")
		err = req.SetPayload(map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"Region":     step.Scenario.GetVar("Region"),
			"MasterDBId": step.Scenario.GetVar("DBId"),
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 60035, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "启用读写分离功能",
	FastFail:      false,
}

var testStep502CheckUDBInstanceAllowance09 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("CheckUDBInstanceAllowance")
		err = req.SetPayload(map[string]interface{}{
			"Zone":        step.Scenario.GetVar("Zone"),
			"UseSSD":      step.Scenario.GetVar("UseSSD"),
			"SSDType":     "SATA",
			"Region":      step.Scenario.GetVar("Region"),
			"MemoryLimit": step.Scenario.GetVar("MemoryLimit"),
			"DiskSpace":   step.Scenario.GetVar("DiskSpace"),
			"Count":       1,
			"ClassType":   "SQL",
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "核查UDB资源余量",
	FastFail:      false,
}

var testStep502CreateUDBSlave10 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDB")
		if err != nil {
			return nil, err
		}
		client := c.(*udb.UDBClient)

		req := client.NewCreateUDBSlaveRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":    step.Scenario.GetVar("Zone"),
			"UseSSD":  step.Scenario.GetVar("UseSSD"),
			"SrcId":   step.Scenario.GetVar("DBId"),
			"SSDType": "SATA",
			"Region":  step.Scenario.GetVar("Region"),
			"Port":    3307,
			"Name":    "auto_slave_3307",
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.CreateUDBSlave(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("slave_dbid", step.Must(utils.GetValue(resp, "DBId")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(1) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "创建从库",
	FastFail:      true,
}

var testStep502DescribeUDBInstanceState11 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDB")
		if err != nil {
			return nil, err
		}
		client := c.(*udb.UDBClient)

		req := client.NewDescribeUDBInstanceStateRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"DBId":   step.Scenario.GetVar("slave_dbid"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeUDBInstanceState(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("State", "Running", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    100,
	RetryInterval: 3 * time.Second,
	Title:         "获取云数据库状态",
	FastFail:      true,
}

var testStep502EnableUDBRWSplitting12 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("EnableUDBRWSplitting")
		err = req.SetPayload(map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"Region":     step.Scenario.GetVar("Region"),
			"MasterDBId": step.Scenario.GetVar("DBId"),
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(60) * time.Second,
	MaxRetries:    10,
	RetryInterval: 1 * time.Second,
	Title:         "启用读写分离功能",
	FastFail:      false,
}

var testStep502DescribeUDBSplittingInfo13 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDBSplittingInfo")
		err = req.SetPayload(map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"Region":     step.Scenario.GetVar("Region"),
			"MasterDBId": step.Scenario.GetVar("DBId"),
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("DBTypeId", step.Scenario.GetVar("DBTypeId"), "str_eq"),
			validation.Builtins.NewValidator("MasterDBId", step.Scenario.GetVar("DBId"), "str_eq"),
			validation.Builtins.NewValidator("Port", step.Scenario.GetVar("Port"), "str_eq"),
			validation.Builtins.NewValidator("RWState", "Running", "str_eq"),
			validation.Builtins.NewValidator("DelayThreshold", 30, "str_eq"),
			validation.Builtins.NewValidator("ReadModel", "SlaveUniform", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(30) * time.Second,
	MaxRetries:    3,
	RetryInterval: 10 * time.Second,
	Title:         "描述读写分离功能",
	FastFail:      true,
}

var testStep502SetUDBRWSplitting14 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("SetUDBRWSplitting")
		err = req.SetPayload(map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"Region":     step.Scenario.GetVar("Region"),
			"ReadModel":  "Uniform",
			"MasterDBId": step.Scenario.GetVar("DBId"),
			"DBIds": []interface{}{
				step.Scenario.GetVar("DBId"),
				step.Scenario.GetVar("slave_dbid"),
			},
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "设置读写分离",
	FastFail:      false,
}

var testStep502DescribeUDBSplittingInfo15 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDBSplittingInfo")
		err = req.SetPayload(map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"Region":     step.Scenario.GetVar("Region"),
			"MasterDBId": step.Scenario.GetVar("DBId"),
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("DBTypeId", step.Scenario.GetVar("DBTypeId"), "str_eq"),
			validation.Builtins.NewValidator("MasterDBId", step.Scenario.GetVar("DBId"), "str_eq"),
			validation.Builtins.NewValidator("Port", step.Scenario.GetVar("Port"), "str_eq"),
			validation.Builtins.NewValidator("RWState", "Running", "str_eq"),
			validation.Builtins.NewValidator("DelayThreshold", 30, "str_eq"),
			validation.Builtins.NewValidator("ReadModel", "Uniform", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(20) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "描述读写分离功能",
	FastFail:      false,
}

var testStep502SetUDBRWSplitting16 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("SetUDBRWSplitting")
		err = req.SetPayload(map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"Region":     step.Scenario.GetVar("Region"),
			"ReadModel":  "DataNodeOnly",
			"MasterDBId": step.Scenario.GetVar("DBId"),
			"DBIds": []interface{}{
				step.Scenario.GetVar("DBId"),
				step.Scenario.GetVar("slave_dbid"),
			},
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "设置读写分离",
	FastFail:      false,
}

var testStep502DescribeUDBSplittingInfo17 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDBSplittingInfo")
		err = req.SetPayload(map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"Region":     step.Scenario.GetVar("Region"),
			"MasterDBId": step.Scenario.GetVar("DBId"),
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("DBTypeId", step.Scenario.GetVar("DBTypeId"), "str_eq"),
			validation.Builtins.NewValidator("MasterDBId", step.Scenario.GetVar("DBId"), "str_eq"),
			validation.Builtins.NewValidator("Port", step.Scenario.GetVar("Port"), "str_eq"),
			validation.Builtins.NewValidator("RWState", "Running", "str_eq"),
			validation.Builtins.NewValidator("DelayThreshold", 30, "str_eq"),
			validation.Builtins.NewValidator("ReadModel", "DataNodeOnly", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(20) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "描述读写分离功能",
	FastFail:      false,
}

var testStep502SetUDBRWSplitting18 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("SetUDBRWSplitting")
		err = req.SetPayload(map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"ReadPercents": []interface{}{
				70,
				30,
			},
			"ReadModel":  "Custom",
			"MasterDBId": step.Scenario.GetVar("DBId"),
			"DBIds": []interface{}{
				step.Scenario.GetVar("DBId"),
				step.Scenario.GetVar("slave_dbid"),
			},
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "设置读写分离",
	FastFail:      false,
}

var testStep502DescribeUDBSplittingInfo19 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDBSplittingInfo")
		err = req.SetPayload(map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"Region":     step.Scenario.GetVar("Region"),
			"MasterDBId": step.Scenario.GetVar("DBId"),
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("DBTypeId", step.Scenario.GetVar("DBTypeId"), "str_eq"),
			validation.Builtins.NewValidator("MasterDBId", step.Scenario.GetVar("DBId"), "str_eq"),
			validation.Builtins.NewValidator("Port", step.Scenario.GetVar("Port"), "str_eq"),
			validation.Builtins.NewValidator("RWState", "Running", "str_eq"),
			validation.Builtins.NewValidator("DelayThreshold", 30, "str_eq"),
			validation.Builtins.NewValidator("ReadModel", "Custom", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(20) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "描述读写分离功能",
	FastFail:      false,
}

var testStep502SetUDBRWSplitting20 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("SetUDBRWSplitting")
		err = req.SetPayload(map[string]interface{}{
			"Zone":           step.Scenario.GetVar("Zone"),
			"Region":         step.Scenario.GetVar("Region"),
			"MasterDBId":     step.Scenario.GetVar("DBId"),
			"DelayThreshold": 0,
			"DBIds": []interface{}{
				step.Scenario.GetVar("DBId"),
				step.Scenario.GetVar("slave_dbid"),
			},
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "设置读写分离",
	FastFail:      false,
}

var testStep502DescribeUDBSplittingInfo21 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDBSplittingInfo")
		err = req.SetPayload(map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"Region":     step.Scenario.GetVar("Region"),
			"MasterDBId": step.Scenario.GetVar("DBId"),
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("DBTypeId", step.Scenario.GetVar("DBTypeId"), "str_eq"),
			validation.Builtins.NewValidator("MasterDBId", step.Scenario.GetVar("DBId"), "str_eq"),
			validation.Builtins.NewValidator("Port", step.Scenario.GetVar("Port"), "str_eq"),
			validation.Builtins.NewValidator("RWState", "Running", "str_eq"),
			validation.Builtins.NewValidator("DelayThreshold", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "描述读写分离功能",
	FastFail:      false,
}

var testStep502RestartRWSplitting22 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("RestartRWSplitting")
		err = req.SetPayload(map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"Region":     step.Scenario.GetVar("Region"),
			"MasterDBId": step.Scenario.GetVar("DBId"),
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    10,
	RetryInterval: 1 * time.Second,
	Title:         "读写分离中间件重启",
	FastFail:      false,
}

var testStep502DescribeUDBSplittingInfo23 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDBSplittingInfo")
		err = req.SetPayload(map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"Region":     step.Scenario.GetVar("Region"),
			"MasterDBId": step.Scenario.GetVar("DBId"),
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("DBTypeId", step.Scenario.GetVar("DBTypeId"), "str_eq"),
			validation.Builtins.NewValidator("MasterDBId", step.Scenario.GetVar("DBId"), "str_eq"),
			validation.Builtins.NewValidator("Port", step.Scenario.GetVar("Port"), "str_eq"),
			validation.Builtins.NewValidator("RWState", "Running", "str_eq"),
			validation.Builtins.NewValidator("DelayThreshold", 0, "str_eq"),
			validation.Builtins.NewValidator("ReadModel", "Custom", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(120) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "描述读写分离功能",
	FastFail:      false,
}

var testStep502DisableUDBRWSplitting24 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("DisableUDBRWSplitting")
		err = req.SetPayload(map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"Region":     step.Scenario.GetVar("Region"),
			"MasterDBId": step.Scenario.GetVar("DBId"),
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(2) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "关闭读写分离功能",
	FastFail:      false,
}

var testStep502StopUDBInstance25 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDB")
		if err != nil {
			return nil, err
		}
		client := c.(*udb.UDBClient)

		req := client.NewStopUDBInstanceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"DBId":   step.Scenario.GetVar("slave_dbid"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.StopUDBInstance(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "StopUDBInstanceResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 3 * time.Second,
	Title:         "关闭云数据库",
	FastFail:      false,
}

var testStep502DescribeUDBInstance26 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDB")
		if err != nil {
			return nil, err
		}
		client := c.(*udb.UDBClient)

		req := client.NewDescribeUDBInstanceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":      step.Scenario.GetVar("Zone"),
			"Region":    step.Scenario.GetVar("Region"),
			"Offset":    0,
			"Limit":     100,
			"DBId":      step.Scenario.GetVar("slave_dbid"),
			"ClassType": "sql",
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeUDBInstance(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.DBTypeId", step.Scenario.GetVar("DBTypeId"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.State", "Shutoff", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    20,
	RetryInterval: 3 * time.Second,
	Title:         "获取云数据库信息",
	FastFail:      false,
}

var testStep502StopUDBInstance27 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDB")
		if err != nil {
			return nil, err
		}
		client := c.(*udb.UDBClient)

		req := client.NewStopUDBInstanceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"DBId":   step.Scenario.GetVar("DBId"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.StopUDBInstance(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "StopUDBInstanceResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "关闭云数据库",
	FastFail:      false,
}

var testStep502DescribeUDBInstance28 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDB")
		if err != nil {
			return nil, err
		}
		client := c.(*udb.UDBClient)

		req := client.NewDescribeUDBInstanceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":      step.Scenario.GetVar("Zone"),
			"Region":    step.Scenario.GetVar("Region"),
			"Offset":    0,
			"Limit":     100,
			"DBId":      step.Scenario.GetVar("DBId"),
			"ClassType": "sql",
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeUDBInstance(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.DBTypeId", step.Scenario.GetVar("DBTypeId"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.State", "Shutoff", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    20,
	RetryInterval: 3 * time.Second,
	Title:         "获取云数据库信息",
	FastFail:      false,
}

var testStep502DeleteUDBInstance29 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDB")
		if err != nil {
			return nil, err
		}
		client := c.(*udb.UDBClient)

		req := client.NewDeleteUDBInstanceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"DBId":   step.Scenario.GetVar("slave_dbid"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DeleteUDBInstance(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{}
	},
	StartupDelay:  time.Duration(20) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "删除云数据库",
	FastFail:      false,
}

var testStep502DeleteUDBInstance30 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDB")
		if err != nil {
			return nil, err
		}
		client := c.(*udb.UDBClient)

		req := client.NewDeleteUDBInstanceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"DBId":   step.Scenario.GetVar("DBId"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DeleteUDBInstance(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{}
	},
	StartupDelay:  time.Duration(20) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "删除云数据库",
	FastFail:      false,
}
