// Code is generated by ucloud-model, DO NOT EDIT IT.

package tests

import (
	"testing"
	"time"

	"github.com/ucloud/ucloud-sdk-go/services/unet"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/driver"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/utils"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/validation"
)

func TestScenario1924(t *testing.T) {
	spec.ParallelTest(t, &driver.Scenario{
		PreCheck: func() {
			testAccPreCheck(t)
		},
		Id: "1924",
		Vars: func(scenario *driver.Scenario) map[string]interface{} {
			return map[string]interface{}{
				"Region": "cn-bj2",
			}
		},
		Owners: []string{"li.wei@ucloud.cn"},
		Title:  "eip自动化回归-01-BGP路线",
		Steps: []*driver.Step{
			testStep1924AllocateEIP01,
			testStep1924DescribeEIP02,
			testStep1924GetEIPPayMode03,
			testStep1924SetEIPPayMode04,
			testStep1924GetEIPPayMode05,
			testStep1924SetEIPPayMode06,
			testStep1924GetEIPUpgradePrice07,
			testStep1924GetEIPUpgradePrice08,
			testStep1924DescribeBandwidthUsage09,
			testStep1924DescribeBandwidthUsage10,
			testStep1924ReleaseEIP11,
		},
	})
}

var testStep1924AllocateEIP01 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UNet")
		if err != nil {
			return nil, err
		}
		client := c.(*unet.UNetClient)

		req := client.NewAllocateEIPRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Tag":          "Default",
			"Region":       step.Scenario.GetVar("Region"),
			"Quantity":     1,
			"PayMode":      "Bandwidth",
			"OperatorName": "Bgp",
			"Name":         "eiptest_bgp",
			"ChargeType":   "Month",
			"Bandwidth":    3,
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.AllocateEIP(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("EIPId", step.Must(utils.GetValue(resp, "EIPSet.0.EIPId")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "申请弹性IP",
	FastFail:      true,
}

var testStep1924DescribeEIP02 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UNet")
		if err != nil {
			return nil, err
		}
		client := c.(*unet.UNetClient)

		req := client.NewDescribeEIPRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Region": step.Scenario.GetVar("Region"),
			"EIPIds": []interface{}{
				step.Scenario.GetVar("EIPId"),
			},
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeEIP(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("EIPSet.0.EIPId", step.Scenario.GetVar("EIPId"), "str_eq"),
			validation.Builtins.NewValidator("EIPSet.0.Bandwidth", 3, "str_eq"),
			validation.Builtins.NewValidator("EIPSet.0.ChargeType", "Month", "str_eq"),
			validation.Builtins.NewValidator("EIPSet.0.PayMode", "Bandwidth", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取弹性IP信息",
	FastFail:      false,
}

var testStep1924GetEIPPayMode03 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UNet")
		if err != nil {
			return nil, err
		}
		client := c.(*unet.UNetClient)

		req := client.NewGetEIPPayModeRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Region": step.Scenario.GetVar("Region"),
			"EIPId": []interface{}{
				step.Scenario.GetVar("EIPId"),
			},
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.GetEIPPayMode(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("EIPPayMode.0.EIPPayMode", "Bandwidth", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取弹性IP计费方式",
	FastFail:      false,
}

var testStep1924SetEIPPayMode04 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UNet")
		if err != nil {
			return nil, err
		}
		client := c.(*unet.UNetClient)

		req := client.NewSetEIPPayModeRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Region":    step.Scenario.GetVar("Region"),
			"PayMode":   "Traffic",
			"EIPId":     step.Scenario.GetVar("EIPId"),
			"Bandwidth": 2,
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.SetEIPPayMode(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "设置弹性IP计费方式",
	FastFail:      false,
}

var testStep1924GetEIPPayMode05 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UNet")
		if err != nil {
			return nil, err
		}
		client := c.(*unet.UNetClient)

		req := client.NewGetEIPPayModeRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Region": step.Scenario.GetVar("Region"),
			"EIPId": []interface{}{
				step.Scenario.GetVar("EIPId"),
			},
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.GetEIPPayMode(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("EIPPayMode.0.EIPPayMode", "Traffic", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(3) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取弹性IP计费方式",
	FastFail:      false,
}

var testStep1924SetEIPPayMode06 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UNet")
		if err != nil {
			return nil, err
		}
		client := c.(*unet.UNetClient)

		req := client.NewSetEIPPayModeRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Region":    step.Scenario.GetVar("Region"),
			"PayMode":   "Bandwidth",
			"EIPId":     step.Scenario.GetVar("EIPId"),
			"Bandwidth": 3,
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.SetEIPPayMode(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(30) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "设置弹性IP计费方式",
	FastFail:      false,
}

var testStep1924GetEIPUpgradePrice07 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UNet")
		if err != nil {
			return nil, err
		}
		client := c.(*unet.UNetClient)

		req := client.NewGetEIPUpgradePriceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Region":    step.Scenario.GetVar("Region"),
			"EIPId":     step.Scenario.GetVar("EIPId"),
			"Bandwidth": 2,
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.GetEIPUpgradePrice(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Price", 0, "lt"),
		}
	},
	StartupDelay:  time.Duration(3) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取弹性IP带宽改动价格",
	FastFail:      false,
}

var testStep1924GetEIPUpgradePrice08 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UNet")
		if err != nil {
			return nil, err
		}
		client := c.(*unet.UNetClient)

		req := client.NewGetEIPUpgradePriceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Region":    step.Scenario.GetVar("Region"),
			"EIPId":     step.Scenario.GetVar("EIPId"),
			"Bandwidth": 4,
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.GetEIPUpgradePrice(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Price", 0, "gt"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取弹性IP带宽改动价格",
	FastFail:      false,
}

var testStep1924DescribeBandwidthUsage09 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UNet")
		if err != nil {
			return nil, err
		}
		client := c.(*unet.UNetClient)

		req := client.NewDescribeBandwidthUsageRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Region": step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeBandwidthUsage(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("EIPSet", 1, "len_ge"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取带宽用量",
	FastFail:      false,
}

var testStep1924DescribeBandwidthUsage10 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UNet")
		if err != nil {
			return nil, err
		}
		client := c.(*unet.UNetClient)

		req := client.NewDescribeBandwidthUsageRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Region": step.Scenario.GetVar("Region"),
			"EIPIds": []interface{}{
				step.Scenario.GetVar("EIPId"),
			},
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeBandwidthUsage(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("EIPSet.0.EIPId", step.Scenario.GetVar("EIPId"), "str_eq"),
			validation.Builtins.NewValidator("EIPSet.0.CurBandwidth", 0, "le"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取带宽用量",
	FastFail:      false,
}

var testStep1924ReleaseEIP11 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UNet")
		if err != nil {
			return nil, err
		}
		client := c.(*unet.UNetClient)

		req := client.NewReleaseEIPRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Region": step.Scenario.GetVar("Region"),
			"EIPId":  step.Scenario.GetVar("EIPId"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.ReleaseEIP(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(5) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "释放弹性IP",
	FastFail:      false,
}
