// Code is generated by ucloud-model, DO NOT EDIT IT.

package tests

import (
	"testing"
	"time"

	"github.com/ucloud/ucloud-sdk-go/services/udb"
	"github.com/ucloud/ucloud-sdk-go/ucloud"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/driver"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/functions"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/utils"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/validation"
)

func TestScenario246(t *testing.T) {
	spec.ParallelTest(t, &driver.Scenario{
		PreCheck: func() {
			testAccPreCheck(t)
		},
		Id: "246",
		Vars: func(scenario *driver.Scenario) map[string]interface{} {
			return map[string]interface{}{
				"DBTypeId":     "mysql-5.6",
				"InstanceMode": "Normal",
				"InstanceType": "SATA_SSD",
				"Port":         3306,
				"MemoryLimit":  1000,
				"DiskSpace":    20,
				"DBName":       "auto_ptssd_",
				"BackupName":   "handbf_test_02",
				"UseSSD":       "true",
				"Region":       "cn-bj2",
				"Zone":         "cn-bj2-03",
			}
		},
		Owners: []string{"xiangyu.wang@ucloud.cn"},
		Title:  "Mysql_Normal_SSD_mysql 5.6_02",
		Steps: []*driver.Step{
			testStep246DescribeUDBType01,
			testStep246DescribeUDBParamGroup02,
			testStep246DescribeUDBInstancePrice03,
			testStep246CheckUDBInstanceAllowance04,
			testStep246CreateUDBInstance05,
			testStep246DescribeUDBInstanceState06,
			testStep246DescribeUDBInstancePhpMyAdminURL07,
			testStep246UpdateUDBInstanceBackupStrategy08,
			testStep246EditUDBBackupBlacklist09,
			testStep246DescribeUDBBackupBlacklist10,
			testStep246BackupUDBInstance11,
			testStep246DescribeUDBBackup12,
			testStep246DescribeUDBInstanceBackupState13,
			testStep246CheckUDBInstanceAllowance14,
			testStep246DescribeUDBInstanceBackupURL15,
			testStep246CreateUDBInstance16,
			testStep246DescribeUDBInstanceState17,
			testStep246DescribeUDBInstanceState18,
			testStep246StopUDBInstance19,
			testStep246DescribeUDBInstance20,
			testStep246CheckRecoverUDBInstance21,
			testStep246FetchUDBInstanceEarliestRecoverTime22,
			testStep246CheckUDBInstanceAllowance23,
			testStep246CreateUDBInstanceByRecovery24,
			testStep246DescribeUDBInstanceState25,
			testStep246DescribeUDBInstance26,
			testStep246StopUDBInstance27,
			testStep246DescribeUDBInstance28,
			testStep246DeleteUDBBackup29,
			testStep246StopUDBInstance30,
			testStep246DescribeUDBInstance31,
			testStep246DeleteUDBInstance32,
			testStep246DeleteUDBInstance33,
			testStep246DeleteUDBInstance34,
		},
	})
}

var testStep246DescribeUDBType01 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDB")
		if err != nil {
			return nil, err
		}
		client := c.(*udb.UDBClient)

		req := client.NewDescribeUDBTypeRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeUDBType(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "获取云数据库支持类型",
	FastFail:      false,
}

var testStep246DescribeUDBParamGroup02 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDB")
		if err != nil {
			return nil, err
		}
		client := c.(*udb.UDBClient)

		req := client.NewDescribeUDBParamGroupRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"Offset": 0,
			"Limit":  100,
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeUDBParamGroup(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("DataSet_paramGroup", step.Must(utils.GetValue(resp, "DataSet")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "获取参数信息",
	FastFail:      false,
}

var testStep246DescribeUDBInstancePrice03 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDB")
		if err != nil {
			return nil, err
		}
		client := c.(*udb.UDBClient)

		req := client.NewDescribeUDBInstancePriceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":        step.Scenario.GetVar("Zone"),
			"Region":      step.Scenario.GetVar("Region"),
			"MemoryLimit": step.Scenario.GetVar("MemoryLimit"),
			"DiskSpace":   step.Scenario.GetVar("DiskSpace"),
			"DBTypeId":    step.Scenario.GetVar("DBTypeId"),
			"Count":       1,
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeUDBInstancePrice(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "获取云数据库价格",
	FastFail:      false,
}

var testStep246CheckUDBInstanceAllowance04 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("CheckUDBInstanceAllowance")
		err = req.SetPayload(map[string]interface{}{
			"Zone":        step.Scenario.GetVar("Zone"),
			"UseSSD":      step.Scenario.GetVar("UseSSD"),
			"Region":      step.Scenario.GetVar("Region"),
			"MemoryLimit": step.Scenario.GetVar("MemoryLimit"),
			"DiskSpace":   step.Scenario.GetVar("DiskSpace"),
			"Count":       1,
			"ClassType":   "SQL",
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "核查UDB资源余量",
	FastFail:      true,
}

var testStep246CreateUDBInstance05 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDB")
		if err != nil {
			return nil, err
		}
		client := c.(*udb.UDBClient)

		req := client.NewCreateUDBInstanceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":          step.Scenario.GetVar("Zone"),
			"Region":        step.Scenario.GetVar("Region"),
			"Quantity":      0,
			"Port":          step.Scenario.GetVar("Port"),
			"ParamGroupId":  step.Must(functions.SearchValue(step.Scenario.GetVar("DataSet_paramGroup"), "DBTypeId", step.Scenario.GetVar("DBTypeId"), "GroupId")),
			"Name":          step.Must(functions.Concat(step.Scenario.GetVar("DBName"), step.Scenario.GetVar("DBTypeId"))),
			"MemoryLimit":   step.Scenario.GetVar("MemoryLimit"),
			"InstanceType":  step.Scenario.GetVar("InstanceType"),
			"InstanceMode":  step.Scenario.GetVar("InstanceMode"),
			"DiskSpace":     step.Scenario.GetVar("DiskSpace"),
			"DBTypeId":      step.Scenario.GetVar("DBTypeId"),
			"ChargeType":    "Month",
			"AdminPassword": "guanliyuanmima",
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.CreateUDBInstance(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("DBId", step.Must(utils.GetValue(resp, "DBId")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(1) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "创建数据库",
	FastFail:      false,
}

var testStep246DescribeUDBInstanceState06 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDB")
		if err != nil {
			return nil, err
		}
		client := c.(*udb.UDBClient)

		req := client.NewDescribeUDBInstanceStateRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"DBId":   step.Scenario.GetVar("DBId"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeUDBInstanceState(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUDBInstanceStateResponse", "str_eq"),
			validation.Builtins.NewValidator("State", "Running", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(30) * time.Second,
	MaxRetries:    50,
	RetryInterval: 10 * time.Second,
	Title:         "获取云数据库状态",
	FastFail:      false,
}

var testStep246DescribeUDBInstancePhpMyAdminURL07 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDBInstancePhpMyAdminURL")
		err = req.SetPayload(map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"DBId":   step.Scenario.GetVar("DBId"),
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUDBInstancePhpMyAdminURLResponse", "str_eq"),
			validation.Builtins.NewValidator("PMAPath", "", "ne"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "获取UDB实例的PhpMyAdmin地址",
	FastFail:      false,
}

var testStep246UpdateUDBInstanceBackupStrategy08 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDB")
		if err != nil {
			return nil, err
		}
		client := c.(*udb.UDBClient)

		req := client.NewUpdateUDBInstanceBackupStrategyRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"Region":     step.Scenario.GetVar("Region"),
			"DBId":       step.Scenario.GetVar("DBId"),
			"BackupTime": 12,
			"BackupDate": 1111110,
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.UpdateUDBInstanceBackupStrategy(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(2) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "修改UDB自动备份策略",
	FastFail:      false,
}

var testStep246EditUDBBackupBlacklist09 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDB")
		if err != nil {
			return nil, err
		}
		client := c.(*udb.UDBClient)

		req := client.NewEditUDBBackupBlacklistRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":      step.Scenario.GetVar("Zone"),
			"Region":    step.Scenario.GetVar("Region"),
			"DBId":      step.Scenario.GetVar("DBId"),
			"Blacklist": "test.%",
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.EditUDBBackupBlacklist(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(1) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "编辑备份黑名单",
	FastFail:      false,
}

var testStep246DescribeUDBBackupBlacklist10 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDB")
		if err != nil {
			return nil, err
		}
		client := c.(*udb.UDBClient)

		req := client.NewDescribeUDBBackupBlacklistRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"DBId":   step.Scenario.GetVar("DBId"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeUDBBackupBlacklist(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Blacklist", "test.%", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    20,
	RetryInterval: 3 * time.Second,
	Title:         "获取备份黑名单",
	FastFail:      false,
}

var testStep246BackupUDBInstance11 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDB")
		if err != nil {
			return nil, err
		}
		client := c.(*udb.UDBClient)

		req := client.NewBackupUDBInstanceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":         step.Scenario.GetVar("Zone"),
			"UseBlacklist": "true",
			"Region":       step.Scenario.GetVar("Region"),
			"DBId":         step.Scenario.GetVar("DBId"),
			"BackupName":   step.Scenario.GetVar("BackupName"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.BackupUDBInstance(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(6) * time.Second,
	MaxRetries:    2,
	RetryInterval: 1 * time.Second,
	Title:         "备份云数据库",
	FastFail:      false,
}

var testStep246DescribeUDBBackup12 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDB")
		if err != nil {
			return nil, err
		}
		client := c.(*udb.UDBClient)

		req := client.NewDescribeUDBBackupRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"Offset": 0,
			"Limit":  100,
			"DBId":   step.Scenario.GetVar("DBId"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeUDBBackup(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("BackupId", step.Must(utils.GetValue(resp, "DataSet.0.BackupId")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    20,
	RetryInterval: 3 * time.Second,
	Title:         "获取备份列表",
	FastFail:      false,
}

var testStep246DescribeUDBInstanceBackupState13 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDB")
		if err != nil {
			return nil, err
		}
		client := c.(*udb.UDBClient)

		req := client.NewDescribeUDBInstanceBackupStateRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":     step.Scenario.GetVar("Zone"),
			"Region":   step.Scenario.GetVar("Region"),
			"BackupId": step.Scenario.GetVar("BackupId"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeUDBInstanceBackupState(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("State", "Success", "str_eq"),
			validation.Builtins.NewValidator("BackupSize", 0, "ne"),
			validation.Builtins.NewValidator("BackupEndTime", 0, "ne"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    30,
	RetryInterval: 3 * time.Second,
	Title:         "获取实例备份状态",
	FastFail:      false,
}

var testStep246CheckUDBInstanceAllowance14 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("CheckUDBInstanceAllowance")
		err = req.SetPayload(map[string]interface{}{
			"Zone":        step.Scenario.GetVar("Zone"),
			"UseSSD":      step.Scenario.GetVar("UseSSD"),
			"Region":      step.Scenario.GetVar("Region"),
			"MemoryLimit": step.Scenario.GetVar("MemoryLimit"),
			"DiskSpace":   step.Scenario.GetVar("DiskSpace"),
			"Count":       1,
			"ClassType":   "SQL",
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(1) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "核查UDB资源余量",
	FastFail:      false,
}

var testStep246DescribeUDBInstanceBackupURL15 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDB")
		if err != nil {
			return nil, err
		}
		client := c.(*udb.UDBClient)

		req := client.NewDescribeUDBInstanceBackupURLRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":     step.Scenario.GetVar("Zone"),
			"Region":   step.Scenario.GetVar("Region"),
			"DBId":     step.Scenario.GetVar("DBId"),
			"BackupId": step.Scenario.GetVar("BackupId"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeUDBInstanceBackupURL(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("BackupPath", "http://", "contains"),
		}
	},
	StartupDelay:  time.Duration(1) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "获取UDB备份下载地址",
	FastFail:      false,
}

var testStep246CreateUDBInstance16 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDB")
		if err != nil {
			return nil, err
		}
		client := c.(*udb.UDBClient)

		req := client.NewCreateUDBInstanceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":          step.Scenario.GetVar("Zone"),
			"Region":        step.Scenario.GetVar("Region"),
			"Quantity":      0,
			"Port":          3306,
			"ParamGroupId":  step.Must(functions.SearchValue(step.Scenario.GetVar("DataSet_paramGroup"), "DBTypeId", "mysql-5.7", "GroupId")),
			"Name":          "frombf-ptbz-57",
			"MemoryLimit":   step.Scenario.GetVar("MemoryLimit"),
			"InstanceType":  step.Scenario.GetVar("InstanceType"),
			"InstanceMode":  step.Scenario.GetVar("InstanceMode"),
			"DiskSpace":     step.Scenario.GetVar("DiskSpace"),
			"DBTypeId":      "mysql-5.7",
			"ChargeType":    "Month",
			"BackupId":      step.Scenario.GetVar("BackupId"),
			"AdminPassword": "guanliyuanmima",
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.CreateUDBInstance(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("DBId_frombf_57", step.Must(utils.GetValue(resp, "DBId")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(1) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "创建数据库",
	FastFail:      false,
}

var testStep246DescribeUDBInstanceState17 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDB")
		if err != nil {
			return nil, err
		}
		client := c.(*udb.UDBClient)

		req := client.NewDescribeUDBInstanceStateRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"DBId":   step.Scenario.GetVar("DBId_frombf_57"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeUDBInstanceState(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("State", "Running", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(30) * time.Second,
	MaxRetries:    50,
	RetryInterval: 10 * time.Second,
	Title:         "获取云数据库状态",
	FastFail:      false,
}

var testStep246DescribeUDBInstanceState18 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDB")
		if err != nil {
			return nil, err
		}
		client := c.(*udb.UDBClient)

		req := client.NewDescribeUDBInstanceStateRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"DBId":   step.Scenario.GetVar("DBId_frombf_57"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeUDBInstanceState(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("State", "Running", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(3) * time.Second,
	MaxRetries:    100,
	RetryInterval: 5 * time.Second,
	Title:         "获取云数据库状态",
	FastFail:      false,
}

var testStep246StopUDBInstance19 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDB")
		if err != nil {
			return nil, err
		}
		client := c.(*udb.UDBClient)

		req := client.NewStopUDBInstanceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"DBId":   step.Scenario.GetVar("DBId_frombf_57"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.StopUDBInstance(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "StopUDBInstanceResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(30) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "关闭云数据库",
	FastFail:      false,
}

var testStep246DescribeUDBInstance20 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDB")
		if err != nil {
			return nil, err
		}
		client := c.(*udb.UDBClient)

		req := client.NewDescribeUDBInstanceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"DBId":   step.Scenario.GetVar("DBId_frombf_57"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeUDBInstance(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUDBInstanceResponse", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.State", "Shutoff", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    20,
	RetryInterval: 3 * time.Second,
	Title:         "获取云数据库信息",
	FastFail:      false,
}

var testStep246CheckRecoverUDBInstance21 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDB")
		if err != nil {
			return nil, err
		}
		client := c.(*udb.UDBClient)

		req := client.NewCheckRecoverUDBInstanceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":    step.Scenario.GetVar("Zone"),
			"SrcDBId": step.Scenario.GetVar("DBId"),
			"Region":  step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.CheckRecoverUDBInstance(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "CheckRecoverUDBInstanceResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "核查db是否可以使用回档功能",
	FastFail:      false,
}

var testStep246FetchUDBInstanceEarliestRecoverTime22 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDB")
		if err != nil {
			return nil, err
		}
		client := c.(*udb.UDBClient)

		req := client.NewFetchUDBInstanceEarliestRecoverTimeRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"DBId":   step.Scenario.GetVar("DBId"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.FetchUDBInstanceEarliestRecoverTime(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("EarliestTime", step.Must(utils.GetValue(resp, "EarliestTime")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("EarliestTime", 0, "ne"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    20,
	RetryInterval: 3 * time.Second,
	Title:         "获取最早可回档时间",
	FastFail:      false,
}

var testStep246CheckUDBInstanceAllowance23 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)

		req := client.NewGenericRequest()
		_ = req.SetAction("CheckUDBInstanceAllowance")
		err = req.SetPayload(map[string]interface{}{
			"Zone":        step.Scenario.GetVar("Zone"),
			"UseSSD":      step.Scenario.GetVar("UseSSD"),
			"Region":      step.Scenario.GetVar("Region"),
			"MemoryLimit": step.Scenario.GetVar("MemoryLimit"),
			"DiskSpace":   step.Scenario.GetVar("DiskSpace"),
			"Count":       1,
			"ClassType":   "sql",
		})
		if err != nil {
			return nil, err
		}
		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "核查UDB资源余量",
	FastFail:      false,
}

var testStep246CreateUDBInstanceByRecovery24 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDB")
		if err != nil {
			return nil, err
		}
		client := c.(*udb.UDBClient)

		req := client.NewCreateUDBInstanceByRecoveryRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":         step.Scenario.GetVar("Zone"),
			"SrcDBId":      step.Scenario.GetVar("DBId"),
			"Region":       step.Scenario.GetVar("Region"),
			"RecoveryTime": step.Scenario.GetVar("EarliestTime"),
			"Quantity":     0,
			"Name":         "56-hd-frombf",
			"ChargeType":   "Month",
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.CreateUDBInstanceByRecovery(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("Nor_DBId", step.Must(utils.GetValue(resp, "DBId")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    2,
	RetryInterval: 3 * time.Second,
	Title:         "将新建的db恢复到指定db某个指定时间点",
	FastFail:      false,
}

var testStep246DescribeUDBInstanceState25 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDB")
		if err != nil {
			return nil, err
		}
		client := c.(*udb.UDBClient)

		req := client.NewDescribeUDBInstanceStateRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"DBId":   step.Scenario.GetVar("Nor_DBId"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeUDBInstanceState(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("State", "Running", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    20,
	RetryInterval: 3 * time.Second,
	Title:         "获取云数据库状态",
	FastFail:      true,
}

var testStep246DescribeUDBInstance26 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDB")
		if err != nil {
			return nil, err
		}
		client := c.(*udb.UDBClient)

		req := client.NewDescribeUDBInstanceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":      step.Scenario.GetVar("Zone"),
			"Region":    step.Scenario.GetVar("Region"),
			"Offset":    0,
			"Limit":     100,
			"DBId":      step.Scenario.GetVar("Nor_DBId"),
			"ClassType": "sql",
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeUDBInstance(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUDBInstanceResponse", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.State", "Running", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(3) * time.Second,
	MaxRetries:    100,
	RetryInterval: 5 * time.Second,
	Title:         "获取云数据库信息",
	FastFail:      false,
}

var testStep246StopUDBInstance27 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDB")
		if err != nil {
			return nil, err
		}
		client := c.(*udb.UDBClient)

		req := client.NewStopUDBInstanceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"DBId":   step.Scenario.GetVar("Nor_DBId"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.StopUDBInstance(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "StopUDBInstanceResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "关闭云数据库",
	FastFail:      false,
}

var testStep246DescribeUDBInstance28 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDB")
		if err != nil {
			return nil, err
		}
		client := c.(*udb.UDBClient)

		req := client.NewDescribeUDBInstanceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"DBId":   step.Scenario.GetVar("Nor_DBId"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeUDBInstance(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUDBInstanceResponse", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.State", "Shutoff", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    20,
	RetryInterval: 3 * time.Second,
	Title:         "获取云数据库信息",
	FastFail:      false,
}

var testStep246DeleteUDBBackup29 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDB")
		if err != nil {
			return nil, err
		}
		client := c.(*udb.UDBClient)

		req := client.NewDeleteUDBBackupRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":     step.Scenario.GetVar("Zone"),
			"Region":   step.Scenario.GetVar("Region"),
			"BackupId": step.Scenario.GetVar("BackupId"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DeleteUDBBackup(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(10) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "删除备份",
	FastFail:      false,
}

var testStep246StopUDBInstance30 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDB")
		if err != nil {
			return nil, err
		}
		client := c.(*udb.UDBClient)

		req := client.NewStopUDBInstanceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"DBId":   step.Scenario.GetVar("DBId"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.StopUDBInstance(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "StopUDBInstanceResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "关闭云数据库",
	FastFail:      false,
}

var testStep246DescribeUDBInstance31 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDB")
		if err != nil {
			return nil, err
		}
		client := c.(*udb.UDBClient)

		req := client.NewDescribeUDBInstanceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"DBId":   step.Scenario.GetVar("DBId"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeUDBInstance(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUDBInstanceResponse", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.State", "Shutoff", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    20,
	RetryInterval: 3 * time.Second,
	Title:         "获取云数据库信息",
	FastFail:      false,
}

var testStep246DeleteUDBInstance32 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDB")
		if err != nil {
			return nil, err
		}
		client := c.(*udb.UDBClient)

		req := client.NewDeleteUDBInstanceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"DBId":   step.Scenario.GetVar("DBId_frombf_57"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DeleteUDBInstance(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{}
	},
	StartupDelay:  time.Duration(2) * time.Second,
	MaxRetries:    2,
	RetryInterval: 1 * time.Second,
	Title:         "删除云数据库",
	FastFail:      false,
}

var testStep246DeleteUDBInstance33 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDB")
		if err != nil {
			return nil, err
		}
		client := c.(*udb.UDBClient)

		req := client.NewDeleteUDBInstanceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"DBId":   step.Scenario.GetVar("Nor_DBId"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DeleteUDBInstance(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{}
	},
	StartupDelay:  time.Duration(2) * time.Second,
	MaxRetries:    2,
	RetryInterval: 1 * time.Second,
	Title:         "删除云数据库",
	FastFail:      false,
}

var testStep246DeleteUDBInstance34 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDB")
		if err != nil {
			return nil, err
		}
		client := c.(*udb.UDBClient)

		req := client.NewDeleteUDBInstanceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"DBId":   step.Scenario.GetVar("DBId"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DeleteUDBInstance(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{}
	},
	StartupDelay:  time.Duration(2) * time.Second,
	MaxRetries:    2,
	RetryInterval: 1 * time.Second,
	Title:         "删除云数据库",
	FastFail:      false,
}
