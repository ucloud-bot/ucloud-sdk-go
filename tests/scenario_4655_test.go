// Code is generated by ucloud-model, DO NOT EDIT IT.

package tests

import (
	"testing"
	"time"

	"github.com/ucloud/ucloud-sdk-go/services/udpn"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/driver"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/functions"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/utils"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/validation"
)

func TestScenario4655(t *testing.T) {
	spec.ParallelTest(t, &driver.Scenario{
		PreCheck: func() {
			testAccPreCheck(t)
		},
		Id: "4655",
		Vars: func(scenario *driver.Scenario) map[string]interface{} {
			return map[string]interface{}{
				"v_peer2":         scenario.Must(functions.Concat("#{u_get_udpn_region_resource(", step.Scenario.GetVar("Region"))),
				"create_udpn_bw":  2,
				"upgrade_udpn_bw": 3,
				"charge_type":     "Month",
				"Region":          "cn-bj2",
				"Zone":            "cn-bj2-02",
			}
		},
		Owners: []string{"peter.zhang@ucloud.cn"},
		Title:  "UDPN自动化回归-基本功能",
		Steps: []*driver.Step{
			testStep4655GetUDPNLineList01,
			testStep4655GetUDPNPrice02,
			testStep4655AllocateUDPN03,
			testStep4655DescribeUDPN04,
			testStep4655GetUDPNUpgradePrice05,
			testStep4655ModifyUDPNBandwidth06,
			testStep4655ReleaseUDPN07,
		},
	})
}

var testStep4655GetUDPNLineList01 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDPN")
		if err != nil {
			return nil, err
		}
		client := c.(*udpn.UDPNClient)

		req := client.NewGetUDPNLineListRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Region": step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.GetUDPNLineList(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "GetUDPNLineListResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取专线线路列表",
	FastFail:      true,
}

var testStep4655GetUDPNPrice02 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDPN")
		if err != nil {
			return nil, err
		}
		client := c.(*udpn.UDPNClient)

		req := client.NewGetUDPNPriceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Region":    step.Scenario.GetVar("Region"),
			"Peer2":     "hk",
			"Peer1":     step.Scenario.GetVar("Region"),
			"Bandwidth": 2,
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.GetUDPNPrice(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "GetUDPNPriceResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取 UDPN 价格",
	FastFail:      false,
}

var testStep4655AllocateUDPN03 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDPN")
		if err != nil {
			return nil, err
		}
		client := c.(*udpn.UDPNClient)

		req := client.NewAllocateUDPNRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"Region":     step.Scenario.GetVar("Region"),
			"Peer2":      "hk",
			"Peer1":      step.Scenario.GetVar("Region"),
			"ChargeType": step.Scenario.GetVar("charge_type"),
			"Bandwidth":  step.Scenario.GetVar("create_udpn_bw"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.AllocateUDPN(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("UdpnId", step.Must(utils.GetValue(resp, "UDPNId")))
		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "AllocateUDPNResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "分配 UDPN 专线",
	FastFail:      false,
}

var testStep4655DescribeUDPN04 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDPN")
		if err != nil {
			return nil, err
		}
		client := c.(*udpn.UDPNClient)

		req := client.NewDescribeUDPNRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"UDPNId": "^UdpnId",
			"Region": step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.DescribeUDPN(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUDPNResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(1) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "描述 UDPN",
	FastFail:      false,
}

var testStep4655GetUDPNUpgradePrice05 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDPN")
		if err != nil {
			return nil, err
		}
		client := c.(*udpn.UDPNClient)

		req := client.NewGetUDPNUpgradePriceRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"UDPNId":    "^UdpnId",
			"Region":    step.Scenario.GetVar("Region"),
			"Bandwidth": step.Scenario.GetVar("upgrade_udpn_bw"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.GetUDPNUpgradePrice(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "GetUDPNUpgradePriceResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取升级价格",
	FastFail:      false,
}

var testStep4655ModifyUDPNBandwidth06 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDPN")
		if err != nil {
			return nil, err
		}
		client := c.(*udpn.UDPNClient)

		req := client.NewModifyUDPNBandwidthRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"UDPNId":    step.Scenario.GetVar("UdpnId"),
			"Region":    step.Scenario.GetVar("Region"),
			"Bandwidth": step.Scenario.GetVar("upgrade_udpn_bw"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.ModifyUDPNBandwidth(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "ModifyUDPNBandwidthResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(1) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "修改带宽",
	FastFail:      false,
}

var testStep4655ReleaseUDPN07 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.LoadFixture("UDPN")
		if err != nil {
			return nil, err
		}
		client := c.(*udpn.UDPNClient)

		req := client.NewReleaseUDPNRequest()
		err = utils.SetRequest(req, map[string]interface{}{
			"UDPNId": step.Scenario.GetVar("UdpnId"),
			"Region": step.Scenario.GetVar("Region"),
		})
		if err != nil {
			return nil, err
		}

		resp, err := client.ReleaseUDPN(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "ReleaseUDPNResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(1) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "释放 UDPN",
	FastFail:      false,
}
